/*
 Navicat Premium Data Transfer

 Source Server         : Blogweb
 Source Server Type    : MySQL
 Source Server Version : 50721
 Source Host           : localhost:3306
 Source Schema         : blogweb

 Target Server Type    : MySQL
 Target Server Version : 50721
 File Encoding         : 65001

 Date: 01/06/2019 20:54:34
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for content
-- ----------------------------
DROP TABLE IF EXISTS `content`;
CREATE TABLE `content` (
  `title` varchar(255) COLLATE utf8_bin NOT NULL,
  `Detailed` mediumtext COLLATE utf8_bin,
  `time` datetime NOT NULL,
  `kind` varchar(255) COLLATE utf8_bin NOT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userid` int(11) DEFAULT NULL,
  `dateTim` varchar(255) COLLATE utf8_bin NOT NULL,
  `uname` varchar(255) COLLATE utf8_bin NOT NULL,
  `headimg` varchar(255) COLLATE utf8_bin NOT NULL,
  `star` int(255) NOT NULL DEFAULT '0',
  `praiseUsers` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=229 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of content
-- ----------------------------
BEGIN;
INSERT INTO `content` VALUES ('Vue nginx ubuntu 打包部署上线', '### Vue 项目 config/index.js\n##### 配置代码如下\n```python\nbuild: {\n	index: path.resolve(__dirname, \'../dist/index.html\'),\n	assetsRoot: path.resolve(__dirname, \'../dist\'),\n	assetsSubDirectory: \'static\',\n	assetsPublicPath: \'./\',\n	//assetsPublicPath: \'/\',\n	productionSourceMap: false,\n	devtool: \'#source-map\',\n	productionGzip: false,\n	productionGzipExtensions: [\'js\', \'css\'],\n	bundleAnalyzerReport: process.env.npm_config_report\n}\n```\n目前取消了++history++模式，尚未解决问题\n\n### nginx 安装\n```\n$ sudo apt update\n$ sudo apt-get install nginx\n```\n[参考网站](http://111.231.255.225:81/blog/2018/09/29/)\n### 修改nginx配置文件\n##### sudo vim /etc/nginx/nginx.conf 在http 中添加server\n\n```nginx\nserver {\n        listen 80;\n	#80端口为服务器默认端口\n        server_name _;\n        location / {\n            root /home/ubuntu/dist;\n           index  index.html ;\n	try_files $uri $uri/ /index.html;\n	#当页面找不到当时候，仍然停留在当前页，针对vue\n	proxy_set_header HOST $host;\n	proxy_set_header X-Real-IP $remote_addr;\n	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      }\n```\n### 提示\n- listen 指的是端口号 \n- 记住不要直接访问你的域名的80端口 \n- 他会被nginx的页面占用 无论你怎么弄都没用 \n- 然后这个root 就是你的dist的地址\n- index 是指向你的index.html \n- server_name 设置成这样是因为 可以完全匹配你的域名 \n- 然后就保存 sudo nginx -s reload 部署一下 \n- sudo service nginx restart 重启部署\n- # 因为nginx默认占用了服务器的80端口，要想使用80端口默认开启web必须改变默认端口，步骤如下，cd进入```/etc/nginx/sites-enabled```,修改default，```sudo vim default```如下\n\n```nginx\nserver{\nlisten 7777 default_server;\nlisten [::]:7777 default_srver;\n}\n```\n\n\n\n', '2018-10-10 22:26:24', 'ubuntu', 17, 2, 'Wed Oct 10 2018 14:26:26 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('split() 和 join()  方法 字符串', '### split()定义和用法\nsplit() 方法用于把一个字符串分割成字符串数组。\n\n### 语法\n```\nstringObject.split(separator,howmany)\n```\n\n| 参数 |描述|\n|-|-|-|\n| separator |必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。|\n| howmany |可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。|\n\n### 返回值\n一个字符串数组。该数组是通过在 separator 指定的边界处将字符串 stringObject 分割成子串创建的。返回的数组中的字串不包括 separator 自身。\n\n但是，如果 separator 是包含子表达式的正则表达式，那么返回的数组中包括与这些子表达式匹配的字串（但不包括与整个正则表达式匹配的文本）。\n\n### 提示和注释\n\n**注释**：如果把空字符串 (\"\") 用作 separator，那么 stringObject 中的每个字符之间都会被分割。\n\n**注释**：String.split() 执行的操作与 Array.join 执行的操作是相反的。\n\n##### 例子1.\n在本例中，我们将按照不同的方式来分割字符串： \n```javascript\n<script type=\"text/javascript\">\n\nvar str=\"How are you doing today?\"\n\ndocument.write(str.split(\" \") + \"<br />\")\ndocument.write(str.split(\"\") + \"<br />\")\ndocument.write(str.split(\" \",3))\n\n</script>\n```\n##### 输出2.\n```\nHow,are,you,doing,today?\nH,o,w, ,a,r,e, ,y,o,u, ,d,o,i,n,g, ,t,o,d,a,y,?\nHow,are,you\n```\n##### 例子2.\n在本例中，我们将分割结构更为复杂的字符串： \n```javascript\n\"2:3:4:5\".split(\":\")	//将返回[\"2\", \"3\", \"4\", \"5\"]\n\"|a|b|c\".split(\"|\")	//将返回[\"\", \"a\", \"b\", \"c\"]\n```\n##### 例子3.\n使用下面的代码，可以把句子分割成单词：\n```\nvar words = sentence.split(\' \')\nvar words = sentence.split(/\\s+/)\n```\n##### 例子4.\n如果您希望把单词分割为字母，或者把字符串分割为字符，可使用下面的代码：\n```javascript\n\"hello\".split(\"\")	//可返回 [\"h\", \"e\", \"l\", \"l\", \"o\"]\n// 若只需要返回一部分字符，请使用 howmany 参数：\n\"hello\".split(\"\", 3)	//可返回 [\"h\", \"e\", \"l\"]\n```\n\n\n### join()定义和用法\njoin() 方法用于把数组中的所有元素放入一个字符串。\n\n元素是通过指定的分隔符进行分隔的。\n\n### 语法\n```\narrayObject.join(separator)\n```\n\n| 参数 |描述|\n|-|-|-|\n| separator |可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符。|\n\n\n### 返回值\n返回一个字符串。该字符串是通过把 arrayObject 的每个元素转换为字符串，然后把这些字符串连接起来，在两个元素之间插入 separator 字符串而生成的。\n\n##### 例子1.\n在本例中，我们将创建一个数组，然后把它的所有元素放入一个字符串：\n```javascript\n<script type=\"text/javascript\">\n\nvar arr = new Array(3)\narr[0] = \"George\"\narr[1] = \"John\"\narr[2] = \"Thomas\"\n\ndocument.write(arr.join())\n\n</script>\n```\n##### 输出1.\n```\nGeorge,John,Thomas\n```\n##### 例子2.\n在本例中，我们将使用分隔符来分隔数组中的元素：\n```javascript\n<script type=\"text/javascript\">\n\nvar arr = new Array(3)\narr[0] = \"George\"\narr[1] = \"John\"\narr[2] = \"Thomas\"\n\ndocument.write(arr.join(\".\"))\n\n</script>\n```\n##### 输出\n```\nGeorge.John.Thomas\n```', '2018-10-16 16:29:02', 'javascript', 28, 2, 'Tue Oct 16 2018 08:29:04 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('toFixed() 方法 四舍五入指定小数位数', '### split()定义和用法\ntoFixed() 方法可把 Number 四舍五入为指定小数位数的数字。\n\n### 语法\n```\nNumberObject.toFixed(num)\n```\n\n| 参数 |描述|\n|-|-|-|\n| num |	必需。规定小数的位数，是 0 ~ 20 之间的值，包括 0 和 20，有些实现可以支持更大的数值范围。如果省略了该参数，将用 0 代替。|\n\n\n### 返回值\n返回 NumberObject 的字符串表示，不采用指数计数法，小数点后有固定的 num 位数字。如果必要，该数字会被舍入，也可以用 0 补足，以便它达到指定的长度。如果 num 大于 le+21，则该方法只调用 NumberObject.toString()，返回采用指数计数法表示的字符串。\n\n### 抛出\n当 num 太小或太大时抛出异常 RangeError。0 ~ 20 之间的值不会引发该异常。有些实现支持更大范围或更小范围内的值。\n\n当调用该方法的对象不是 Number 时抛出 TypeError 异常。\n\n##### 实例\n在本例中，我们将把数字舍入为仅有一位小数的数字：\n```javascript\nShow the number 13.37 with one decimal:\n<script type=\"text/javascript\">\nvar num = new Number(13.37);\ndocument.write (num.toFixed(1))\n</script>\n```\n##### 输出\n```\nShow the number 13.37 with one decimal:\n13.4\n```', '2018-10-16 16:37:19', 'javascript', 29, 2, 'Tue Oct 16 2018 08:37:21 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('input 输入框输入限制', '### 1. 限制输入空格\n```javascript\nonKeypress=\"javascript:if(event.keyCode == 32)event.returnValue = false;\"\n// 例如\n<input onKeypress=\"javascript:if(event.keyCode == 32)event.returnValue = false;\" id=\"customname\" type=\"text\" placeholder=\"\">\n```', '2018-10-16 19:51:11', 'html', 30, 2, 'Tue Oct 16 2018 11:51:12 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('javascript Math 对象', '### sqrt() 方法\n#### 定义和用法\nsqrt() 方法可返回一个数的平方根。\n\n#### 语法\n```javascript\nMath.sqrt(x)\n```\n|参数|描述|\n|-|-|-|\n|x|必需。必须是大于等于 0 的数|\n#### 返回值\n参数 x 的平方根。如果 x 小于 0，则返回 NaN。\n#### 实例/输出\n```javascript\nvar a=Math.sqrt(0);     //0\nvar b=Math.sqrt(1);     //1\nvar c=Math.sqrt(9);     //3\nvar d=Math.sqrt(0.64);  //0.8\nvar e=Math.sqrt(-9);    //NaN\n```\n#### 输出\n```\n0\n1\n3\n0.8\nNaN\n```\n---\n---\n### floor() 方法\n```\nMath.floor(x)\n```\n#### 返回值\n##### 小于等于 x，且与 x 最接近的整数。\n\n#### 说明\n##### floor() 方法执行的是向下取整计算，它返回的是小于或等于函数参数，并且与之最接近的整数。\n```javascript\n<script type=\"text/javascript\">\ndocument.write(Math.floor(0.60) + \"<br />\") //0\ndocument.write(Math.floor(0.40) + \"<br />\") //0\ndocument.write(Math.floor(5) + \"<br />\")    //5\ndocument.write(Math.floor(5.1) + \"<br />\")  //5\ndocument.write(Math.floor(-5.1) + \"<br />\") //-6\ndocument.write(Math.floor(-5.9))           //-6\n</script>\n```\n---\n---\n\n### Math.pow(x,y)\n```javascript\nMath.pow(4,3);\n返回 4 的 3 次幂 (4*4*4):\n输出结果：\n64\n```\n[Math MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Numbers_and_dates)', '2018-10-17 19:35:47', 'javascript', 32, 2, 'Wed Oct 17 2018 11:35:49 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('slice() 方法--从已有的数组中返回选定的元素', '### JavaScript slice() 方法\nJavaScript Array 对象\n\n#### 定义和用法\nslice() 方法可从已有的数组中返回选定的元素。\n\n#### 语法\n```javascript\narrayObject.slice(start,end)\n```\n|参数|描述|\n|-|-|-|\n|start|必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。|\n|end|可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。|\n\n#### 返回值\n返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。\n\n#### 说明\n请注意，该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。\n\n#### 提示和注释\n注释：您可使用负值从数组的尾部选取元素。\n\n#### 注释：如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。\n\n#### 实例1\n在本例中，我们将创建一个新数组，然后显示从其中选取的元素：\n```javascript\n<script type=\"text/javascript\">\n\nvar arr = new Array(3)\narr[0] = \"George\"\narr[1] = \"John\"\narr[2] = \"Thomas\"\n\ndocument.write(arr + \"<br />\")\ndocument.write(arr.slice(1) + \"<br />\")\ndocument.write(arr)\n\n</script>\n```\n#### 输出：\n```\nGeorge,John,Thomas\nJohn,Thomas\nGeorge,John,Thomas\n```\n#### 实例2\n在本例中，我们将创建一个新数组，然后显示从其中选取的元素：\n```javascript\n<script type=\"text/javascript\">\n\nvar arr = new Array(6)\narr[0] = \"George\"\narr[1] = \"John\"\narr[2] = \"Thomas\"\narr[3] = \"James\"\narr[4] = \"Adrew\"\narr[5] = \"Martin\"\n\ndocument.write(arr + \"<br />\")\ndocument.write(arr.slice(2,4) + \"<br />\")\ndocument.write(arr)\n\n</script>\n```\n#### 输出：\n```\nGeorge,John,Thomas,James,Adrew,Martin\nThomas,James\nGeorge,John,Thomas,James,Adrew,Martin\n```', '2018-10-17 20:45:11', 'javascript', 33, 2, 'Wed Oct 17 2018 12:45:12 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('事件冒泡及捕获', '### 对事件冒泡和捕捉的解释\n```html\n<button>Display video</button>\n\n    <div class=\"hidden\">\n      <video>\n	...\n      </video>\n    </div>\n    <script>\n      var btn = document.querySelector(\'button\');\n      var videoBox = document.querySelector(\'div\');\n      var video = document.querySelector(\'video\');\n      btn.onclick = function() {\n    	videoBox.setAttribute(\'class\',\'showing\');\n      }\n      videoBox.onclick = function() {\n        videoBox.setAttribute(\'class\',\'hidden\');\n      };\n      video.onclick = function() {\n        video.play();\n      };\n    </script>\n```\n#### 当一个事件发生在具有父元素的元素上(例如，在我们的例子中是`<video>`元素)时，现代浏览器运行两个不同的阶段 - 捕获阶段和冒泡阶段。 在捕获阶段：\n\n- ##### 浏览器检查元素的最外层祖先`<html>`，是否在捕获阶段中注册了一个`onclick`事件处理程序，如果是，则运行它。\n- ##### 然后，它移动到`<html>`中的下一个元素，并执行相同的操作，然后是下一个元素，依此类推，直到到达实际点击的元素。\n#### 在冒泡阶段，恰恰相反:\n\n- ##### 浏览器检查实际点击的元素是否在冒泡阶段中注册了一个`onclick`事件处理程序，如果是，则运行它\n- ##### 然后它移动到下一个直接的祖先元素，并做同样的事情，然后是下一个，等等，直到它到达`<html>`元素。\n\n#### 在现代浏览器中，默认情况下，所有事件处理程序都在冒泡阶段进行注册。因此，在我们当前的示例中，当您单击视频时，这个单击事件从`<video>`元素向外冒泡直到`<html>`元素。沿着这个事件冒泡线路：\n- ##### 它发现了`video.onclick...`事件处理器并且运行它，因此这个视频`<video>`第一次开始播放。\n- ##### 接着它发现了（往外冒泡找到的） `videoBox.onclick...`事件处理器并且运行它，因此这个视频`<video>`也隐藏起来了。\n### 用stopPropagation()修复问题\n##### 这是令人讨厌的行为，但有一种方法来解决它！标准事件对象具有可用的名为 `stopPropagation()`的函数, 当在事件对象上调用该函数时，它只会让当前事件处理程序运行，但事件不会在冒泡链上进一步扩大，因此将不会有更多事件处理器被运行(不会向上冒泡)。所以，我们可以通过改变前面代码块中的第二个处理函数来解决当前的问题:\n```javascript\nvideo.onclick = function(e) {\n  e.stopPropagation();\n  video.play();\n};\n```\n### 事件委托\n[事件委托](https://www.cnblogs.com/liugang-vip/p/5616484.html)', '2018-10-18 20:34:17', 'javascript', 34, 2, 'Thu Oct 18 2018 12:34:19 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('HTML DOM setAttribute() 方法', '#### 定义和用法\n- ##### setAttribute() 方法添加指定的属性，并为其赋指定的值。\n\n- ##### 如果这个指定的属性已存在，则仅设置/更改值。\n#### 语法\n```javascript\nelement.setAttribute(attributename,attributevalue)\n// 参数都是必须的\n// attributename 属性名称\n// attributevalue 属性值\n```\n##### getAttritute\n- 获取对象属性值\n```javascript\nelement.getAttribute(attributename)\n```', '2018-10-19 16:19:16', 'html', 35, 2, 'Fri Oct 19 2018 08:19:17 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('添加web icon--标签图标', '### 将`xxx.ico`的图标文件放到static文件夹内，在index.html的`head`中添加：\n\n```\n<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"static/xxx.ico\">\n```', '2018-10-19 16:33:35', 'html', 36, 2, 'Fri Oct 19 2018 08:33:36 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('对象prototype  and  __proto__', '### prototype 属性：继承成员被定义的地方\n-  ##### 重要：`prototype` 属性大概是 JavaScript 中最容易混淆的名称之一。你可能会认为，this 关键字指向当前对象的原型对象，其实不是（还记得么？原型对象是一个内部对象，应当使用` __proto__ `访问）。prototype 属性包含（指向）一个对象，你在这个对象中定义需要被继承的成员。\n\n### 在已有的 JavaScript 的末尾添加如下代码，这段代码将为构造器的 prototype 属性添加一个新的方法：\n```javascript\nfunction Person(){...}\nvar person1 = new Person()\nPerson.prototype.farewell = function() {\n  alert(this.name.first + \' has left the building. Bye for now!\');\n}\nperson1.farewell() //可以使用\n// 调整添加方法和新建person1实例操作的顺序，仍然可以使用新方法\n```\n#### 以此说明这种继承模型下，上游对象的方法不会复制到下游的对象实例中；下游对象本身虽然没有定义这些方法，但浏览器会通过上溯原型链、从上游对象中找到它们。这种继承模型提供了一个强大而可扩展的功能系统。', '2018-10-19 21:08:54', 'javascript', 37, 2, 'Fri Oct 19 2018 13:08:55 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('对象 constructor 属性', '#### 每个实例对象都从原型中继承了一个constructor属性，该属性指向了用于构造此实例对象的构造函数。\n#### 一个小技巧是，你可以在 constructor 属性的末尾添加一对圆括号（括号中包含所需的参数），从而用这个构造器创建另一个对象实例。毕竟构造器是一个函数，故可以通过圆括号调用；只需在前面添加 new 关键字，便能将此函数作为构造器使用。\n```\nfunction Person(x,y,z){...}\nvar person1 = new Person(x,y,z)\nperson1.constructor\n//都将返回 Person() 构造器，因为该构造器包含这些实例的原始定义。\n//返回如下\nf Person(x,y,z){...}\n```', '2018-10-19 21:41:48', 'javascript', 38, 2, 'Fri Oct 19 2018 13:41:49 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('requestAnimationFrame动画流畅性', '- ### 使用 `requestAnimationFrame() `方法再运行一次函数 —— 当一个函数正在运行时传递相同的函数名，从而每隔一小段时间都会运行一次这个函数，这样我们可以得到一个平滑的动画效果。这主要是通过递归完成的 —— 也就是说函数每次运行的时候都会调用自己，从而可以一遍又一遍得运行。', '2018-10-22 15:51:05', 'html', 39, 2, 'Mon Oct 22 2018 07:51:06 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('JSON.parse() and .stringify() json和jsonstring转换', '```javascript\nvar json = \'{\"result\":true, \"count\":42}\';\njson\n\"{\"result\":true, \"count\":42}\"\n\nvar obj = JSON.parse(json)\nobj\n{result: true, count: 42}\n\nobj = JSON.stringify(obj)\nobj\n\"{\"result\":true,\"count\":42}\"\n```', '2018-10-23 19:48:03', 'javascript', 40, 2, 'Tue Oct 23 2018 11:48:05 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('浏览器 API', '- #### window是载入浏览器的标签，在JavaScript中用[Window](Window)对象来表示，使用这个对象的可用方法，你可以返回窗口的大小（参见Window.innerWidth和Window.innerHeight），操作载入窗口的文档，存储客户端上文档的特殊数据（例如使用本地数据库或其他存储设备），为当前窗口绑定event handler，等等。\n- #### navigator表示浏览器存在于web上的状态和标识（即用户代理）。在JavaScript中，用[Navigator](Navigator)来表示。你可以用这个对象获取一些信息，比如来自用户摄像头的地理信息、用户偏爱的语言、多媒体流等等。\n- #### document（在浏览器中用DOM表示）是载入窗口的实际页面，在JavaScript中用[Document](Document) 对象表示，你可以用这个对象来返回和操作文档中HTML和CSS上的信息。例如获取DOM中一个元素的引用，修改其文本内容，并应用新的样式，创建新的元素并添加为当前元素的子元素，甚至把他们一起删除。', '2018-10-23 20:10:49', 'html', 41, 2, 'Tue Oct 23 2018 12:10:51 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('let var const 定义的区别', '- ####   var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。\n- ####   let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。\n- ####   const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。\n\n\n### MDN介绍\nJavaScript有三种声明方式。\n\n- ```var```\n 声明一个变量，可赋一个初始化值。\n- ```let```\n声明一个块作用域的局部变量，可赋一个初始化值。\n- ```const```\n声明一个块作用域的只读的命名常量。', '2018-10-25 20:44:16', 'javascript', 42, 2, 'Thu Oct 25 2018 12:44:18 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('defer 延迟脚本运行', '- #### 在完成版本的源代码中， ```<script src=\"index.js\" defer></script>``` 一行里， ```defer``` 属性指明在页面加载完成之前，```<script>```元素的内容不会执行。', '2018-10-25 21:08:44', 'javascript', 43, 2, 'Thu Oct 25 2018 13:08:46 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('undefined  NaN  null', '### 用 ```var``` 或 ```let``` 语句声明的变量，如果没有赋初始值，则其值为 ```undefined```。\n### 可以使用 ```undefined``` 来判断变量是否已赋值。以下的代码中，变量```input```未被赋值，因而```if```条件语句的求值结果是```true```。\n```javascript\nvar input;\nif(input === undefined){\n  doThis();\n} else {\n  doThat();\n}\n```\n### ```undefined``` 值在布尔类型环境中会被当作 ```false```。例如，下面的代码将会执行函数 ```myFunction```，因为数组```myArray```中的元素未被赋值：\n\n```javascript\nvar myArray = [];\n\nif (!myArray[0]) {\n  myFunction(); \n}\n```\n### 数值类型环境中 ```undefined``` 值会被转换为 ```NaN```。\n```javascript\nvar a;\n// 计算为 NaN\na + 2;\n```\n### 当你对一个 ```null``` 变量求值时，空值 ```null ```在数值类型环境中会被当作```0```来对待，而布尔类型环境中会被当作 ```false```。例如：\n```javascript\nvar n = null;\ntypeof(n);\n// \"object\"\n// The Null type has exactly one value, called null.\nconsole.log(n * 32); // 0\n```\n', '2018-10-27 14:10:09', 'javascript', 44, 2, 'Sat Oct 27 2018 06:10:11 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('函数声明 AND 函数表达式', '#### /* 函数声明 */\n```javascript\nfoo(); // \"bar\"\n\nfunction foo() {\n  console.log(\"bar\");\n}\n```\n\n#### /* 函数表达式 */\n```javascript\nbaz(); // TypeError: baz is not a function\n\nvar baz = function() {\n  console.log(\"bar2\");\n};\n```\n> #### 函数提升（Function hoisting）\n> ##### 对于函数，只有函数声明会被提升到顶部，而不包括函数表达式。', '2018-10-27 14:20:28', 'javascript', 45, 2, 'Sat Oct 27 2018 06:20:29 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('字符串转换为数字', '有一些方法可以将内存中表示一个数字的字符串转换为对应的数字\n\nparseInt()和parseFloat()\n参见：parseInt()和parseFloat()的相关页面。\n\nparseInt 仅能够返回整数，所以使用它会丢失小数部分。另外，调用 parseInt 时最好总是带上进制(radix) 参数，这个参数用于指定使用哪一种进制。\n\n单目加法运算符\n将字符串转换为数字的另一种方法是使用单目加法运算符。\n> \"1.1\" + \"1.1\" = \"1.11.1\"\n(+\"1.1\") + (+\"1.1\") = 2.2   // 注：加入括号为清楚起见，不是必需的\n', '2018-10-28 11:41:14', 'javascript', 46, 2, 'Sun Oct 28 2018 03:41:16 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('2 8 10 16进制数', '- ##### 十进制整数字面量由一串数字序列组成，且没有前缀0。\n- ##### 八进制的整数以 0（或0O、0o）开头，只能包括数字0-7。\n- ##### 十六进制整数以0x（或0X）开头，可以包含数字（0-9）和字母 a~f 或 A~F。\n- ##### 二进制整数以0b（或0B）开头，只能包含数字0和1。\n\n严格模式下，八进制整数字面量必须以0o或0O开头，而不能以0开头。\n\n整数字面量举例：\n\n> #### 0, 117 and -345 (十进制, 基数为10)\n>#### 015, 0001 and -0o77 (八进制, 基数为8) \n>#### 0x1123, 0x00111 and -0xF1A7 (十六进制, 基 数为16或\"hex\")\n>#### 0b11, 0b0011 and -0b11 (二进制, 基数为2)', '2018-10-28 11:44:43', 'javascript', 47, 2, 'Sun Oct 28 2018 03:44:44 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('三元运算符', '### 语法：条件?代码块1：代码块2\n\n#### 如果条件为真则执行代码块1，反之执行代码块2.\n\n##### 例如：\n```javascript\n var test = 1>3?1:3;\n console.log (test); 结果 为3.\n```\n#### 使用三元运算符判断三个数中最大的数：\n\n##### 例如：\n\n```javascript\n <script type=\"text/javascript\">\n     var a = +prompt(\"请输入第一个数\");\n     var b = +prompt(\"请输入第二个数\");\n     var c = +prompt(\"请输入第三个数\");\n     var max = a > b ? a : b;\n     max = max > c ? max : c;\n     alert(max);\n </script>\n```\n\n```javascript\nvar func1 = function( .. ) {\n  if (condition1) { return value1 }\n  else if (condition2) { return value2 }\n  else if (condition3) { return value3 }\n  else { return value4 }\n}\n\nvar func2 = function( .. ) {\n  return condition1 ? value1\n       : condition2 ? value2\n       : condition3 ? value3\n       :              value4\n}\n```\n', '2018-10-28 12:16:03', 'javascript', 48, 2, 'Sun Oct 28 2018 04:16:04 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('js回调函数—例子', '#### 初学js的时候，被回调函数搞得很晕，现在回过头来总结一下什么是回调函数。\n\n#### 　　我们先来看看回调的英文定义：A callback is a function that is passed as an argument to another function and is executed after its parent function has completed。\n\n#### 　　字面上的理解，回调函数就是一个参数，将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数。这个过程就叫做回调。\n\n#### 　　其实也很好理解对吧，回调，回调，就是回头调用的意思。主函数的事先干完，回头再调用传进来的那个函数。但是以前看过很多博客，他们总是将回调函数解释的云里雾里，很高深的样子。\n\n#### 　　举一个别人举过的例子：约会结束后你送你女朋友回家，离别时，你肯定会说：“到家了给我发条信息，我很担心你。” 对不，然后你女朋友回家以后还真给你发了条信息。小伙子，你有戏了。其实这就是一个回调的过程。你留了个参数函数（要求女朋友给你发条信息）给你女朋友，然后你女朋友回家，回家的动作是主函数。她必须先回到家以后，主函数执行完了，再执行传进去的函数，然后你就收到一条信息了。\n\n#### 　　现在基本理解回调函数的意思了吧。不理解的话没关系，我们用代码说话。\n\n```javascript\n//定义主函数，回调函数作为参数\nfunction A(callback) {\n    callback();  \n    console.log(\'我是主函数\');      \n}\n\n//定义回调函数\nfunction B(){\n    setTimeout(\"console.log(\'我是回调函数\')\", 3000);//模仿耗时操作  \n}\n\n//调用主函数，将函数B传进去\nA(B);\n\n//输出结果\n我是主函数\n我是回调函数\n```\n##### 上面的代码中，我们先定义了主函数和回调函数，然后再去调用主函数，将回调函数传进去。\n\n##### 　　定义主函数的时候，我们让代码先去执行callback()回调函数，但输出结果却是后输出回调函数的内容。这就说明了主函数不用等待回调函数执行完，可以接着执行自己的代码。所以一般回调函数都用在耗时操作上面。比如ajax请求，比如处理文件等。', '2018-10-28 19:34:33', 'javascript', 49, 2, 'Sun Oct 28 2018 11:34:34 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('display 显示或隐藏标签', '```JavaScript``` 语法：	\n```javascipt\nobject.style.display=\"inline\"\n```\n|none|此元素不会被显示。|\n|-|-|-|\n|block|此元素将显示为块级元素，此元素前后会带有换行符。|\n|inline|默认。此元素会被显示为内联元素，元素前后没有换行符。|\n', '2018-10-28 21:10:27', 'css', 50, 2, 'Sun Oct 28 2018 13:10:28 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('函数提升(函数声明，函数表达式)', '#### 函数一定要处于调用它们的域中，但是函数的声明可以被提升(出现在调用语句之后)，如下例：\n```javascript\nconsole.log(square(5));\nfunction square(n) { return n*n }\n```\n#### 函数域是指函数声明时的所在的地方，或者函数在顶层被声明时指整个程序。\n\n>提示：注意只有使用如上的语法形式（即 ```function funcName(){}```）才可以。而下面的代码是无效的。就是说，函数提升仅适用于函数声明，而不适用于函数表达式。\n```javascript\nconsole.log(square); // square is hoisted with an initial value undefined.\nconsole.log(square(5)); // TypeError: square is not a function\nvar square = function (n) { \n  return n * n; \n}\n```', '2018-10-28 21:14:24', 'javascript', 51, 2, 'Sun Oct 28 2018 13:14:26 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('事先不知道参数数量时使用 arguments 对象', '```javascript\nfunction myConcat(separator) {\n   var result = \'\'; // 把值初始化成一个字符串，这样就可以用来保存字符串了！！\n   var i;\n   // iterate through arguments\n   for (i = 1; i < arguments.length; i++) {\n      result += arguments[i] + separator;\n	console.log(result);\n	console.log(separator);\n   }\n   return result;\n}\n```\n\n```javascript\nmyConcat(\", \", \"red\", \"orange\", \"blue\");\n/* return \nred, \n, \nred, orange, \n, \nred, orange, blue, \n, \n*/\n```\n#### 因为arguments是一个类数组对象，缺少很对数组Array会有的方法，当有需要时，可以使用如下代码，```Array.prototype.slice.call(arguments)```，让arguments具有数组的slice方法\n#### 例子\n>题目描述\n实现函数 callIt，调用之后满足如下条件\n1、返回的结果为调用 fn 之后的结果\n2、fn 的调用参数为 callIt 的第一个参数之后的全部参数\n```javascript\nfunction callIt(fn){\n     var args = Array.prototype.slice.call(arguments,1)\n     var result = fn.apply(this,args)\n     return result\n}\n```', '2018-10-29 10:44:04', 'javascript', 52, 2, 'Mon Oct 29 2018 02:44:05 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('默认参数 and 剩余参数', '- ### 默认参数\n#### 在JavaScript中，函数参数的默认值是```undefined```。然而，在某些情况下设置不同的默认值是有用的。这时默认参数可以提供帮助。\n\n#### 在过去，用于设定默认的一般策略是在函数的主体测试参数值是否为```undefined```，如果是则赋予一个值。如果在下面的例子中，调用函数时没有实参传递给```b```，那么它的值就是```undefined```，于是计算```a*b```得到、函数返回的是 ```NaN```：\n```javascript\nfunction multiply(a, b) {\n  b = (typeof b !== \'undefined\') ?  b : 1;\n  return a*b;\n}\n\nmultiply(5); // 5\n```\n#### 使用默认参数，在函数体的检查就不再需要了。现在，你可以在函数头简单地把1设定为b的默认值：\n```javascript\nfunction multiply(a, b = 1) {\n  return a*b;\n}\n\nmultiply(5); // 5\n```\n\n- ### 剩余参数\n#### 剩余参数语法允许将不确定数量的参数表示为数组。在下面的例子中，使用剩余参数收集从第二个到最后参数。然后，我们将这个数组的每一个数与第一个参数相乘。这个例子是使用了一个箭头函数。\n```javascript\nfunction multiply(multiplier, ...theArgs) {\n  return theArgs.map(x => multiplier * x);\n}\n\nvar arr = multiply(2, 1, 2, 3);\nconsole.log(arr); // [2, 4, 6]\n```', '2018-10-29 10:56:51', 'javascript', 53, 2, 'Mon Oct 29 2018 02:56:53 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('sort()函数 排序', '```javascript\nvar arr = [10,20,1,2];\n		arr.sort((x,y)=>{\n			return x - y;\n		})\n		console.log(arr);\n// [1, 2, 10, 20]\n```\n##### 如果调用该方法时没有使用参数，将按字母顺序对数组中的元素进行排序，说得更精确点，是按照字符编码的顺序进行排序。要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以便进行比较。\n\n##### 如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：\n\n- 若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。\n- 若 a 等于 b，则返回 0。\n- 若 a 大于 b，则返回一个大于 0 的值。\n```javascript\nvar arr = new Array(6)\narr[0] = \"George\"\narr[1] = \"John\"\narr[2] = \"Thomas\"\narr[3] = \"James\"\narr[4] = \"Adrew\"\narr[5] = \"Martin\"\n\ndocument.write(arr + \"<br />\")\ndocument.write(arr.sort())\n\n//George,John,Thomas,James,Adrew,Martin\n//Adrew,George,James,John,Martin,Thomas\n```\n#### .reverse() 反过来\n```javascript\nvar a = [3,1,2]\nundefined\nvar b = a.sort()\nundefined\nb\n(3) [1, 2, 3]\nvar c = b.reverse\nundefined\nc\nƒ reverse() { [native code] }\nvar c = b.reverse()\nundefined\nc\n(3) [3, 2, 1]\n```\n# 拓展\n```javascript\nvar nums = [4, 3, 2, 7, 8, 2, 3, 1, 0]\nfor(var i = 0; i < nums.length;) {\n        while(nums[nums[i]] != nums[i]) {\n            t = nums[nums[i]];\n            nums[nums[i]] = nums[i];\n            nums[i] = t;\n        }\n        i++;\n    }\n//nums=[0, 1, 2, 3, 4, 2, 3, 7, 8]\n```\n>只针对从0开始结束为数组长度当数组\n\n```javascript\n<script>\n\n    var arr = [23,12,1,34,116,8,18,37,56,50];\n    function sequence(a,b){\n        if (a>b) {\n            return 1;\n        }else if(a<b){\n            return -1\n        }else{\n            return 0;\n        }\n    }\n    console.log(arr.sort(sequence));\n    \n</script>\n```', '2018-10-29 12:53:57', 'javascript', 54, 2, 'Mon Oct 29 2018 04:53:58 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('vue项目发布服务器后页面刷新报错', '在首页刷新没有任何问题\n当进入子路由后，页面刷新报错\n```javascript\nUncaught SyntaxError: Unexpected token <\n```\n项目打包的时候```config/index.js```\n```javascript\nbuild: {\n    // Template for index.html\n    index: path.resolve(__dirname, \'../dist/index.html\'),\n\n    // Paths\n    assetsRoot: path.resolve(__dirname, \'../dist\'),\n    assetsSubDirectory: \'static\',\n\n    assetsPublicPath: \'/\',//重要\n\n    /**\n     * Source Maps\n     */\n\n    productionSourceMap: true,\n\n    devtool: \'#source-map\',\n\n    productionGzip: false,\n    productionGzipExtensions: [\'js\', \'css\'],\n    bundleAnalyzerReport: process.env.npm_config_report\n  }\n```', '2018-10-31 17:14:18', 'vue', 67, 2, 'Wed Oct 31 2018 09:14:18 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('vue项目发布服务器刷新页面404', '我使用当是```nginx```代理\n因为我在```vue-router```的特性，我也是使用了```history```模式，所以在```nginx```中需要做相关配置\n```nginx\nhttp{\n	server{\n		...\n	location /{\n		 ...\n		 try_files $uri $uri/ /index.html\n		}\n	}\n}\n```\n使用```nginx```，刷新```404```，在```nginx```捕获，返回到 ```index.html``` 页面，这个页面就是你 app 依赖的页面。\n这里必须注意，```nginx``的配置与前端代码中静态资源打包方式有关联。详细见[vue打包发布注意事项](http://139.199.206.151:7070/detailed/67)', '2018-10-31 17:21:36', 'vue', 68, 2, 'Wed Oct 31 2018 09:21:36 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('eval() 计算字符串并执行其中的JavaScript 代码', '\n- #### 该方法只接受原始字符串作为参数，如果 string 参数不是原始字符串，那么该方法将不作任何改变地返回。因此请不要为 eval() 函数传递 String 对象来作为参数。\n\n- #### 如果试图覆盖 eval 属性或把 eval() 方法赋予另一个属性，并通过该属性调用它，则 ECMAScript 实现允许抛出一个 EvalError 异常。\n\n## 抛出\n- #### 如果参数中没有合法的表达式和语句，则抛出 SyntaxError 异常。\n\n- #### 如果非法调用 eval()，则抛出 EvalError 异常。\n\n- #### 如果传递给 eval() 的 Javascript 代码生成了一个异常，eval() 将把该异常传递给调用者。\n```javascript\n<script type=\"text/javascript\">\n\neval(\"x=10;y=20;document.write(x*y)\")\n//200\ndocument.write(eval(\"2+2\"))\n//4\nvar x=10\ndocument.write(eval(x+17))\n//27\n</script>\n```\n\n## 可以使用下面这段代码来检测 eval() 的参数是否合法：\n```javascript\ntry  {\n     alert(\"Result:\" + eval(prompt(\"Enter an expression:\",\"\")));\n     }\n\ncatch(exception) {\n     alert(exception);\n     }\n```', '2018-11-01 19:03:18', 'javascript', 69, 2, 'Thu Nov 01 2018 11:03:18 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('多行模版字符串', '### 多行\n```javascript\nconsole.log(\"string text line 1\\n\\\nstring text line 2\");\n// \"string text line 1\n// string text line 2\"\n```\n\n```javascript\nconsole.log(`string text line 1\nstring text line 2`);\n// \"string text line 1\n// string text line 2\"\n```\n### 嵌入表达式\n```javascript\nvar a = 5;\nvar b = 10;\nconsole.log(\"Fifteen is \" + (a + b) + \" and\\nnot \" + (2 * a + b) + \".\");\n// \"Fifteen is 15 and\n// not 20.\"\n```\n\n```javascript\nvar a = 5;\nvar b = 10;\nconsole.log(`Fifteen is ${a + b} and\\nnot ${2 * a + b}.`);\n// \"Fifteen is 15 and\n// not 20.\"\n```', '2018-11-01 19:14:03', 'javascript', 70, 2, 'Thu Nov 01 2018 11:14:03 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('for in   for of 循环遍历', '#### for in遍历的是数组的索引（即键名），而for of遍历的是数组元素值。', '2018-11-01 20:49:47', 'javascript', 71, 2, 'Thu Nov 01 2018 12:49:47 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('Map,Object,Set,Array带键的集合', '- ### Map [直通车](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Map)\n>Map的键可以是任意类型，而Object只能是字符串\n```javascript\n//基础操作\nvar a = new Map();\na.set(\'dog\',\'wangwang\')\n//Map(1) {\"dog\" => \"woof\"}\na.get(\'dog\')   a.get(\'wangwang\')\n//wangwang     undefined\na.has(\'dog\')   a.has(\'wangwang\')   a.has(\'cat\')\n//true         false               false\nfor (var [key,value] of a){console.log(key+\":\"+value)}\n//dog:wangwang\na.forEach(function (item) {\n     console.log(item.toString());\n});\n//wangwang\na.forEach(function (value, key, map) {\n    console.log(value)\n })\n//wangwang\na.size\n//1\na.delete(\'dog\')\n//删除键值为dog的value\na.clear()\n//删除全部\n```\n- ### Set [直通车](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set)\n> Set对象允许根据值删除元素，而数组中必须使用基于下标的 splice 方法。\nSet对象存储不重复的值，所以不需要手动处理包含重复值的情况。\n```javascript\nvar mySet = new Set();\nmySet.add(1);\nmySet.add(\"some text\");\nmySet.add(\"foo\");\n\nmySet.has(1); // true\nmySet.delete(\"foo\");\nmySet.size; // 2\n\nfor (let item of mySet) console.log(item);\n// 1\n// \"some text\"\n```\n- ### 数组和集合转换\n```javascript\nvar a = new Set();\nvar c = Array.from(a)\n//a转换为Array数组,即为c\nvar b = Set(c)\n//c转换为Set集合，即为b\n```\n- ### Object\n', '2018-11-01 22:38:27', 'javascript', 72, 2, 'Thu Nov 01 2018 14:38:28 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('Object.prototype 原型和原型链', '- [Object.prototype](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype)\n- [Object.prototype](https://www.cnblogs.com/Nancy-wang/p/6903221.html?utm_source=itdadao&utm_medium=referral)\n- [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Details_of_the_Object_Model)\n\n> 继承后从子类一路往上找\n\n\n## 原型\n#### ```Javascript```中所有的对象都是```Object```的实例，并继承```Object.prototype```的属性和方法，有些属性是隐藏的。换句话说，在对象创建时会存在预定义的属性，其中有一个属性就是原型对象。在函数对象中存在原型对象```prototype```，在普通对象中没有```prototype```，但存在```__proto__```。或者说使用```function```定义的对象与使用```new```操作符生成的对象之间有一个重要的区别，这个区别就是```function```定义的对象有一个```prototype```属性，使用```new```生成的对象就没有这个```prototype```属性，存在```__proto__```。\n```javascript\nvar o =new Object();    \nconsole.log(o.__proto__);\nconsole.log(o.prototype);//undefined\n\nvar fn = function(){} \nconsole.log(fn.prototype);//Object {constructor: function}\nvar f1 = new fn();\nconsole.log(f1.__proto__);\nconsole.log(f1.__proto__===fn.prototype);//true\n```\n\n## 原型链\n#### 那么```__proto__```是什么？每个对象都会在其内部初始化一个属性，就是```__proto__```。普通对象中的```__proto__```是什么呢？ ```Object```的本质函数对象，是通过```new Function()```创建，所以```Object.__proto__```指向```Function.prototype```。同理，```Function```也是函数对象，因此```Function.__proto__```同样指向```Function.prototype```。 ```Object.prototype```对象也有```__proto__```属性，但它比较特殊，为```null```。这个由```__proto__```串起来的直到```Object.prototype.__proto__```为```null```的链就是原型链。\n\n```javascript\nconsole.log(Object.__proto__ === Function.prototype);//true\nconsole.log(Function.__proto__===Function.prototype);//true\nconsole.log(Object.prototype.__proto__);//null\n```\n\n#### 当我们访问一个对象的属性 时，如果这个对象内部不存在这个属性，那么他就会去__proto__里找这个属性，这个__proto__又会有自己的__proto__，于是就这样 一直找下去，也就是我们平时所说的原型链的概念。参考下面的例子：\n```javascript\nvar Fn = function(){};\nFn.prototype.Hello = function(){\n        console.log(\"Hello World\");\n    }\nvar f1 = new Fn();\nf1.Hello();//Hello World\n```\n#### 首先```var f1=new fn()```,```f1```是```Fn```的实例，可以得出```f1.__proto__=Fn.prototype```。当我们调用```f1.hello()```时，首先```f1```中没有```Hello```这个属性，于是，它会到他的```__proto__```中去找，也就是```Fn.prototype```，而我们在上面定义了 ```Fn.prototype.Hello=function(){}; ```于是，就找到了对应的方法。\n\n\n#### 从一个更复杂的例子中看原型链的原理：\n```javascript\nvar Person = function() {};\nPerson.prototype.Name = function() {\n    console.log(\"person name\");\n}\nPerson.prototype.Sex = \"male or female\";\n\nvar Younger = function() {};\nYounger.prototype = new Person();\nYounger.prototype.Age = function() {\n    console.log(\"14-28\")\n};\nYounger.prototype.Sex = \"female\";\n\nvar Ann = new Younger();\nAnn.Name(); //person name\nconsole.log(Ann.Age()); //14-28\nconsole.log(Ann.Sex); //female\n```\n\n#### 对上述代码，我们可以进行如下分析：\n```javascript\nvar Younger = function() {}===>：Younger.__proto__=Person.prototype,\nYounger.prototype = new Person()===>:Younger.prototype.__proto__ = Person.prototype,\nvar Ann = new Younger()===>Ann.__proto__=Younger.prototype,\n综上可得：\nAnn.__proto__.__proto__ = Person.prototype\n\nAnn本身没有Name()方法，于是从Ann.__proto__(Younger.prototype)中找,仍没有找到于是在向上一层Ann.__proto__.__proto__(Person.prototype)中寻找，最终在Person.prototype中找到对应的方法并调用。\n同理，Ann本身并没有Age()方法，但在Ann.__proto__(Younger.prototype)存在。\n对于Ann.Sex,在Ann.__proto__(Younger.prototype)中已经能够找到，便不再向上寻找，因此输出是female。\n```\n\n\n### 小例子\n```javascript\nvar Person = function(name) {\n  this.name = name;\n  this.canTalk = true;\n};\n\nPerson.prototype.greet = function() {\n  if (this.canTalk) {\n    console.log(\'Hi, I am \' + this.name);\n  }\n};\n\nvar Employee = function(name, title) {\n  Person.call(this, name);\n  this.title = title;\n};\n\nEmployee.prototype = Object.create(Person.prototype);\n\nEmployee.prototype.greet = function() {\n  if (this.canTalk) {\n    console.log(\'Hi, I am \' + this.name + \', the \' + this.title);\n  }\n};\n\nvar Customer = function(name) {\n  Person.call(this, name);\n};\n\nCustomer.prototype = Object.create(Person.prototype);\n\nvar Mime = function(name) {\n  Person.call(this, name);\n  this.canTalk = false;\n};\n\nMime.prototype = Object.create(Person.prototype);\n\nvar bob = new Employee(\'Bob\', \'Builder\');\nvar joe = new Customer(\'Joe\');\nvar rg = new Employee(\'Red Green\', \'Handyman\');\nvar mike = new Customer(\'Mike\');\nvar mime = new Mime(\'Mime\');\n\nbob.greet();\n// Hi, I am Bob, the Builder\n\njoe.greet();\n// Hi, I am Joe\n\nrg.greet();\n// Hi, I am Red Green, the Handyman\n\nmike.greet();\n// Hi, I am Mike\n\nmime.greet();\n```', '2018-11-03 00:57:34', 'javascript', 73, 2, 'Fri Nov 02 2018 16:57:34 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('Object.create()', '### 使用Object.create()是将对象继承到__proto__属性上\n```javascript\nvar test = Object.create({x:123,y:345});\nconsole.log(test);//{}\nconsole.log(test.x);//123\nconsole.log(test.__proto__.x);//3\nconsole.log(test.__proto__.x === test.x);//true\n\nvar test1 = new Object({x:123,y:345});\nconsole.log(test1);//{x:123,y:345}\nconsole.log(test1.x);//123\nconsole.log(test1.__proto__.x);//undefined\nconsole.log(test1.__proto__.x === test1.x);//false\n\nvar test2 = {x:123,y:345};\nconsole.log(test2);//{x:123,y:345};\nconsole.log(test2.x);//123\nconsole.log(test2.__proto__.x);//undefined\nconsole.log(test2.__proto__.x === test2.x);//false\n```', '2018-11-03 10:41:13', 'javascript', 75, 2, 'Sat Nov 03 2018 02:41:13 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('事件委托，优化性能', '### 1.全部相同功能的点击的例子 \n#### html\n```html\n<ul id=\"ul1\">\n    <li>111</li>\n    <li>222</li>\n    <li>333</li>\n    <li>444</li>\n</ul>\n```\n#### 功能实现\n```javascript\nwindow.onload = function(){\n    var oUl = document.getElementById(\"ul1\");\n    var aLi = oUl.getElementsByTagName(\'li\');\n    for(var i=0;i<aLi.length;i++){\n        aLi[i].onclick = function(){\n            alert(123);\n        }\n    }\n}\n```\n#### 使用事件委托\n```javascript\nwindow.onload = function(){\n    var oUl = document.getElementById(\"ul1\");\n   oUl.onclick = function(){\n        alert(123);\n    }\n}\n```\n### 2.不同功能的点击的例子 \n#### html\n```html\n<div id=\"box\">\n        <input type=\"button\" id=\"add\" value=\"添加\" />\n        <input type=\"button\" id=\"remove\" value=\"删除\" />\n        <input type=\"button\" id=\"move\" value=\"移动\" />\n        <input type=\"button\" id=\"select\" value=\"选择\" />\n    </div>\n```\n#### 功能实现\n```javascript\nwindow.onload = function(){\n            var Add = document.getElementById(\"add\");\n            var Remove = document.getElementById(\"remove\");\n            var Move = document.getElementById(\"move\");\n            var Select = document.getElementById(\"select\");\n            \n            Add.onclick = function(){\n                alert(\'添加\');\n            };\n            Remove.onclick = function(){\n                alert(\'删除\');\n            };\n            Move.onclick = function(){\n                alert(\'移动\');\n            };\n            Select.onclick = function(){\n                alert(\'选择\');\n            }\n            \n        }\n```\n#### 使用事件委托\n```javascript\nwindow.onload = function(){\n            var oBox = document.getElementById(\"box\");\n            oBox.onclick = function (ev) {\n                var ev = ev || window.event;\n                var target = ev.target || ev.srcElement;\n                if(target.nodeName.toLocaleLowerCase() == \'input\'){\n                    switch(target.id){\n                        case \'add\' :\n                            alert(\'添加\');\n                            break;\n                        case \'remove\' :\n                            alert(\'删除\');\n                            break;\n                        case \'move\' :\n                            alert(\'移动\');\n                            break;\n                        case \'select\' :\n                            alert(\'选择\');\n                            break;\n                    }\n                }\n            }\n            \n        }\n```\n[直通车](https://www.cnblogs.com/liugang-vip/p/5616484.html)', '2018-11-03 10:51:34', 'javascript', 76, 2, 'Sat Nov 03 2018 02:51:34 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('match() 查询某指定字符串', '### 在字符串中查找 \"ain\":\n```javascript\nvar str=\"The rain in SPAIN stays mainly in the plain\"; \nvar n=str.match(/ain/g);\n//   /g表示全局\n```\n### n 输出数组结果值:\n```\nain,ain,ain\n```\n### 全局查找字符串 \"ain\"，且不区分大小写:\n```javascript\nvar str=\"The rain in SPAIN stays mainly in the plain\"; \nvar n=str.match(/ain/gi);\n```\n### n 输出结果:\n```\nain,AIN,ain,ain\n```', '2018-11-04 19:48:27', 'javascript', 77, 2, 'Sun Nov 04 2018 11:48:27 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('箭头函数', '```javascript\nvar arr = [10,20,1,2];\n		arr.sort((x,y)=>{\n			return x - y;\n		})\n		console.log(arr);\n```\n```javascript\nvar arr = [10,20,1,2];\n		arr.sort(function(x,y){\n			return x - y;\n		})\n		console.log(arr);\n```\n### 以上两段代码相同', '2018-11-05 09:10:23', 'javascript', 78, 2, 'Mon Nov 05 2018 01:10:23 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('Promise    异步', '- [Promise](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000)\n- [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n- [简单粗暴的讲解](https://www.cnblogs.com/lvdabao/p/es6-promise-1.html)\n```javascript\nnew Promise(function (resolve, reject) {\n    console.log(\'start new Promise...\');\n    var timeOut = Math.random() * 2;\n    console.log(\'set timeout to: \' + timeOut + \' seconds.\');\n    setTimeout(function () {\n        if (timeOut < 1) {\n            console.log(\'call resolve()...\');\n            resolve(\'200 OK\');\n        }\n        else {\n            console.log(\'call reject()...\');\n            reject(\'timeout in \' + timeOut + \' seconds.\');\n        }\n    }, timeOut * 1000);\n}).then(function (r) {\n    console.log(\'Done: \' + r);\n}).catch(function (reason) {\n    console.log(\'Failed: \' + reason);\n});\n```\n> 个人理解，方法开始运行，先打印==start new Promise...==，随后计算出```timeOut```值，打印==set timeout to: \' + timeOut + \' seconds.==，执行```setTimeout```内方法，当执行正确时调用```resolve```，否则调用```reject```\n\n>语法\n```new Promise( function(resolve, reject) {...} /* executor */  );```\n参数\n```executor```\n```executor```是带有 ```resolve``` 和 ```reject``` 两个参数的函数 。```Promise```构造函数执行时立即调用```executor``` 函数， ```resolve``` 和 ```reject``` 两个函数作为参数传递给```executor```（```executor``` 函数在```Promise```构造函数返回新建对象前被调用）。```resolve``` 和 ```reject``` 函数被调用时，分别将```promise```的状态改为```fulfilled（完成）```或```rejected（失败）```。```executor``` 内部通常会执行一些异步操作，一旦完成，可以调用```resolve```函数来将```promise```状态改成```fulfilled```，或者在发生错误时将它的状态改为```rejected```。\n如果在```executor```函数中抛出一个错误，那么该```promise``` 状态为```rejected```。```executor```函数的返回值被忽略。\n# ```reject```将会在```catch```中被获取\n#### 例子\n```javascript\nfunction ajax(method, url, data) {\n        var request = new XMLHttpRequest();\n        return new Promise(function (resolve, reject) {\n            request.onreadystatechange = function () {\n                if (request.readyState === 4) {\n                    if (request.status === 200) {\n                        resolve(request.responseText);\n                    } else {\n                        reject(request.status+\'不存在这个地址\');\n                    }\n                }\n            };\n            request.open(method, url);\n            request.send(data);\n        });\n    }\n        var log = document.getElementById(\'test-promise-ajax-result\');\n        var p = ajax(\'GET\', \'https://raw.githubusercontent.com/mdn/learning-area/master/javascript/apis/\nfetching-data/verse10.txt\');\n        p.then(function (text) { // 如果AJAX成功，获得响应内容\n            log.innerText = text;\n        }).catch(function (a) { // 如果AJAX失败，获得响应代码\n            log.innerText = \'ERROR: \' + a;\n            console.log(\'ERROR: \' + a)\n        });\n// 个人理解，当请求响应成功时，执行resolve，内有上述resolve(request.responseText)传入的值，所以不会报错会打印出来，当请\n//求响应失败在else中，执行reject，内有reject(request.status+\'不存在这个地址\')，会执行.catch后的代码\n```\n### ``` promise.all() ```\n> 试想一个页面聊天系统，我们需要从两个不同的URL分别获得用户的个人信息和好友列表，这两个任务是可以并行执行的，用Promise.all()实现如下：\n```javascript\nvar p1 = new Promise(function (resolve, reject) {\n    setTimeout(resolve, 500, \'P1\');\n});\nvar p2 = new Promise(function (resolve, reject) {\n    setTimeout(resolve, 600, \'P2\');\n});\n// 同时执行p1和p2，并在它们都完成后执行then:\nPromise.all([p1, p2]).then(function (results) {\n    console.log(results); // 获得一个Array: [\'P1\', \'P2\']\n});\n\n```\n\n### ``` promise.race() ```\n>有些时候，多个异步任务是为了容错。比如，同时向两个URL读取用户的个人信息，只需要获得先返回的结果即可。这种情况下，用Promise.race()实现：\n```javascript\nvar p1 = new Promise(function (resolve, reject) {\n    setTimeout(resolve, 500, \'P1\');\n});\nvar p2 = new Promise(function (resolve, reject) {\n    setTimeout(resolve, 600, \'P2\');\n});\nPromise.race([p1, p2]).then(function (result) {\n    console.log(result); // \'P1\'\n});\n```\n>由于p1执行较快，Promise的then()将获得结果\'P1\'。p2仍在继续执行，但执行结果将被丢弃。', '2018-11-05 10:48:20', 'javascript', 79, 2, 'Mon Nov 05 2018 02:48:20 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('Proxy代理', '#### 在ECMAScript 6中引入Proxy对象可以拦截某些操作并实现自定义行为。 例如获取一个对象上的属性：\n```javascript\nlet handler = {\n  get: function(target, name){\n    return name in target ? target[name] : 42;\n}};\n\nlet p = new Proxy({}, handler);\np.a = 1;\n\nconsole.log(p.a, p.b); // 1, 42\n```\n>Proxy对象定义了一个目标（这里是一个空对象）和一个实现了get陷阱的 handle 对象。这里，代理的对象在获取未定义的属性时不会返回undefined，而是返回 42。', '2018-11-06 20:12:28', 'javascript', 80, 2, 'Tue Nov 06 2018 12:12:28 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('apply()   call() 继承时用的较多--或者调用函数', '```javascript\n/*apply()方法*/\nfunction.apply(thisObj[, argArray])\n\n/*call()方法*/\nfunction.call(thisObj[, arg1[, arg2[, [,...argN]]]]);\n```\n>调用函数可以使用call或者apply这两个方法，区别在于call需要将传递给函数的参数明确写出来，是多少参数就需要写多少参数。而apply则将传递给函数的参数放入一个数组中，传入参数数组即可。\n\n#### 例子\n```javascript\nfunction argsAsArray(fn, arr) {\n  return fn.apply(this, arr);\n }\n//arr为数组\nfunction speak(fn, obj) {\n  return fn.apply(obj, obj);\n }\nfunction speak(fn, obj) {\n  return fn.apply(obj);\n }\nfunction speak(fn, obj) {\n  return fn.call(obj, obj);\n }\nfunction speak(fn, obj) {\n  return fn.call(obj);\n }\n//obj为对象时候，apply和call均可\n```\n>在JavaScript中，函数是一种对象，其上下文是可以变化的，对应的，函数内的this也是可以变化的，函数可以作为一个对象的方法，也可以同时作为另一个对象的方法，可以通过Function对象中的call或者apply方法来修改函数的上下文，函数中的this指针将被替换为call或者apply的第一个参数。将函数 fn 的执行上下文改为 obj 对象，只需要将obj作为call或者apply的第一个参数传入即可。\n##### 它们各自的定义：\n\n```apply```：调用一个对象的一个方法，用另一个对象替换当前对象。例如：```B.apply(A, arguments);```即A对象应用B对象的方法。\n\n```call```：调用一个对象的一个方法，用另一个对象替换当前对象。例如：```B.call(A, args1,args2);```即A对象调用B对象的方法。\n[不懂的时候看看](https://www.cnblogs.com/lengyuehuahun/p/5643625.html)\n```javascript\nfunction add(a,b){\n  return a+b;  \n}\nfunction sub(a,b){\n  return a-b;  \n}\nvar a1 = add.apply(sub,[4,2]);　　//sub调用add的方法\nvar a2 = sub.apply(add,[4,2]);\nalert(a1);  //6     \nalert(a2);  //2\n\n/*call的用法*/\nvar a1 = add.call(sub,4,2);\n```', '2018-11-07 19:56:02', 'javascript', 81, 2, 'Wed Nov 07 2018 11:56:02 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('charAt()和charCodeAt()', 'charAt()选取字符串中的某个字符\ncharCodeAt()将某个字符转换为ASCII码十进制，例如A是65', '2018-11-07 22:16:02', 'javascript', 83, 2, 'Wed Nov 07 2018 14:16:02 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('正则--提取纯文本', '```javascript\nvar a = \"dajiahao,woshi,lianglihao!\"\nundefined\na\n\"dajiahao,woshi,lianglihao!\"\nvar b = a.replace(/\\W+/gi,\'\')\nundefined\nb\n\"dajiahaowoshilianglihao\"\n```', '2018-11-09 09:22:42', 'javascript', 85, 2, 'Fri Nov 09 2018 01:22:42 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('macos--ssh进入ubuntu服务器', '## 本地终端（macos--ssh）进入服务器ubuntu\n```\nssh -q -l ubuntu -p 22 139.199.206.151\n```\n\n默认账户为 ```ubuntu``` ，密码为 ***************\n', '2018-11-09 09:41:04', 'ubuntu', 86, 2, 'Fri Nov 09 2018 01:41:04 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('macos--本地与服务器之间文件互传', '## 本地上传文件至服务器\n```\n打开终端。 cd /Users/lianglihao （进入需要上传文件的所在目录）\n\nscp -r scrapingEnv(文件名) ubuntu(服务器用户名)@139.199.206.151(服务器公网ip):/home/ubuntu/pythonplay(文件上传的目录地址)\n```\n#### 上传文件夹到服务器\n```\nscp -r scrapingEnv ubuntu@139.199.206.151:/home/ubuntu/pythonplay\n```\n#### 上传文件到服务器\n```\nscp scrapingEnv ubuntu@139.199.206.151:/home/ubuntu/pythonplay\n```\n#### 下载文件到本地\n```\nscp ubuntu@139.199.206.151:/home/ubuntu/test/example/example/spiders/lianglihao.json /Users/lianglihao/Desktop/txCloud\n```\n#### 下载文件夹到本地\n```\nscp -r ubuntu@139.199.206.151:/home/ubuntu/test/example/example/spiders/lianglihao.json /Users/lianglihao/Desktop/txCloud\n```', '2018-11-09 09:46:51', 'ubuntu', 87, 2, 'Fri Nov 09 2018 01:46:51 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('ubuntu--查看端口使用情况', '#### 查看端口使用情况，使用netstat命令。查看已经连接的服务端口（ESTABLISHEDnetstat -a查看所有的服务端口（LISTEN，ESTABLISHED）    ```netstat -ap```\n```\n查看8080端口，则可以结合grep命令：\n \n    netstat -ap | grep 8080\n \n如查看8888端口，则在终端中输入：\n \nlsof -i:8888\n \n若要停止使用这个端口的程序，使用kill +对应的pid即可\n\nKill -9 pid. 强制杀除\n\n\nps -ax. 查看进程\n```', '2018-11-09 09:51:29', 'ubuntu', 88, 2, 'Fri Nov 09 2018 01:51:29 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('bg和fg命令--调度正在运行度任务', '## bg和fg命令\n##### linux提供的fg和bg命令，可以让我们轻松调度正在运行的任务假如你发现前天运行的一个程序需要很长的时间，但是需要干前天的事情，你就可以用ctrl-z挂起这个程序，然后可以看到系统的提示:\n```[1]+ Stopped /root/bin/rsync.sh```\n##### 然后我们可以吧程序调度到后台执行：（bg 作业号）\n#bg 1  [1]+ /root/bin/rsync.sh &\n##### 用jobs命令查看任务\n#jobs\n[1]+ Running /root/bin/rsync.sh &\n##### 把它调回到控制台运行\n#fg 1\n/root/bin/rsync.sh\n这样，你这控制台上就只有等待这个任务完成了。\n\n##### fg、bg、jobs、&、 ctrl+z都是跟系统任务有关的，学会了相当的实用\n```\n一、&最经常被用到\n这个用在一个命令的最后，可以把这个命令放到后台执行\n```\n```\n二、ctrl + z\n可以将一个正在前台执行的命令放到后台，并且暂停\n```\n```\n三、jobs\n查看当前有多少在后台运行的命令\n```\n```\n四、fg\n将后台中的命令调至前台继续运行\n如果后台有多个命令，可以用fg %jobnumber将选中的命令调出，%jobnumber是通过jobs命令查到的后台正在执行的命令的序号（不是pid）\n```\n```\n五、bg\n将一个在后台暂停的命令，变成继续执行\n如果后台有多个命令，可以用bg %jobnumber将选中的命令调出，%jobnumber是通过jobs命令查到的后台正在执行的命令的序号（不是pid）\n```\n\n>disown.  程序挂起 \n', '2018-11-09 09:55:01', 'ubuntu', 89, 2, 'Fri Nov 09 2018 01:55:01 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('文件文件夹度建立与删除', '```mkdir``` xxx(文件夹名称)  —创建文件夹\n```rkdir``` xxx(文件夹名称)  —删除文件夹\n#### 常用如下几个：\n```rm -d 目录名```              #删除一个空目录\n```rmdir 目录名 ```             #删除一个空目录\n```rm -r 目录名  ```            #删除一个非空目录\n```rm 文件名    ```              #删除文件\n', '2018-11-09 09:56:24', 'ubuntu', 90, 2, 'Fri Nov 09 2018 01:56:24 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('.filter--过滤', '实例\n```javascript\nvar words = [\'spray\', \'limit\', \'elite\', \'exuberant\', \'destruction\', \'present\'];\n\nconst result = words.filter(word => word.length > 6);\n\nconsole.log(result);\n// expected output: Array [\"exuberant\", \"destruction\", \"present\"]\n```\n\n```javascript\nfunction remove(arr, item) {\n    return arr.filter(function(x) { return x !== item; });\n}\n//移除数组中与item不相同的内容\n```\n```javascript\n /**\n     * 获取数组中相同元素的个数\n     * @param val 相同的元素\n     * @param arr 传入数组\n     */\n    function getSameNum(val,arr){\n        processArr = arr.filter(function(value) {\n            return value == val;\n        })\n        return processArr.length;\n    }\n//获取数组arr中和val值相等的值的个数\n```', '2018-11-11 21:47:55', 'javascript', 91, 2, 'Sun Nov 11 2018 13:47:55 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('setInterval,clearInterval--类定时器', '#### 例子\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>菜鸟教程(runoob.com)</title>\n</head>\n<body>\n\n<p>显示当前时间:</p>\n\n<p id=\"demo\"></p>\n\n<button onclick=\"myStopFunction()\">停止时间</button>\n\n<script>\nvar myVar = setInterval(function(){ myTimer() }, 1000);\n\nfunction myTimer() {\n    var d = new Date();\n    var t = d.toLocaleTimeString();\n    document.getElementById(\"demo\").innerHTML = t;\n}\n\nfunction myStopFunction() {\n    clearInterval(myVar);\n}\n</script>\n\n</body>\n</html>\n```\n> myTimer获取当前时间，myVar设置调用myTimer的时间间隔。所有每秒调用一次，那么时间也随之跳秒显示，点击按钮，执行clearInterval方法终止myVal\n#### 例子\n```javascript\nfunction count(start, end) {\n    console.log(start++)\n    var kaishi = setInterval(function(){ jishi()},100)\n    function jishi(){\n            if(start<=end){\n                console.log(start++)\n            }else{\n                clearInterval(kaishi)\n            } \n    }\n    return{\n        cancel:function(){clearInterval(kaishi)}\n    }\n}\n\n\nfunction count(start, end) {\n  //立即输出第一个值\n  console.log(start++);\n     var timer = setInterval(function(){\n         if(start <= end){\n             console.log(start++);\n         }else{\n             clearInterval(timer);\n         }\n     },100);\n    //返回一个对象\n     return {\n         cancel : function(){\n             clearInterval(timer);\n         }\n     };\n }\n\n//下面是setTimeout方法，区别\nfunction count(start, end) {\n    if(start<=end){\n        console.log(start++)\n        var tim = setTimeout(function(){count(start,end)},100)\n    }\n    return {\n        cancel:function(){clearTimeout(timer)}\n    }\n}\n```\n>clearInterval() 方法可取消由 setInterval() 函数设定的定时执行操作。\n\n>clearInterval() 方法的参数必须是由 setInterval() 返回的 ID 值。\n\n#### 注意: 要使用 clearInterval() 方法, 在创建执行定时操作时要使用全局变量：\n```javascript\nmyVar = setInterval(\"javascript 函数\", milliseconds);\n```', '2018-11-12 10:31:30', 'javascript', 92, 2, 'Mon Nov 12 2018 02:31:30 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('查看当前登陆用户，并踢出下线', 'who命令可查看当前登陆的用户\nexample pts/1 2016-08-09 14:55 (220.181.113.37)\nroot pts/3 2016-08-09 16:12 (220.181.113.37)\n然后使用pkill -kill -t pts/1 命令来踢出用户\npts/1对应的是该用户的TTY', '2018-11-12 21:21:56', 'ubuntu', 93, 2, 'Mon Nov 12 2018 13:21:56 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('splice()--操作数组增删改', '>splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。\n\n>注释：该方法会改变原始数组。\n\n例子 1\n在本例中，我们将创建一个新数组，并向其添加一个元素：\n```javascript\n<script type=\"text/javascript\">\n\nvar arr = new Array(6)\narr[0] = \"George\"\narr[1] = \"John\"\narr[2] = \"Thomas\"\narr[3] = \"James\"\narr[4] = \"Adrew\"\narr[5] = \"Martin\"\n\ndocument.write(arr + \"<br />\")\narr.splice(2,0,\"William\")\ndocument.write(arr + \"<br />\")\n\n</script>\n输出：\n\nGeorge,John,Thomas,James,Adrew,Martin\nGeorge,John,William,Thomas,James,Adrew,Martin\n```\n例子 2\n在本例中我们将删除位于 index 2 的元素，并添加一个新元素来替代被删除的元素：\n```javascript\n<script type=\"text/javascript\">\n\nvar arr = new Array(6)\narr[0] = \"George\"\narr[1] = \"John\"\narr[2] = \"Thomas\"\narr[3] = \"James\"\narr[4] = \"Adrew\"\narr[5] = \"Martin\"\n\ndocument.write(arr + \"<br />\")\narr.splice(2,1,\"William\")\ndocument.write(arr)\n\n</script>\n输出：\n\nGeorge,John,Thomas,James,Adrew,Martin\nGeorge,John,William,James,Adrew,Martin\n```\n例子 3\n在本例中我们将删除从 index 2 (\"Thomas\") 开始的三个元素，并添加一个新元素 (\"William\") 来替代被删除的元素：\n```javascript\n<script type=\"text/javascript\">\n\nvar arr = new Array(6)\narr[0] = \"George\"\narr[1] = \"John\"\narr[2] = \"Thomas\"\narr[3] = \"James\"\narr[4] = \"Adrew\"\narr[5] = \"Martin\"\n\ndocument.write(arr + \"<br />\")\narr.splice(2,3,\"William\")\ndocument.write(arr)\n\n</script>\n输出：\n\nGeorge,John,Thomas,James,Adrew,Martin\nGeorge,John,William,Martin\n```', '2018-11-12 21:54:31', 'javascript', 94, 2, 'Mon Nov 12 2018 13:54:31 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('hasOwnProperty--判断对象是否具有自己定义的属性', 'hasOwnProperty 是 JavaScript 中处理属性并且不会遍历原型链的方法之一。\n```javascript\nvar a = {a:1}\nundefined\nvar b = Object.create(a)\nundefined\nb\n{}\nb.a\n1\na.hasOwnProperty()\nfalse\na.hasOwnProperty(a)\nfalse\na.hasOwnProperty(\'a\')\ntrue\nb.hasOwnProperty(\'a\')\nfalse\nb.a=2\n2\nb.a\n2\nb.hasOwnProperty(\'a\')\ntrue\n```', '2018-11-13 13:55:29', 'javascript', 95, 2, 'Tue Nov 13 2018 05:55:29 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('生命周期--mounted', '# ```created```:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。\n# ```mounted```:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。', '2018-11-14 11:24:57', 'vue', 98, 2, 'Wed Nov 14 2018 03:24:57 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('Array.prototype.slice.call()、[].slice.call()将（）内转换为数组', '### ```Array.prototype.slice.call(arguments)```能够将```arguments```转成数组\n\n\n### 拓展\n```javascript\nArray.prototype.slice.call([1,2,3,4,5],0)//  [1, 2, 3, 4, 5]\n\n[].slice.call([1,2,3,4,5],1)// [2, 3, 4, 5]\n\n//没有length的对象\nvar a={length:2, 0:\'first\', 1:\'second\'};\nArray.prototype.slice.call(a);//  [\"first\", \"second\"]\n\nvar a={length:2, 0:\'first\', 1:\'second\'};\nArray.prototype.slice.call(a,1);//  [\"second\"]\n\nvar a={0:\'first\', 1:\'second\'};\nArray.prototype.slice.call(a,1);//  []\n```', '2018-11-16 10:32:30', 'javascript', 99, 2, 'Fri Nov 16 2018 02:32:30 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('方法后面跟多个()执行子孙函数', '>f()意思是执行f函数，返回子函数\n\n>f()()执行子函数，返回孙函数\n\n>f()()()执行孙函数\n\n### 例子\n```javascript\nvar i=1;\n    function f(){\n        i++;\n        console.log(\"-------------  :  \"+i)\n        return k;\n// 需要return一个函数，这个函数才会成为子函数\n        function k(a) {console.log(a)\n            return j\n        }\n	function j(b){console.log(b);return j}\n    }\n```\n\n### 例子\n```javascript\nfunction functionFunction(str) {\n    var ret = Array.prototype.slice.call(arguments).join(\', \');\n    var temp = function(str) {\n        ret = [ret, Array.prototype.slice.call(arguments).join(\', \')].join(\', \');\n        return temp;\n    };\n    temp.toString = function(){\n        return ret;\n    };\n    return temp;\n}\n\n//输出：Hello, World\nfunctionFunction(\'Hello\')(\'World\').toString();\n//输出：1, 2, 3, 4\nfunctionFunction(1)(2)(3,4).toString();\n```', '2018-11-16 10:59:33', 'javascript', 100, 2, 'Fri Nov 16 2018 02:59:33 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('arr.map()--遍历数组，返回函数执行后的值', '### 例子\n```javascript\nvar a = [1,2,3]\nundefined\na.map(function(item){return item+1})\n(3) [2, 3, 4]\n```', '2018-11-16 16:15:38', 'javascript', 101, 2, 'Fri Nov 16 2018 08:15:38 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('柯里化', '```javascript\n// 简单实现，参数只能从右到左传递\nfunction createCurry(func, args) {\n\n    var arity = func.length;\n    var args = args || [];\n\n    return function() {\n        var _args = [].slice.call(arguments);\n        [].push.apply(_args, args);\n\n        // 如果参数个数小于最初的func.length，则递归调用，继续收集参数\n        if (_args.length < arity) {\n            return createCurry.call(this, func, _args);\n        }\n\n        // 参数收集完毕，则执行func\n        return func.apply(this, _args);\n    }\n}\n```\n\n```javascript\nfunction add() {\n    // 第一次执行时，定义一个数组专门用来存储所有的参数\n    var _args = [].slice.call(arguments);\n\n    // 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值\n    var adder = function () {\n        var _adder = function() {\n            // [].push.apply(_args, [].slice.call(arguments));\n            _args.push(...arguments);\n            return _adder;\n        };\n\n        // 利用隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回\n        _adder.toString = function () {\n            return _args.reduce(function (a, b) {\n                return a + b;\n            });\n        }\n\n        return _adder;\n    }\n    // return adder.apply(null, _args);\n    return adder(..._args);\n}\n```', '2018-11-17 19:09:05', 'javascript', 102, 2, 'Sat Nov 17 2018 11:09:05 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('正则表达式', '[正则MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions)\n```javascript\nvar a = str\nvar reg = /reg/\n\nreg.test(a)\n//如果字符串a匹配正则表达式reg返回true，否则返回false\n\na.match(reg)\n//返回字符串a中匹配reg的字符\n\n/i 不区分大小写 insensitive\n/g 全局匹配 global\n/m 多行模式 multi\n/gi 和/ig 就是/i 和/g的组合\n```\n---\n## RegExp.prototype.exec()\n\n```javascript\nvar regex1 = RegExp(\'foo*\',\'g\');\nvar str1 = \'table football, foosball\';\nvar array1;\n\nwhile ((array1 = regex1.exec(str1)) !== null) {\n  console.log(`Found ${array1[0]}. Next starts at ${regex1.lastIndex}.`);\n  // expected output: \"Found foo. Next starts at 9.\"\n  // expected output: \"Found foo. Next starts at 19.\"\n}\n```\n## RegExp.prototype.test()\n\n```javascript\nvar regex1 = RegExp(\'foo*\');\nvar regex2 = RegExp(\'foo*\',\'g\');\n// var regex = /foo/g;\nvar str1 = \'table football\';\n\nconsole.log(regex1.test(str1));\n// expected output: true\n\nconsole.log(regex1.test(str1));\n// expected output: true\n\nconsole.log(regex2.test(str1));\n// expected output: true\n\nconsole.log(regex2.test(str1));\n// expected output: false\n```\n## String.prototype.match()\n```javascript\nvar paragraph = \'The quick brown fox jumps over the lazy dog. It barked.\';\nvar regex = /[A-Z]/g;\nvar found = paragraph.match(regex);\n\nconsole.log(found);\n// expected output: Array [\"T\", \"I\"]\n```\n## String.prototype.search()\n```javascript\nvar str = \"hey JudE\";\nvar re = /[A-Z]/g;\nvar re2 = /[.]/g;\nconsole.log(str.search(re)); // returns 4, which is the index of the first capital letter \"J\"\nconsole.log(str.search(re2)); // returns -1 cannot find \'.\' dot punctuation\n```\n## String.prototype.replace()\n```javascript\nvar p = \'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?\';\n\nvar regex = /dog/gi;\n\nconsole.log(p.replace(regex, \'ferret\'));\n// expected output: \"The quick brown fox jumps over the lazy ferret. If the ferret reacted, was it really lazy?\"\n\nconsole.log(p.replace(\'dog\', \'monkey\'));\n// expected output: \"The quick brown fox jumps over the lazy monkey. If the dog reacted, was it really lazy?\"\n```\n## String.prototype.split()\n```javascript\nvar myString = \'Hello 1 word. Sentence number 2.\';\nvar splits = myString.split(/(\\d)/);\n\nconsole.log(splits);\n```', '2018-11-17 20:32:23', 'javascript', 103, 2, 'Sat Nov 17 2018 12:32:23 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('<a>标签', '\n### 元素```<a>```是锚，它使被标签包裹的内容成为一个超链接。此元素也可以添加大量的属性，其中几个如下：\n\n \n\n- #### ```href```: 这个属性声明超链接的web地址，当这个链接被点击浏览器会跳转至href声明的web地址。例如： href=\"https://www.mozilla.org/\"。\n- #### ```title```: 标题title 属性为超链接声明额外的信息，比如你将链接至那个页面。例如： title=\"The Mozilla homepage\"。当鼠标悬浮时，将出现一个工具提示。\n- #### ```target```: 目标target 属性指定将用于显示链接的浏览上下文。 例如， target=\"_blank\" 将在新标签页中显示链接。如果你希望在目前标签页显示链接，只需忽略这个属性。 \n#### 超链接可以链接到html文档的特定部分（被称为文档片段），而不仅仅是文件的顶部。要做到这一点你必须首先分配一个id属性的元素到链接。通常链接到一个特定的标题是有意义的，所以这看起来像下面的内容：\n```html\n<h2 id=\"Mailing_address\">Mailing address</h2>\n```\n#### 然后链接到那个特定的id，您可以在URL的结尾包含它，前面是一个井号```（#）```，例如：\n\n```html\n<p>Want to write us a letter? Use our <a href=\"contacts.html#Mailing_address\">mailing address</a>.</p>\n```\n#### 你甚至可以用它自己的文档片段参考链接到同一份文件的另一部分：\n\n```html\n<p>The <a href=\"#Mailing_address\">company mailing address</a> can be found at the bottom of this page.</p>\n```\n---\n#### 当您链接到要下载的资源而不是在浏览器中打开时，您可以使用下载属性==download==来提供一个默认的保存文件名。下面是一个下载链接到Firefox 的 Windows最新版本的示例：\n```html\n<a href=\"https://download.mozilla.org/?product=firefox-latest-ssl&os=win64&lang=en-US\"\n   download=\"firefox-latest-64bit-installer.exe\">\n  Download Latest Firefox for Windows (64-bit) (English, US)\n</a>\n```', '2018-11-18 13:26:40', 'html', 104, 2, 'Sun Nov 18 2018 05:26:40 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('disabled属性--标签是否可用', '```document.getElementById(\"控件ID\").disabled=true; ```不可编辑状态\n```document.getElementById(\"控件ID\").disabled=false;``` 可编辑状态\n```JavaScript\n<input type=\"text\" disabled=\"disabled\">\n<input type=\"text\" disabled>\n//输入框不可编辑\n\n<input type=\"text\">\n//输入框可编辑\n```\n\n\n\n\n\n', '2018-11-18 13:39:58', 'html', 105, 2, 'Sun Nov 18 2018 05:39:59 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('分析HTML文档', '```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>My test page</title>\n  </head>\n  <body>\n    <p>This is my page</p>\n  </body>\n</html>\n```\n- ##### ```<!DOCTYPE html>```: 声明文档类型. 很久以前，早期的HTML(大约1991年2月)，文档类型声明类似于链接，规定了HTML页面必须遵从的良好规则，能自动检测错误和其他有用的东西。使用如下：***然而现在没有人再这样写，需要保证每一个东西都正常工作已成为历史。你只需要知道```<!DOCTYPE html>```是最短的有效的文档声明。\n- ##### ```<html></html>```: ```<html>```元素。这个元素包裹了整个完整的页面，是一个根元素。\n- ##### ```<head></head>```: ```<head>```元素. 这个元素是一个容器，它包含了所有你想包含在HTML页面中但不想在HTML页面中显示的内容。这些内容包括你想在搜索结果中出现的关键字和页面描述，CSS样式，字符集声明等等。以后的章节能学到更多关于<head>元素的内容。\n- ##### ```<meta charset=\"utf-8\">```: 这个元素设置文档使用utf-8字符集编码，utf-8字符集包含了人类大部分的文字。基本上他能识别你放上去的所有文本内容。毫无疑问要使用它，并且它能在以后避免很多其他问题。\n- ##### ```<title></title>```: 设置页面标题，出现在浏览器标签上，当你标记/收藏页面时它可用来描述页面。\n- ##### ```<body></body>```: ```<body>```元素。 包含了你访问页面时所有显示在页面上的内容，文本，图片，音频，游戏等等。\n> 注释 ```<!-- <p>nihao</p> -->```', '2018-11-18 13:50:04', 'html', 106, 2, 'Sun Nov 18 2018 05:50:05 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('<meta>--元数据', '#### ```<meta charset=\"utf-8\">```字符编码，基本包含了人类的文字，英文、中文、日语等\n\n许多```<meta>``` 元素包含了name 和 content 特性:\n\n#### name 特性指定了meta 元素的类型; 说明该元素包含了什么类型的信息。\n#### content 指定了实际的元数据内容。\n这两个meta 元素对于定义你的页面的作者和提供页面的内容描述是很有用的 。 让我们看一个例子：\n\n```html\n<meta name=\"author\" content=\"Chris Mills\">\n<meta name=\"description\" content=\"The MDN Learning Area aims to provide\ncomplete beginners to the Web with all they need to know to get\nstarted with developing web sites and applications.\">\n```\n#### 指定作者在某些情况下是很有用的：如果你需要联系页面的作者，问一些关于页面内容的问题。 一些内容管理系统能够自动获取页面作者的信息，然后用于某种目的。\n\n#### description指定包含关于页面内容的关键字的页面内容的描述是很有用的，因为它可能或让你的页面在搜索引擎的相关的搜索出现得更多\n\n', '2018-11-18 14:18:10', 'html', 107, 2, 'Sun Nov 18 2018 06:18:10 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('stopPropagation()--停止事件的传播', '>终止事件在传播过程的捕获、目标处理或起泡阶段进一步传播。调用该方法后，该节点上处理该事件的处理程序将被调用，事件不再被分派到其他节点。\n```javascript\nhtml.onclick = function() {\n  var listItem = document.createElement(\'li\');\n  var listContent = prompt(\'What content do you want the list item to have?\');\n  listItem.textContent = listContent;\n  list.appendChild(listItem);\n\n  listItem.onclick = function(e) {\n    e.stopPropagation();\n    //当前li节点被点击时，方法只被用于当前节点\n    //总之一定要加上\n    var listContent = prompt(\'Enter new content for your list item\');\n    this.textContent = listContent;\n  }\n}\n```', '2018-11-18 14:38:00', 'html', 108, 2, 'Sun Nov 18 2018 06:38:00 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('为文档设置主语言', '```<html lang=\"en-US\">```**英文**\n```<html lang=\"en-US\">```**中文**\n>没有什么特别的用处，主要是给搜索引擎看的，文档越规范也越容易被收录\n\n#### 可以将文档的分段设置为不同的语言。例如， 我们可以把日语部分设置为日语， 如下所示：\n```html\n<p>Japanese example: <span lang=\"jp\">ご飯が熱い。</span>.</p>\n```', '2018-11-18 14:44:41', 'html', 109, 2, 'Sun Nov 18 2018 06:44:41 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('ul--无序列表  ol--有序列表', '```html\n<ul>\n  <li>牛奶</li>\n  <li>鸡蛋</li>\n  <li>面包</li>\n  <li>鹰嘴豆泥</li>\n</ul>\n```\n- 牛奶\n- 鸡蛋\n- 面包\n- 鹰嘴豆泥\n```html\n<ol>\n  <li>行驶到这条路的尽头</li>\n  <li>向右转</li>\n  <li>直行穿过第一个双环形交叉路</li>\n  <li>在第三个环形交叉路左转</li>\n  <li>学校就在你的右边，300米处</li>\n</ol>\n```\n1.行驶到这条路的尽头\n2.向右转\n3.直行穿过第一个双环形交叉路\n4.在第三个环形交叉路左转\n5.学校就在你的右边，300米处\n\n>可以互相嵌套', '2018-11-18 16:30:09', 'html', 110, 2, 'Sun Nov 18 2018 08:30:09 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('描述列表 dl>dt>dd', '描述列表使用与其他列表类型不同的闭合标签— ```<dl>```; 此外，每一项都用  ```<dt> (description term)```  元素闭合。每个描述都用 ```<dd> (description description)``` 元素闭合。\n```html\n<dl>\n  <dt>soliloquy</dt>\n  <dd>In drama, where a character speaks to themselves, representing their inner thoughts or feelings and in the process relaying them to the audience (but not to other characters.)</dd>\n  <dt>monologue</dt>\n  <dd>In drama, where a character speaks their thoughts out loud to share them with the audience and any other characters present.</dd>\n  <dt>aside</dt>\n  <dd>In drama, where a character shares a comment only with the audience for humorous or dramatic effect. This is usually a feeling, thought or piece of additional background information.</dd>\n</dl>\n```\n```\nsoliloquy\n	In drama, where a character speaks to themselves, representing their inner thoughts or feelings and in the process relaying them to the audience (but not to other characters.)\nmonologue\n	In drama, where a character speaks their thoughts out loud to share them with the audience and any other characters present.\naside\n	In drama, where a character shares a comment only with the audience for humorous or dramatic effect. This is usually a feeling, thought or piece of addtional background information.\n```\n>一个术语```<dt>```可以同时有多个描述```<dd>```', '2018-11-19 09:39:41', 'html', 111, 2, 'Mon Nov 19 2018 01:39:39 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('<abbr>--缩略语', '#### 另一个你在web上看到的相当常见的元素是<abbr>——它常被用来包裹一个缩略语或缩写，并且提供缩写的解释（包含在title属性中）。让我们看看下面两个例子：\n```html\n<p>We use <abbr title=\"Hypertext Markup Language\">HTML</abbr> to structure our web documents.</p>\n\n<p>I think <abbr title=\"Reverend\">Rev.</abbr> Green did it in the kitchen with the chainsaw.</p>\n```\n```css\nabbr[title] {\n    cursor: help;\n    text-decoration: dotted underline;\n}\n```\n>设置了这个css后文字下方会出现虚线下划线，鼠标接触时会是一个有一个问号伴随，显示==title==内的内容', '2018-11-19 11:33:18', 'html', 112, 2, 'Mon Nov 19 2018 03:33:16 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('<sub><sup>--下标上标', '#### 当你使用日期、化学方程式、和数学方程式时会偶尔使用上标和下标。 ```<sup>``` 和```<sub>```元素可以解决这样的问题。例如：\n```html\n<p>My birthday is on the 25<sup>th</sup> of May 2001.</p>\n<p>Caffeine\'s chemical formula is C<sub>8</sub>H<sub>10</sub>N<sub>4</sub>O<sub>2</sub>.</p>\n<p>If x<sup>2</sup> is 9, x must equal 3 or -3.</p>\n```\nMy birthday is on the 25<sup>th</sup> of May 2001.\n\nCaffeine\'s chemical formula is C<sub>8</sub>H<sub>10</sub>N<sub>4</sub>O<sub>2</sub>.\n\nIf x<sup>2</sup> is 9, x must equal 3 or -3.', '2018-11-19 11:39:55', 'html', 113, 2, 'Mon Nov 19 2018 03:39:53 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('<address>--标记作者联系方式', '#### HTML有个用于标记联系方式的元素——<address>。它仅仅包含你的联系方式，例如：\n```html\n<address>\n  <p>Chris Mills, Manchester, The Grim North, UK</p>\n</address>\n```\n#### 但要记住的一点是，<address>元素是为了标记编写HTML文档的人的联系方式，而不是任何其他的内容。因此，如果这是Chris写的文档，上面的内容将会很好。注意，下面的内容也是可以的：\n```html\n<address>\n  <p>Page written by <a href=\"http:139.199.206.151:7070\">HLA Liang</a>.</p>\n</address>\n```', '2018-11-19 11:41:57', 'html', 114, 2, 'Mon Nov 19 2018 03:41:56 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('展示计算机代码', '### 有大量的HTML元素可以来标记计算机代码：\n\n- ##### ```<code>```: 用于标记计算机通用代码。\n- ##### ```<pre>```: 对保留的空格（通常是代码块）——如果您在文本中使用缩进或多余的空白，浏览器将忽略它，您将不会在呈现的页面上看到它。但是，如果您将文本包含在```<pre></pre>```标签中，那么空白将会以与你在文本编辑器中看到的相同的方式渲染出来。\n- ##### ```<var>```: 用于标记具体变量名。\n- ##### ```<kbd>```: 用于标记输入电脑的键盘（或其他类型）输入。\n- ##### ```<samp>```: 用于标记计算机程序的输出。\n##### 让我们看看一些例子。你应该尝试运行一下（尝试运行一下==other-semantics.html==样例文件的拷贝）：\n```html\n<pre><code>var para = document.querySelector(\'p\');\n\npara.onclick = function() {\n  alert(\'Owww, stop poking me!\');\n}</code></pre>\n\n<p>You shouldn\'t use presentational elements like <code>&lt;font&gt;</code> and <code>&lt;center&gt;</code>.</p>\n\n<p>In the above JavaScript example, <var>para</var> represents a paragraph element.</p>\n\n\n<p>Select all the text with <kbd>Ctrl</kbd>/<kbd>Cmd</kbd> + <kbd>A</kbd>.</p>\n\n<pre>$ <kbd>ping mozilla.org</kbd>\n<samp>PING mozilla.org (63.245.215.20): 56 data bytes\n64 bytes from 63.245.215.20: icmp_seq=0 ttl=40 time=158.233 ms</samp></pre>\n```\n\n<pre><code>var para = document.querySelector(\'p\');\n\npara.onclick = function() {\n  alert(\'Owww, stop poking me!\');\n}</code></pre>\n\n<p>You shouldn\'t use presentational elements like <code>&lt;font&gt;</code> and <code>&lt;center&gt;</code>.</p>\n\n<p>In the above JavaScript example, <var>para</var> represents a paragraph element.</p>\n\n\n<p>Select all the text with <kbd>Ctrl</kbd>/<kbd>Cmd</kbd> + <kbd>A</kbd>.</p>\n\n<pre>$ <kbd>ping mozilla.org</kbd>\n<samp>PING mozilla.org (63.245.215.20): 56 data bytes\n64 bytes from 63.245.215.20: icmp_seq=0 ttl=40 time=158.233 ms</samp></pre>', '2018-11-19 11:49:36', 'html', 115, 2, 'Mon Nov 19 2018 03:49:34 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('mailto--电子邮件链接', '#### 当点击一个链接或按钮时，打开一个新的电子邮件发送信息而不是连接到一个资源或页面，这种情况是可能做到的。这样做是使用```<a>```元素和```mailto```：URL的方案。\n#### 其最基本和最常用的使用形式为一个```mailto:link``` （链接），链接简单说明收件人的电子邮件地址。例如:\n```html\n<a href=\"mailto:nowhere@mozilla.org\">Send email to nowhere</a>\n```\n#### 实际上，邮件地址甚至是可选的。如果你忘记了（也就是说，你的href仅仅只是简单的\"mailto:\"），一个新的发送电子邮件的窗口也会被用户的邮件客户端打开，只是没有收件人的地址信息，这通常在“分享”链接是很有用的，用户可以发送给他们选择的地址邮件\n\n```html\n<a href=\"mailto:nowhere@mozilla.org?cc=name2@rapidtables.com&bcc=name3@rapidtables.com&amp;subject=The%20subject%20of%20the%20email &amp;body=The%20body%20of%20the%20email\">\n  Send mail with cc, bcc, subject and body\n</a>\n```\n>%20 是浏览器对于空格的编码\n\n|参数|描述|\n|-|-|-|\n|mailto:name@email.com|e-mail recipient address|\n|cc=name@email.com|carbon copy e-mail address|\n|bcc=name@email.com|blind carbon copy e-mail|\n|subject=subject text|e-mail的题目|\n|body=body text|e-mail的内容|\n|?|和浏览器地址操作一样，第一个参数符合是？|\n|&|其他参数符号是&|\n\n', '2018-11-19 14:06:33', 'html', 117, 2, 'Mon Nov 19 2018 06:06:34 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('布局元素', '### 从总体详细的理解HTML的元素是不错的——随着你web开发经验的逐渐积累，你将会逐渐理解HTML的元素。你可以通过查阅HTML元素参考找到更多的细节。现在，你需要理解这些主要的元素定义：\n\n- #### ```<main>``` 展现了页面内容的独特性。只可以在每一个页面上使用一次```<main>```，直接把它放到```<body>```中。在理想情况下，不应该把它嵌套进其他的元素中。\n- #### ```<article>``` 闭合一块与自身相关的内容，这块内容能够解释它自身而不是页面上其他的内容（例如一篇单独的博客）。\n- #### ```<section>``` 近似于```<article>```，但是它更多的是伴随着由一个单独功能构成的页面（例如一个小型的地图，或者是一组文章的标题和摘要）。它被认为最好的实际应用是用标题作为每一部分```（section）```的开头；也要注意的是你可以把不同的```<article>```分到不同的```<section>```中，或者把不同的```<section>```分到不同的```<article>```中，这要取决于内容。\n- #### ```<aside>``` 包含的内容并不与主要内容有直接的联系，但是它可以提供额外的不直接有联系的信息（术语表条目，作者简介，相关链接等等）。\n- #### ```<header>``` 展现了一系列的介绍性内容。如果它是```<body>``` 的子元素,它就定义了网站的全局页眉。但是如果它是 ```<article>``` 或```<section>``` 的子元素，它就定义了这些部分的特定的页眉(不要把这些与```titles and headings```混淆)。\n- #### ```<nav>``` 包含了页面主要的导航功能。二级链接等，不会进入导航功能部分。\n- #### ```<footer>``` 包含了页面的页脚部分。', '2018-11-19 14:16:01', 'html', 118, 2, 'Mon Nov 19 2018 06:16:02 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('<br>,<hr>--换行与水平分割线', '#### 例如一首诗歌，就可以用到```<br>```，在一个```<p>```标签中\n#### ```<hr>```显示一条分割线，如下\n<hr>', '2018-11-19 14:22:36', 'html', 119, 2, 'Mon Nov 19 2018 06:22:38 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('<img>--<figure>', '<img src=\"http://139.199.206.151:7070/static/firstPage/laopomeimeidatouxiang.jpg\"\n     alt=\"The head and torso of a dinosaur skeleton; it has a large head with long sharp teeth\"\n     width=\"200\"\n     height=\"200\"\n     title=\"A T-Rex on display in the Manchester University Museum\">\n```html\n<img src=\"http://139.199.206.151:7070/static/firstPage/laopomeimeidatouxiang.jpg\"\n     alt=\"The head and torso of a dinosaur skeleton; it has a large head with long sharp teeth\"\n     width=\"200\"\n     height=\"200\"\n     title=\"A T-Rex on display in the Manchester University Museum\">\n```\n#### ```alt```:当图片加载不出来或者图片地址写错不存在时，就会显示其中的内容\n\n#### ```tltle```:鼠标悬停在图片上，显示的内容\n\n### 通过为图片搭配说明文字的方式来解说图片\n#### 有一个更好的做法是使用 HTML5 的 ```<figure>``` 和 ```<figcaption>``` 元素，它正是为此而被创造出来的：为图片提供一个语义容器，在标题和图片之间建立清晰的关联。我们之前的例子可以重写为:\n```html\n<figure>\n  <img src=\"images/dinosaur.jpg\"\n       alt=\"The head and torso of a dinosaur skeleton;\n            it has a large head with long sharp teeth\"\n       width=\"200\"\n       height=\"200\">\n\n  <figcaption>A T-Rex on display in the Manchester University Museum.</figcaption>\n</figure>\n```\n<figure>\n  <img src=\"http://139.199.206.151:7070/static/firstPage/laopomeimeidatouxiang.jpg\"\n       alt=\"The head and torso of a dinosaur skeleton;\n            it has a large head with long sharp teeth\"\n       width=\"200\"\n       height=\"200\">\n\n  <figcaption>A T-Rex on display in the Manchester University Museum.</figcaption>\n</figure>\n\n#### 这个 ```<figcaption>``` 元素 告诉浏览器和其他辅助的技术工具这段说明文字描述了 ```<figure>``` 元素的内容.\n\n>注意 ```<figure>``` 里不一定要是一张图片，只要是一个这样的独立内容单元：\n用紧凑、易于掌握的方式表达你的意图。\n可以放在页面线性流的中几个地方```（Could go in several places in the page\'s linear flow）```\n为主要内容提供重要的补充说明。\n```<figure>``` 可以是几张图片、一段代码、音视频、方程、表格或别的。', '2018-11-19 15:52:38', 'html', 120, 2, 'Mon Nov 19 2018 07:52:39 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('<video>', '```html\n<video src=\"rabbit320.webm\" controls>\n  <p>Your browser doesn\'t support HTML5 video. Here is a <a href=\"rabbit320.webm\">link to the video</a> instead.</p> \n</video>\n```\n>```<radio>```除了width，height，poster没有外其余与```<video>```都一样\n## 当中的一些属性如下:\n\n```src```\n#### 同 <img> 标签使用方式相同，src 属性指向你想要嵌入网页当中的视频资源，他们的使用方式完全相同。\n```controls```\n#### 用户必须能够控制视频和音频的回放功能。你可以使用浏览器提供的控制接口，同时你也可以在 ```JavaScript （JavaScript API）```当中使用这些控制接口。至少，这些媒体应该包括开始和停止，以及调整音量的功能。\n```<video>``` 标签内的段落\n#### 这个叫做后备内容 ```—``` 当浏览器不支持 ```<video>```标签的时候，它将会显示出来，它使我们能够对旧的浏览器做一些兼容处理。你可以添加任何后备内容，在这个例子中我们提供了一个指向这个视频文件的链接，从而使用户可以至少访问到这个文件，而不会局限于浏览器的支持。\n\n### 不同的浏览器对视频格式的要求不同，那就需要多准备几种不同格式的相同视频，解决方案如下\n```html\n<video controls>\n  <source src=\"https://mdn.github.io/learning-area/html/multimedia-and-embedding/video-and-audio-content/rabbit320.mp4\" type=\"video/mp4\">\n  <source src=\"https://mdn.github.io/learning-area/html/multimedia-and-embedding/video-and-audio-content/rabbit320.webm\" type=\"video/webm\">\n  <p>Your browser doesn\'t support HTML5 video. Here is a <a href=\"rabbit320.mp4\">link to the video</a> instead.</p>\n</video>\n```\n#### 现在我们将 ```src``` 属性从 ```<video>``` 标签中移除，转而将它放在几个单独的标签 ```<source>``` 当中。在这个例子当中，浏览器将会检查 ```<source> ```标签，并且播放第一个与其自身 ```codec ```相匹配的媒体。你的视频应当包括 ```WebM 和 MP4 ```两种格式，这两种在目前已经足够支持大多数平台和浏览器。\n\n#### 每个 ```<source>``` 标签页含有一个 ```type``` 属性，这个属性是可选的，但是建议你添加上这个属性 — 它包含了视频文件的``` MIME types``` ，同时浏览器也会通过检查这个属性来迅速的跳过那些不支持的格式。如果你没有添加 ```type``` 属性，浏览器会尝试加载每一个文件，直到找到一个能正确播放的格式，这样会消耗掉大量的时间和资源。\n```html\n<video controls width=\"400\" height=\"400\"\n       autoplay loop muted\n       poster=\"poster.png\">\n  <source src=\"rabbit320.mp4\" type=\"video/mp4\">\n  <source src=\"rabbit320.webm\" type=\"video/webm\">\n  <p>Your browser doesn\'t support HTML5 video. Here is a <a href=\"rabbit320.mp4\">link to the video</a> instead.</p>\n</video>\n```\n```width 和 height```\n#### 你可以用属性控制视频的尺寸，也可以用 CSS 来控制视频尺寸。 无论使用哪种方式，视频都会保持它原始的长宽比 — 也叫做纵横比。如果你设置的尺寸没有保持视频原始长宽比，那么视频边框将会拉伸，而未被视频内容填充的部分，将会显示默认的背景颜色。\n```autoplay```\n#### 这个属性会使音频和视频内容立即播放，即使页面的其他部分还没有加载完全。建议不要应用这个属性在你的网站上，因为用户们会比较反感自动播放的媒体文件。\n```loop```\n#### 这个属性可以让音频或者视频文件循环播放。同样不建议使用，除非有必要。\n```muted```\n#### 这个属性会导致媒体播放时，默认关闭声音。\n```poster```\n#### 这个属性指向了一个图像的URL，这个图像会在视频播放前显示。通常用于粗略的预览或者广告。\n```preload```\n#### 这个属性被用来缓冲较大的文件，有3个值可选：\n\n#### ```\"none\"``` ：不缓冲\n#### ```\"auto\"``` ：页面加载后缓存媒体文件\n#### ```\"metadata\"``` ：仅缓冲文件的元数据\n```html\n<figure id=\"videoContainer\" data-fullscreen=\"false\">\n		<video id=\"video\" controls preload=\"metadata\">\n			<source src=\"video/http://iandevlin.github.io/mdn/video-player-with-captions/video/sintel-short.mp4\" type=\"video/mp4\">\n			<source src=\"http://iandevlin.github.io/mdn/video-player-with-captions/video/sintel-short.webm\" type=\"video/webm\">\n			<track label=\"English\" kind=\"subtitles\" srclang=\"en\" src=\"http://iandevlin.github.io/mdn/video-player-with-captions/subtitles/vtt/sintel-en.vtt\" default>\n			<track label=\"Deutsch\" kind=\"subtitles\" srclang=\"de\" src=\"http://iandevlin.github.io/mdn/video-player-with-captions/subtitles/vtt/sintel-de.vtt\">\n			<track label=\"Español\" kind=\"subtitles\" srclang=\"es\" src=\"http://iandevlin.github.io/mdn/video-player-with-captions/subtitles/vtt/sintel-es.vtt\">\n		</video>\n		<figcaption>\n			&copy; copyright Blender Foundation | <a href=\"http://www.sintel.org\">www.sintel.org</a>\n		</figcaption>\n	</figure>\n```\n#### [WebVTT](https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API)可以显示字幕\n### 常见如下\n```subtitle```\n##### 通过添加翻译字幕，来帮助那些听不懂外国语言的人们理解音频当中的内容。\n```captions```\n##### 同步翻译对白，或是描述一些有重要信息的声音，来帮助那些不能听音频的人们理解音频中的内容。\n```timed descriptions```\n##### 将文字转换为音频，用于服务那些有视觉障碍的人。\n让其与 ```HTML``` 媒体一起显示，你需要做如下工作：\n\n以 ```.vtt ```后缀名保存文件。\n用 ```<track>``` 标签链接 ```.vtt``` 文件， ```<track>``` 标签需放在 ```<audio>``` 或 ```<video>``` 标签当中，同时需要放在所有 ```<source>``` 标签之后。使用 ```kind``` 属性来指明是哪一种类型，如 ```subtitles 、 captions 、 descriptions```。然后，使用 ```srclang``` 来告诉浏览器你是用什么语言来编写的 ```subtitles```。\n\n<video src=\"https://mdn.github.io/learning-area/html/multimedia-and-embedding/video-and-audio-content/rabbit320.webm\" controls>\n<p>Your browser doesn\'t support HTML5 video. Here is a <a href=\"rabbit320.webm\">link to the video</a> instead.</p>\n</video>\n', '2018-11-20 19:13:45', 'html', 121, 2, 'Tue Nov 20 2018 11:13:45 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('<iframe>--页面嵌入技术', '```html\n<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d515.8999709029282!2d121.36093092568476!3d28.571647610537184!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x344e30ae6bbacebd%3A0xb2420279bab88513!2z5paw5a6J56S-5Yy6!5e0!3m2!1szh-CN!2shk!4v1542715555864\" width=\"600\" height=\"450\" frameborder=\"0\" style=\"border:0\" allowfullscreen></iframe>\n以下地图来自谷歌\n```\n<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d515.8999709029282!2d121.36093092568476!3d28.571647610537184!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x344e30ae6bbacebd%3A0xb2420279bab88513!2z5paw5a6J56S-5Yy6!5e0!3m2!1szh-CN!2shk!4v1542715555864\" width=\"600\" height=\"450\" frameborder=\"0\" style=\"border:0\" allowfullscreen></iframe>\n\n```html\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/3kYsoZsz84U\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n以下视频来自youtube\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/3kYsoZsz84U\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n```allowfullscreen```\n##### 如果设置，```<iframe>```则可以通过全屏API设置为全屏模式（稍微超出本文的范围）。\n```frameborder```\n##### 如果设置为1，则会告诉浏览器在此框架和其他框架之间绘制边框，这是默认行为。0删除边框。不推荐这样设置，因为在CSS中可以更好地实现相同的效果。```border: none;```\n```src```\n##### 该属性与```<video>/<img>```一样包含指向要嵌入文档的```URL```路径。\n```width 和 height```\n##### 这些属性指定您想要的iframe的宽度和高度。\n```备选内容```\n##### 与```<video>```等其他类似元素相同，您可以在```<iframe></iframe>```标签之间包含备选内容，如果浏览器不支持```<iframe>```，将会显示备选内容，这种情况下，我们已经添加了一个到该页面的链接。现在您几乎不可能遇到任何不支持```<iframe>```的浏览器。\n```sandbox```\n##### 该属性需要在已经支持其他```<iframe>```功能（例如IE 10及更高版本）但稍微更现代的浏览器上才能工作，该属性可以提高安全性设置; \n\n>为了提高速度，在主内容完成加载后，使用JavaScript设置iframe的src属性是个好主意。这使您的页面可以更快地被使用，并减少您的官方页面加载时间（重要的SEO指标）。', '2018-11-20 20:09:19', 'html', 122, 2, 'Tue Nov 20 2018 12:09:19 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('<svg>--矢量图', '```html\n<img src=\"equilateral.png\" alt=\"triangle with equal sides\" srcset=\"equilateral.svg\">\n```\n##### 较新的浏览器会识别到上述的.svg图像，否则将显示.png图像\n>svg图像可以在img标签中被src引用，或是在css中\n```html\n<svg width=\"300\" height=\"200\">\n    <rect width=\"100%\" height=\"100%\" fill=\"green\" />\n</svg>\n```\n##### 也可以直接使用svg标签，此时被称为内联svg', '2018-11-21 14:43:50', 'html', 123, 2, 'Wed Nov 21 2018 06:43:50 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('自适应图片--分辨率切换', '```html\n<img srcset=\"elva-fairy-320w.jpg 320w,\n             elva-fairy-480w.jpg 480w,\n             elva-fairy-800w.jpg 800w\"\n     sizes=\"(max-width: 320px) 280px,\n            (max-width: 480px) 440px,\n            800px\"\n     src=\"elva-fairy-800w.jpg\" alt=\"Elva dressed as a fairy\">\n```\n#### srcset定义了我们允许浏览器选择的图像集，以及每个图像的大小。在每个逗号之前，我们写：\n\n##### 一个文件名 (elva-fairy-480w.jpg.)\n##### 一个空格\n##### 图像的固有宽度（以像素为单位）（480w）——注意到这里使用w单位，而不是你预计的px。这是图像的真实大小，可以通过检查你电脑上的图片文件找到（例如，在Mac上，你可以在Finder上选择这个图像，然后按 Cmd + I 来显示信息）。\n---\n#### sizes定义了一组媒体条件（例如屏幕宽度）并且指明当某些媒体条件为真时，什么样的图片尺寸是最佳选择—我们在之前已经讨论了一些提示。在这种情况下，在每个逗号之前，我们写：\n\n##### 一个媒体条件（(max-width:480px)）——你会在 CSS topic中学到更多的。但是现在我们仅仅讨论的是媒体条件描述了屏幕可能处于的状态。在这里，我们说“当视窗的宽度是480像素或更少”。\n##### 一个空格\n##### 当媒体条件为真时，图像将填充的槽的宽度（440px）\n```html\n<picture>\n  <source media=\"(max-width: 799px)\" srcset=\"elva-480w-close-portrait.jpg\">\n  <source media=\"(min-width: 800px)\" srcset=\"elva-800w.jpg\">\n  <img src=\"elva-800w.jpg\" alt=\"Chris standing up holding his daughter Elva\">\n</picture>\n```\n - ##### ```<source>```元素包含一个media属性，这一属性包含一个媒体条件——就像第一个srcset例子，这些条件来决定哪张图片会显示——第一个条件返回真，那么就会显示这张图片。在这种情况下，如果视窗的宽度为799px或更少，第一个```<source>```元素的图片就会显示。如果视窗的宽度是800px或更大，就显示第二张图片。\n- ##### srcset属性包含要显示图片的路径。请注意，正如我们在<img>上面看到的那样，```<source>```可以使用引用多个图像的srcset属性，还有sizes属性。所以你可以通过一个 ```<picture>```元素提供多个图片，不过也可以给每个图片提供多分辨率的图片。实际上，你可能不想经常做这样的事情。\n- ##### 在任何情况下，你都必须在 ```</picture>```之前正确提供一个```<img>```元素以及它的src和alt属性，否则不会有图片显示。当媒体条件都不返回真的时候（你可以在这个例子中删除第二个<source> 元素），它会提供图片；如果浏览器不支持 <picture>元素时，它可以作为后备方案。', '2018-11-21 15:10:05', 'html', 124, 2, 'Wed Nov 21 2018 07:10:05 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('阻止button的默认事件', '```javascript\naddContent(e){\n	e.preventDefault()\n}\n```', '2018-11-21 16:38:46', 'javascript', 132, 2, 'Wed Nov 21 2018 08:38:46 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('表格', '##### th：标题 \n#### th拓展```<th scope=\"value\">```\n##### value值\n|col|规定单元格列的表头。\n|-|-|-|\n|row|规定单元格是行的表头。\n|colgroup|规定单元格是列组的表头。|\n|rowgroup|	规定单元格是行组的表头。\n##### td：列\n##### tr：行\n##### ```colspan=\"2\"```使占据两个单元格的宽度\n##### ```rowspan=\"2\"```使占据两个单元格的高度\n```html\n<table>\n  <colgroup>\n    <col>\n    <col style=\"background-color: yellow\">\n  </colgroup>\n  <tr>\n    <th>Data 1</th>\n    <th>Data 2</th>\n  </tr>\n  <tr>\n    <td>Calcutta</td>\n    <td>Orange</td>\n  </tr>\n  <tr>\n    <td>Robots</td>\n    <td>Jazz</td>\n  </tr>\n</table>\n```\n##### 我们使用了两个 ```<col>```来定义“列的样式”，每一个```<col>```都会制定每列的样式，对于第一列，我们没有采取任何样式，但是我们仍然需要添加一个空的 ```<col>``` 元素，如果不这样做，那么我们的样式就会应用到第一列上，这和我们预想的不一样。\n```html\n<colgroup>\n  <col style=\"background-color: yellow\" span=\"2\">\n</colgroup>\n```\n##### span数值为2，就表示使两列变成这样的样式\n---\n##### ```<caption>```表示表格标题，写在```<table>```内\n - ##### ```<thead>``` 需要嵌套在 ```table``` 元素中，放置在头部的位置，因为它通常代表第一行，第一行中往往都是每列的标题，但是不是每种情况都是这样的。如果你使用了 ```<col>/<colgroup>``` 元素，那么 ```<thead>```元素就需要放在它们的下面。\n - ##### ```<tfoot>``` 需要嵌套在 ```table``` 元素中，放置在底部 (页脚)的位置，一般是最后一行，往往是对前面所有行的总结，比如，你可以按照预想的方式将```<tfoot>```放在表格的底部，或者就放在 ```<thead>``` 的下面。(浏览器仍将它呈现在表格的底部)\n - ##### ```<tbody>``` 需要嵌套在 ```table``` 元素中，放置在 ```<thead>```的下面或者是 ```<tfoot>``` 的下面，这取决于你如何设计你的结构。(```<tfoot>```放在```<thead>```下面也可以生效.)\n > 表格可以嵌套', '2018-11-22 09:38:26', 'html', 133, 2, 'Thu Nov 22 2018 01:38:26 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('表单', '>注意在所有```<label>```元素上使用```for```属性；它是将标签链接到表单小部件的一种正式方式。这个属性引用相应的小部件的```id```。这样做有一些好处。最明显的一个好处是允许用户单击标签以激活相应的小部件。\n\n>按钮或者提交表单的时候```event.preventDefault();```阻止默认事件\n\n```<input>```标签的```type```属性：\n- [input的各种type](http://www.w3school.com.cn/html5/html_5_form_attributes.asp)\n- [mdn](https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Forms/The_native_form_widgets)\n- text 默认，表示为单行文本\n- email 定义了只接受格式良好的邮箱格式\n```html\n<input type=\"date\" name=\"myDate\" value=\"2018-01-06\" id=\"myDate\">\n<!--选择时间-->\n<label for=\"beans\">How many beans can you eat?</label>\n<input type=\"range\" name=\"beans\" id=\"beans\" min=\"0\" max=\"500\" step=\"10\">\n<span class=\"beancount\"></span>\n<!--滑块选择值可以配合js\nvar beans = document.querySelector(\'#beans\');\nvar count = document.querySelector(\'.beancount\');\n\ncount.textContent = beans.value;\n\nbeans.oninput = function() {\n  count.textContent = beans.value;\n}\noninput 事件在用户输入时触发\n-->\n<input type=\"color\" name=\"color\" id=\"color\">\n<!--颜色选择器，除safiri外其他主流浏览器基本可以-->\n<input type=\"file\" name=\"file\" id=\"file\" accept=\"image/*\" multiple>\n<!--文件选择\n文件类型可以使用accept属性来约束。此外，如果您想让用户选择多个文件，那么可以通过添加multiple属性来实现。-->\n<input type=\"hidden\" id=\"timestamp\" name=\"timestamp\" value=\"1286705410\">\n<!--隐藏的\n设置它的name和value属性-->\n<input type=\"image\" alt=\"Click me!\" src=\"my-img.png\" width=\"80\" height=\"30\" />\n<!--图像按钮，会获取当前图片的x，y值-->\n```\n>==注意==：oninput 事件在元素值发生变化是立即触发， onchange 在元素失去焦点时触发。另外一点不同是 onchange 事件也可以作用于 ```<keygen>``` 和 ```<select>``` 元素\n\n```<input>```默认值写在value属性中如```<input type=\"text\" value=\"默认值\">```\n```<textarea>```默认值包含在标签内如```<textarea>默认值</textarea>```\n\n----\n## ```<button>```\n##### 表单的提交需要用到按钮\n```html\n<div class=\"button\">\n<button type=\"submit\">Send your message</button>\n</div>\n```\n```<button>```标签的```type```属性：\n- 单击 ```submit``` 按钮 发送表单的数据到```<form>```元素的```action``` 属性所定义的网页。\n- 单击 ```reset``` 按钮 将所有表单小部件重新设置为它们的默认值。从用户体验的角度来看，这被认为是一种糟糕的做法。\n- 单击```button``` 按钮……不会发生任何事！这听起来很傻，但是用```JavaScript```构建定制按钮非常有用。 \n\n---\n## ```<fieldset>``` 和 ```<legend>``` 元素\n```html\n<form>\n  <fieldset>\n    <legend>Fruit juice size</legend>\n    <p>\n      <input type=\"radio\" name=\"size\" id=\"size_1\" value=\"small\">\n      <label for=\"size_1\">Small</label>\n    </p>\n    <p>\n      <input type=\"radio\" name=\"size\" id=\"size_2\" value=\"medium\">\n      <label for=\"size_2\">Medium</label>\n    </p>\n    <p>\n      <input type=\"radio\" name=\"size\" id=\"size_3\" value=\"large\">\n      <label for=\"size_3\">Large</label>\n    </p>\n  </fieldset>\n</form>\n```\n>单选表单建议使用\n\n---\n## 多行文本域\n```css\ntextarea.example {\n  resize: none; /* disables resizability */\n}\n```\n##### 让```textarea```不可随意放大缩小，```example```为class属性内的值\n---\n## 选择框```<select>```\n```html\n<select id=\"groups\" name=\"groups\">\n  <optgroup label=\"fruits\">\n    <option>Banana</option>\n    <option selected>Cherry</option>\n    <option>Lemon</option>\n  </optgroup>\n  <optgroup label=\"vegetables\">\n    <option>Carrot</option>\n    <option>Eggplant</option>\n    <option>Potato</option>\n  </optgroup>\n</select>\n<!-- <option>内为可选元内容\n     selectde表示默认选中\n     multiple可以选择多个值，在多个选项选择框的情况下，选择框不再显示值为下拉内容——相反，它们都显示在一个列表中\n -->\n```\n\n- ##### 如果一个```<option>```元素设置了```value```属性，那么当提交表单时该属性的值就会被发送。如果忽略了```value```属性，则使用```<option>```元素的内容作为选择框的值。\n\n- ##### 在```<optgroup>```元素中，```label```属性显示在值之前，但即使它看起来有点像一个选项，它也不是可选的。\n\n```html\n<label for=\"myFruit\">What\'s your favorite fruit?</label>\n<input type=\"text\" name=\"myFruit\" id=\"myFruit\" list=\"mySuggestion\">\n<datalist id=\"mySuggestion\">\n  <option>Apple</option>\n  <option>Banana</option>\n  <option>Blackberry</option>\n  <option>Blueberry</option>\n  <option>Lemon</option>\n  <option>Lychee</option>\n  <option>Peach</option>\n  <option>Pear</option>\n</datalist>\n<!--使用list属性将数据列表绑定到一个文本域(通常是一个 <input> 元素)。-->\n<label for=\"myFruit\">What is your favorite fruit? (With fallback)</label>\n<input type=\"text\" id=\"myFruit\" name=\"fruit\" list=\"fruitList\">\n    \n<datalist id=\"fruitList\">\n  <label for=\"suggestion\">or pick a fruit</label>\n  <select id=\"suggestion\" name=\"altFruit\">\n    <option>Apple</option>\n    <option>Banana</option>\n    <option>Blackberry</option>\n    <option>Blueberry</option>\n    <option>Lemon</option>\n    <option>Lychee</option>\n    <option>Peach</option>\n    <option>Pear</option>\n  </select>\n</datalist>\n<!--防止某些浏览器不支持<datalist>标签-->\n```\n## 复选框\n##### 使用type属性值为checkbox的 ```<input>```元素来创建一个复选框。\n```html\n<input type=\"checkbox\" checked id=\"carrots\" name=\"carrots\" value=\"carrots\">\n```\n>包含checked属性使复选框在页面加载时自动被选中。\n---\n## 单选按钮\n##### 使用type属性值为radio的 <input>元素来创建一个单选按钮。\n```html\n<input type=\"radio\" checked id=\"soup\" name=\"meal\">\n\n<fieldset>\n  <legend>What is your favorite meal?</legend>\n  <ul>\n    <li>\n      <label for=\"soup\">Soup</label>\n      <input type=\"radio\" checked id=\"soup\" name=\"meal\" value=\"soup\">\n    </li>\n    <li>\n      <label for=\"curry\">Curry</label>\n      <input type=\"radio\" id=\"curry\" name=\"meal\" value=\"curry\">\n    </li>\n    <li>\n      <label for=\"pizza\">Pizza</label>\n      <input type=\"radio\" id=\"pizza\" name=\"meal\" value=\"pizza\">\n    </li>\n  </ul>\n</fieldset>\n```\n>几个单选按钮可以连接在一起。如果它们的==name==属性共享相同的值，那么它们将被认为属于同一组的按钮。同一组中只有一个按钮可以同时被选；这意味着当其中一个被选中时，所有其他的都将自动未选中。如果没有选中任何一个，那么整个单选按钮池就被认为处于未知状态，并且没有以表单的形式发送任何值。\n\n## 仪表和进度条\n```html\n<progress max=\"100\" value=\"75\">75/100</progress>\n```', '2018-11-22 10:52:29', 'html', 134, 2, 'Thu Nov 22 2018 02:52:29 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('上传文件至服务器', '#### 用HTML表单发送文件是一个特殊的例子。文件是二进制数据——或者被认为是这样的——而所有其他数据都是文本数据。由于HTTP是一种文本协议，所以处理二进制数据有特殊的要求。\n\n## ```enctype``` 属性节\n##### 该属性允许您指定在提交表单时所生成的请求中的``` Content-Type``` 的``` HTTP``` 数据头的值。这个数据头非常重要，因为它告诉服务器正在发送什么样的数据。默认情况下，它的值是``` application/x-www-form-urlencoded``` 。它的意思是：“这是已编码为URL参数的表单数据。”\n\n## 如果你想要发送文件，你需要额外的三个步骤：\n\n- ##### 将method属性设置为POST，因为文件内容不能放入URL参数中。\n- ##### 将enctype的值设置为multipart/form-data，因为数据将被分成多个部分，每个文件分别对应一个文件以及表单正文中包含的文本数据(如果文本也输入到表单中)。\n- ##### 包含一个或多个File picker小部件，允许用户选择将要上传的文件。\n### 例如：\n```html\n<form method=\"post\" enctype=\"multipart/form-data\">\n  <div>\n    <label for=\"file\">Choose a file</label>\n    <input type=\"file\" id=\"file\" name=\"myFile\">\n  </div>\n  <div>\n    <button>Send the file</button>\n  </div>\n</form>\n```\n>注意：一些浏览器支持```<input>```的```multiple```属性，它允许选择一个以上的文件上传，但只使用一个 ```<input>``` 元素。服务器如何处理这些文件取决于服务器上使用的技术。如前所述，使用框架将使您的生活更轻松。\n\n>警告：为了防止滥用，许多服务器配置了文件和HTTP请求的大小限制。在发送文件之前，先检查服务器管理员的权限是很重要的。', '2018-11-25 13:03:01', 'html', 135, 2, 'Sun Nov 25 2018 05:03:01 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('表单验证', '## ```required``` 属性节\n##### 最简单的```HTML5```验证功能是 ```required```属性 — 如果要使输入成为必需的，则可以使用此属性标记元素。 当设置此属性时，如输入为空（输入也将被视为无效），该表单将不会提交（并将显示错误消息）。\n\n##### 添加一个 ```required``` 属性到``` input``` 元素, 如下所示:\n```html\n<form>\n  <label for=\"choose\">Would you prefer a banana or cherry?</label>\n  <input id=\"choose\" name=\"i_like\" required>\n  <button>Submit</button>\n</form>\n```\n##### 同时注意在示例文件中包含的 CSS :\n```css\ninput:invalid {\n  border: 2px dashed red;\n}\ninput:valid {\n  border: 2px solid black;\n}\n```\n>以上样式效果为：在验证失败时 input 元素会有一个亮红色的虚线边框, 在验证通过时会有一个更微妙的黑色边框\n---\n## 使用正则表达式验证\n##### 另一个常用的验证功能是 ```pattern``` 属性, 以 ```Regular Expression``` 作为 ```value``` 值. \n```html\n<form>\n  <label for=\"choose\">Would you prefer a banana or a cherry?</label>\n  <input id=\"choose\" name=\"i_like\" required pattern=\"banana|cherry\">\n  <button>Submit</button>\n</form>\n<!--该表单只能匹配字符 banana或者cherry-->\n```\n>注意: 一些 ```<input> ```元素类型不需要```pattern``` 属性进行验证. 指定特定 ```email``` 类型 就会使用匹配电子邮件格式的正则表达式来校验(如果有 ```multiple``` 属性请用逗号来分割多个邮箱). 进一步来说, 字段``` url ```类型则会自动校验输入的是否为一个合法的链接.\n注意:  ```<textarea>``` 元素不支持```pattern``` 属性.\n---\n## 强制条目的长度\n##### 所有文本框 ```(<input> 或 <textarea>)``` 可以强制使用```minlength``` 和 ```maxlength``` 属性. 如果值小于该字段 ```minlength``` 的值或大于 ```maxlength``` 值则无效. 浏览器通常不会组织用户在文本字段中输入比预期更长的值，但是可以使用这种细粒度的控件来强制。\n\n##### 在数字条目中 ```(i.e. <input type=\"number\">)```, 该 ```min``` 和 ```max``` 属性也能强制验证长度. 如何条目中的长度小于```min``` 属性提供的值或大于 ```max``` 属性的值,该条目则无效.\n```html\n<form>\n  <div>\n    <label for=\"choose\">Would you prefer a banana or a cherry?</label>\n    <input id=\"choose\" name=\"i_like\" required minlength=\"6\" maxlength=\"6\">\n  </div>\n  <div>\n    <label for=\"number\">How many would you like?</label>\n    <input type=\"number\" id=\"number\" name=\"amount\" value=\"1\" min=\"1\" max=\"10\">\n  </div>\n  <div>\n    <button>Submit</button>\n  </div>\n</form>\n```\n---\n## 自定义错误信息\nhtml\n```html\n<form>\n  <label for=\"mail\">I would like you to provide me an e-mail</label>\n  <input type=\"email\" id=\"mail\" name=\"mail\">\n  <button>Submit</button>\n</form>\n```\njavascript,调用 [setCustomValidity()](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Constraint_API\'s_element.setCustomValidity()) 方法:\n[使用 JavaScript校验表单](https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Forms/Data_form_validation#%E4%BD%BF%E7%94%A8_JavaScript%E6%A0%A1%E9%AA%8C%E8%A1%A8%E5%8D%95)\n```javascript\nvar email = document.getElementById(\"mail\");\n\nemail.addEventListener(\"input\", function (event) {\n  if (email.validity.typeMismatch) {\n    email.setCustomValidity(\"I expect an e-mail, darling!\");\n  } else {\n    email.setCustomValidity(\"\");\n  }\n});\n```', '2018-11-25 14:10:01', 'html', 136, 2, 'Sun Nov 25 2018 06:10:01 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('事件输入流', '### 输入框发生的事件流程依次为focus、keydown、input、keyup、change与blur\n![流程](https://img-blog.csdn.net/20160830184316707)', '2018-11-25 15:34:59', 'html', 137, 2, 'Sun Nov 25 2018 07:35:00 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('样式化表单使得长宽一致', '```css\ninput, textarea, select, button {\n  width : 150px;\n  margin: 0;\n\n  -webkit-box-sizing: border-box; /* For legacy WebKit based browsers */\n     -moz-box-sizing: border-box; /* For legacy (Firefox <29) Gecko based browsers */\n          box-sizing: border-box;\n}\n```', '2018-11-26 15:18:30', 'css', 138, 2, 'Mon Nov 26 2018 07:18:30 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('DOM--addEventListener()', '### 如果浏览器不支持 ```addEventListener()``` 方法, 你可以使用 ```attachEvent()```方法替代。\n```javascript\nvar x = document.getElementById(\"myBtn\");\nif (x.addEventListener) {                    //所有主流浏览器，除了 IE 8 及更早 IE版本\n    x.addEventListener(\"click\", myFunction);\n} else if (x.attachEvent) {                  // IE 8 及更早 IE 版本\n    x.attachEvent(\"onclick\", myFunction);\n}\n//添加按钮点击执行的方法\n```\n```javascript\nelement.removeEventListener(\"mousemove\", myFunction);\n//移除鼠标移动执行的方法\n//如果浏览器不支持\nelement.detachEvent(event, function);\n```', '2018-12-02 16:03:03', 'mysql', 140, 2, 'Sun Dec 02 2018 08:03:03 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('DOM--stopPropagation()--不再派发事件，阻止冒泡事件', '### 终止事件在传播过程的捕获、目标处理或起泡阶段进一步传播。调用该方法后，该节点上处理该事件的处理程序将被调用，事件不再被分派到其他节点。\n```event.stopPropagation()```\n>该方法将停止事件的传播，阻止它被分派到其他 Document 节点。在事件传播的任何阶段都可以调用它。注意，虽然该方法不能阻止同一个 Document 节点上的其他事件句柄被调用，但是它可以阻止把事件分派到其他节点。\n##### ```event.stopPropagation```，其阻止了当前事件在 ==DOM== 的进一步冒泡行为。请注意，表本身有一个 ==onclick== 事件处理程序，当表被点击时其会显示一条消息。但 ==stopEvent== 方法已经阻止了冒泡，所以在表中的数据更新后，该事件事件阶段有效地结束```（effectively ended）```，并且显示一个警告框——证实了有效结束。\n##### 例子，可尝试\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Event Propagation</title>\n\n<style type=\"text/css\">\n #t-daddy { border: 1px solid red }\n #c1 { background-color: pink; }\n</style>\n\n<script type=\"text/javascript\">\n\nfunction stopEvent(ev) {\n  c2 = document.getElementById(\"c2\");\n  c2.innerHTML = \"hello\";\n\n  // this ought to keep t-daddy from getting the click.\n  ev.stopPropagation();\n  //可以去掉ev.stopPropagation();尝试一下\n  alert(\"event propagation halted.\");\n}\n\nfunction load() {\n  elem = document.getElementById(\"tbl1\");\n  elem.addEventListener(\"click\", stopEvent, false);\n}\n</script>\n</head>\n\n<body onload=\"load();\">\n\n<table id=\"t-daddy\" onclick=\"alert(\'hi\');\">\n <tr id=\"tbl1\">\n  <td id=\"c1\">one</td>\n </tr>\n <tr>\n  <td id=\"c2\">two</td>\n </tr>\n</table>\n\n</body>\n</html>\n```', '2018-12-02 20:05:37', 'mysql', 141, 2, 'Sun Dec 02 2018 12:05:38 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('DOM--document.defaultView.getComputedStyle--获取对象的css样式内容', '### 使用：```document.defaultView.getComputedStyle(a, b);```\n- ##### a这对象是要想要获取的对象。\n- ##### b,伪类，若果不是则为null。\n```css\ndiv{     width: 100px;     font-size: 15px; }\n```\n```html\n<div>遇见他，她变得很低很低，低到尘里，可她心里是欢喜的，从尘埃里开出花来</div>\n```\n```javascript\nvar d=document.getElementsByTagName(\"div\")[0]; \nconsole.log(document.defaultView.getComputedStyle(d,null).height); \nconsole.log(document.defaultView.getComputedStyle(d,null).fontSize);\n```\n### 一个好的例子\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\n<title>getComputedStyle example</title>\n\n<script>\nfunction cStyles() {\n  var RefDiv    = document.getElementById(\"d1\");\n  var txtHeight = document.getElementById(\"t1\");\n  var h_style   = document.defaultView.getComputedStyle(RefDiv, null).getPropertyValue(\"height\");\n  \n  txtHeight.value = h_style;\n\n  var txtWidth = document.getElementById(\"t2\");\n  var w_style  = document.defaultView.getComputedStyle(RefDiv, null).getPropertyValue(\"width\");\n  \n  txtWidth.value = w_style;\n\n  var txtBackgroundColor = document.getElementById(\"t3\");\n  var b_style = document.defaultView.getComputedStyle(RefDiv,null).getPropertyValue(\"background-color\");\n\n  txtBackgroundColor.value = b_style;\n}\n</script>\n\n<style>\n#d1 { \n  margin-left: 10px; \n  background-color: rgb(173, 216, 230); \n  height: 20px; \n  max-width: 20px; }\n</style>\n\n</head>\n\n<body>\n\n<div id=\"d1\">&nbsp;</div>\n\n<form action=\"\">\n  <p>\n    <button type=\"button\" onclick=\"cStyles();\">getComputedStyle</button>\n    height<input id=\"t1\" type=\"text\" value=\"1\">\n    max-width<input id=\"t2\" type=\"text\" value=\"2\">\n    bg-color<input id=\"t3\" type=\"text\" value=\"3\"></p>\n</form>\n\n</body>\n</html>\n```', '2018-12-02 20:19:05', 'mysql', 142, 2, 'Sun Dec 02 2018 12:19:05 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('DOM--DOM操作table接口', '```html\n<table id=\"table0\">\n <tr>\n  <td>Row 0 Cell 0</td>\n  <td>Row 0 Cell 1</td>\n </tr>\n</table>\n\n<script>\n\nvar table = document.getElementById(\'table0\');\nvar row = table.insertRow(-1);\nvar cell,\n    text;\n\nfor (var i=0; i<2; i++) {\n  cell = row.insertCell(-1);\n  //在表的尾部添加新的行，数值为0则是在头部\n  text = \'Row \' + row.rowIndex + \' Cell \' + i;\n  cell.appendChild(document.createTextNode(text));\n}\n</script>\n```\n[DOM操作TABLE](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement#Methods)', '2018-12-03 15:02:31', 'mysql', 143, 2, 'Mon Dec 02 2018 07:02:31 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('DOM--动态创建DOM树', '```xml\n<?xml version=\"1.0\"?>\n<people>\n  <person first-name=\"eric\" middle-initial=\"H\" last-name=\"jung\">\n    <address street=\"321 south st\" city=\"denver\" state=\"co\" country=\"usa\"/>\n    <address street=\"123 main st\" city=\"arlington\" state=\"ma\" country=\"usa\"/>\n  </person>\n\n  <person first-name=\"jed\" last-name=\"brown\">\n    <address street=\"321 north st\" city=\"atlanta\" state=\"ga\" country=\"usa\"/>\n    <address street=\"123 west st\" city=\"seattle\" state=\"wa\" country=\"usa\"/>\n    <address street=\"321 south avenue\" city=\"denver\" state=\"co\" country=\"usa\"/>\n  </person>\n</people>\n```\n### 可用如下dom操作实现\n```javascript\nvar doc = document.implementation.createDocument(\"\", \"\", null);\nvar peopleElem = doc.createElement(\"people\");\n\nvar personElem1 = doc.createElement(\"person\");\npersonElem1.setAttribute(\"first-name\", \"eric\");\npersonElem1.setAttribute(\"middle-initial\", \"h\");\npersonElem1.setAttribute(\"last-name\", \"jung\");\n\nvar addressElem1 = doc.createElement(\"address\");\naddressElem1.setAttribute(\"street\", \"321 south st\");\naddressElem1.setAttribute(\"city\", \"denver\");\naddressElem1.setAttribute(\"state\", \"co\");\naddressElem1.setAttribute(\"country\", \"usa\");\npersonElem1.appendChild(addressElem1);\n\nvar addressElem2 = doc.createElement(\"address\");\naddressElem2.setAttribute(\"street\", \"123 main st\");\naddressElem2.setAttribute(\"city\", \"arlington\");\naddressElem2.setAttribute(\"state\", \"ma\");\naddressElem2.setAttribute(\"country\", \"usa\");\npersonElem1.appendChild(addressElem2);\n\nvar personElem2 = doc.createElement(\"person\");\npersonElem2.setAttribute(\"first-name\", \"jed\");\npersonElem2.setAttribute(\"last-name\", \"brown\");\n\nvar addressElem3 = doc.createElement(\"address\");\naddressElem3.setAttribute(\"street\", \"321 north st\");\naddressElem3.setAttribute(\"city\", \"atlanta\");\naddressElem3.setAttribute(\"state\", \"ga\");\naddressElem3.setAttribute(\"country\", \"usa\");\npersonElem2.appendChild(addressElem3);\n\nvar addressElem4 = doc.createElement(\"address\");\naddressElem4.setAttribute(\"street\", \"123 west st\");\naddressElem4.setAttribute(\"city\", \"seattle\");\naddressElem4.setAttribute(\"state\", \"wa\");\naddressElem4.setAttribute(\"country\", \"usa\");\npersonElem2.appendChild(addressElem4);\n\nvar addressElem5 = doc.createElement(\"address\");\naddressElem5.setAttribute(\"street\", \"321 south avenue\");\naddressElem5.setAttribute(\"city\", \"denver\");\naddressElem5.setAttribute(\"state\", \"co\");\naddressElem5.setAttribute(\"country\", \"usa\");\npersonElem2.appendChild(addressElem5);\n\npeopleElem.appendChild(personElem1);\npeopleElem.appendChild(personElem2);\ndoc.appendChild(peopleElem);\n```\n### 示例\n```html\n<head>\n<title>样例代码 - 使用 JavaScript 和 DOM 接口创建一个 HTML 表格</title>\n<script>\n    function start() {\n        // 获得从body的引用\n        var mybody=document.getElementsByTagName(\"body\").item(0);\n        // 创建一个TABLE的元素\n        var mytable = document.createElement(\"TABLE\");\n        // 创建一个TBODY的元素\n        var mytablebody = document.createElement(\"TBODY\");\n        // 创建所有的单元格\n        for(j=0;j<2;j++) {\n            // 创建一个TR元素\n          var  mycurrent_row=document.createElement(\"TR\");\n            for(i=0;i<2;i++) {\n                // 创建一个TD元素\n              var  mycurrent_cell=document.createElement(\"TD\");\n                // 创建一个文本（text）节点\n              var  currenttext=document.createTextNode(\"cell is row \"+j+\", column \"+i);\n                // 将我们创建的这个文本节点添加在TD元素里\n                mycurrent_cell.appendChild(currenttext);\n                // 将TD元素添加在TR里\n                mycurrent_row.appendChild(mycurrent_cell);\n            }\n            // 将TR元素添加在TBODY里\n            mytablebody.appendChild(mycurrent_row);\n        }\n        // 将TBODY元素添加在TABLE里\n        mytable.appendChild(mytablebody);\n        // 将TABLE元素添加在BODY里\n        mybody.appendChild(mytable);\n        // 设置mytable的边界属性border为2\n        mytable.setAttribute(\"border\",\"2\");\n    }\n</script>\n</head>\n<body onload=\"start()\">\n</body>\n</html>\n```\n### 使用```document.createTextNode(..)```创建文本节点\n使用文档对象来调用一个```createTextNode```方法并创建你自己的文本节点。你只需要传递文字内容给这个函数。返回的值就是一个展示那个文本节点信息的对象。\n```javascript\nmyTextNode=document.createTextNode(\"world\");\n```\n##### 这表示你已经创建了一个TEXT——NODE（一个文字片断）类型的节点，并且它的内容是“world”，任何你对myTextNode的引用都指向这个节点对象。如果想将这个文本插入到HTML页面中，你还需要将它作为其他节点元素的子元素。\n### 使用```appendChild(..)```插入元素\n那么，通过调用```myP.appendChild([node_element])```你可以将这个元素设置成为第二个P的一个新的子元素。\n```javascript\nmyP.appendChild(myTextNode);\n```\n### 如果是想向末尾节点之前添加新元素的话，不可以使用```appendChild()```，而是使用insertBefore\n```html\n<!DOCTYPE html>\n<html>\n<body>\n\n<ul id=\"myList\"><li>Coffee</li><li>Tea</li></ul>\n\n<p id=\"demo\">请点击按钮向列表插入一个项目。</p>\n\n<button onclick=\"myFunction()\">试一下</button>\n\n<script>\nfunction myFunction()\n{\nvar newItem=document.createElement(\"LI\")\nvar textnode=document.createTextNode(\"Water\")\nnewItem.appendChild(textnode)\n\nvar list=document.getElementById(\"myList\")\nlist.insertBefore(newItem,list.childNodes[1]);\n}\n</script>\n\n<p><b>注释：</b><br>首先请创建一个 LI 节点，<br>然后创建一个文本节点，<br>然后向这个 LI 节点追加文本节点。<br>最后在列表中的首个子节点之前插入此 LI 节点。</p>\n\n</body>\n</html>\n```\n### 使用文档对象和```createElement(..)```方法创建新的元素\n##### 你可以使用createElement来创建新的HTML元素或者任何其它你想要的元素。比如，如果你想要创建一个新的P作为BODY的子元素，你可以使用前面例子的myBody并给它接上一个新的元素节点。使用 document.createElement(\"tagname\")可以方便的创建一个节点。如下：\n```javascript\nmyNewPTAGnode=document.createElement(\"p\");\nmyBody.appendChild(myNewPTAGnode);\n```\n### 使用```removeChild(..)```方法移除节点\n每一个节点都可以被移除.下面的一行代码移除了包含在myP(第二个p元素)下面的文本节点world。\n```javascript\nmyP.removeChild(myTextNode);\n```\n### 使用```setAttribute(\"属性名\",\"值\")```来设置属性\n```javascript\nmytable.setAttribute(\"border\",\"2\");\n```\n```javascript\nmytable.getAttribute(\"border\");\n//获取该属性的值\n```\n### 使用```childNodes```属性来获得孩子节点列表。childNodes列表包括所有的孩子节点，无论它们的名称或类型是什么\n```html\n<!DOCTYPE html>\n<html>\n<body><p id=\"demo\">请点击按钮来获得 body 元素子节点的相关信息。</p>\n\n<button onclick=\"myFunction()\">试一下</button>\n\n<script>\nfunction myFunction()\n{\nvar txt=\"\";\nvar c=document.body.childNodes;\nfor (i=0; i<c.length; i++)\n  {\n  txt=txt + c[i].nodeName + \"<br>\";\n  };\nvar x=document.getElementById(\"demo\");  \nx.innerHTML=txt;\n}\n</script>\n\n<p><b>注释：</b>元素中的空格被视为文本，而文本被视为节点。</p>\n\n</body>\n</html>\n```\n>注意，空白字符或者换行之类都会被判定为一个节点\n>如果你的对象是一个文字节点，你可以使用data属性来回收（retrieve）节点的文字内容\n```javascript\n// mycel的孩子节点列表的第一个元素\nmyceltext=mycel.childNodes.item(0);\n// currenttext的内容是myceltext的内容\ncurrenttext=document.createTextNode(myceltext.data);\n```\n### ```parentNode```获取父节点\n### ```firstChild```该节点下的第一个子节点', '2018-12-03 15:07:13', 'mysql', 144, 2, 'Mon Dec 02 2018 07:07:15 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('DOM--使用选择器定位DOM元素', '```querySelector```\n##### 返回节点子树内与之相匹配的第一个 Element 节点。如果没有匹配的节点，则返回null。\n```querySelectorAll```\n##### 返回一个NodeList  包含节点子树内所有与之相匹配的Element节点，如果没有相匹配的，则返回一个空节点列表。\n---\n#### 选择器方法接受一个或多个逗号分隔的选择器来确定应该返回哪些元素。\n\n##### 例如，要选择文档中所有CSS的类(class)是warning或者note的段落(p)元素,可以这样写：\n```javascript\nvar special = document.querySelectorAll( \"p.warning, p.note\" );\n```\n##### 也可以通过ID来查询，例如：\n```javascript\nvar el = document.querySelector( \"#main, #basic, #exclamation\" );\n```\n##### 执行上面的代码后，el就包含了文档中元素的ID是main，basic或exclamation的所有元素中的第一个元素。\n\n```querySelector()``` and ```querySelectorAll()``` 里可以使用任何CSS选择器。', '2018-12-03 15:16:17', 'mysql', 145, 2, 'Mon Dec 03 2018 07:16:18 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('DOM--当使用childNodes获取节点下子节点时当注意事项', '# DOM中的空白符\n##### 当使用childNodes获取节点下子节点的时候。无论节点类型是什么都会算一个子节点，也就是说，可能存在的空白字符，文本，换行等等诸如此类都会算是一个节点\n### 基本上获取节点也很少是如此，但是当需要用到的时候解决方法如下\n```javascript\nfunction cleanWhitespace(element) \n{ \n	for(var i=0; i<element.childNodes.length; i++) \n	{ \n		var node = element.childNodes[i]; \n		if(node.nodeType == 3 && !/\\S/.test(node.nodeValue)) \n		{ \n			node.parentNode.removeChild(node); \n		} \n	} \n} \n```\n```html\n<html>\n<head><title>DOM Test</title></head>\n<body>\n<table> \n	<tr> \n	<td id=\"TEST\">\n		<input type=\"submit\" value=\"确定\"/>\n		<input type=\"button\" value=\"取消\"/>\n	</td>\n	</tr> \n</table>\n \n<script type=\"text/javascript\">\n<!--\n	var td = document.getElementById(\"TEST\");\n	alert(td.childNodes.length);	//结果为4 \n-->\n</script>\n \n</body>\n</html>\n```\n处理结点```cleanWhitespace(document.getElementById(\"TEST\"))```后,OK,解决 ', '2018-12-04 15:49:35', 'mysql', 146, 2, 'Tue Dec 04 2018 07:49:37 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('DOM--nodeType--获取元素节点类型', '<div>\n<h2>Node Types</h2>\n\n<p>文档、元素、属性以及 HTML 或 XML 文档的其他方面拥有不同的节点类型。</p>\n\n<p>存在 12 种不同的节点类型，其中可能会有不同节点类型的子节点：</p>\n\n<table class=\"dataintable\">\n<tr>\n<th colspan=\"2\">节点类型</th>\n<th>描述</th>\n<th>子节点</th>\n</tr>\n\n<tr>\n<td style=\"width:5%;\">1</td>\n<td style=\"width:25%;\">Element</td>\n<td style=\"width:35%;\">代表元素</td>\n<td>Element, Text, Comment, ProcessingInstruction, CDATASection, EntityReference</td>\n</tr>\n\n<tr>\n<td>2</td>\n<td>Attr</td>\n<td>代表属性</td>\n<td>Text, EntityReference</td>\n</tr>\n\n<tr>\n<td>3</td>\n<td>Text</td>\n<td>代表元素或属性中的文本内容。</td>\n<td>None</td>\n</tr>\n\n<tr>\n<td>4</td>\n<td>CDATASection</td>\n<td>代表文档中的 CDATA 部分（不会由解析器解析的文本）。</td>\n<td>None</td>\n</tr>\n\n<tr>\n<td>5</td>\n<td>EntityReference</td>\n<td>代表实体引用。</td>\n<td>Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference</td>\n</tr>\n\n<tr>\n<td>6</td>\n<td>Entity</td>\n<td>代表实体。</td>\n<td>Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference</td>\n</tr>\n\n<tr>\n<td>7</td>\n<td>ProcessingInstruction</td>\n<td>代表处理指令。</td>\n<td>None</td>\n</tr>\n\n<tr>\n<td>8</td>\n<td>Comment</td>\n<td>代表注释。</td>\n<td>None</td>\n</tr>\n\n<tr>\n<td>9</td>\n<td>Document</td>\n<td>代表整个文档（DOM 树的根节点）。</td>\n<td>Element, ProcessingInstruction, Comment, DocumentType</td>\n</tr>\n\n<tr>\n<td>10</td>\n<td>DocumentType</td>\n<td>向为文档定义的实体提供接口</td>\n<td>None</td>\n</tr>\n\n<tr>\n<td>11</td>\n<td>DocumentFragment</td>\n<td>代表轻量级的 Document 对象，能够容纳文档的某个部分</td>\n<td>Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference</td>\n</tr>\n\n<tr>\n<td>12</td>\n<td>Notation</td>\n<td>代表 DTD 中声明的符号。</td>\n<td>None</td>\n</tr>\n</table>\n</div>\n', '2018-12-04 15:52:46', 'mysql', 147, 2, 'Tue Dec 04 2018 07:52:46 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('CSS选择器', '# 简单选择器\n#### 类型元素选择器\n```css\n/* All p elements are red */\np {\n  color: red;\n}\n\n/* All div elements are blue */\ndiv {\n  color: blue;\n}\n```\n#### 类（class）选择器\n```css\n/* The element with the class \"first\" is bolded \n选取当是class的名称\n*/\n.first {\n  font-weight: bold;\n}\n\n/* All the elements with the class \"done\" are strike through */\n.done {\n  text-decoration: line-through;\n}\n```\n#### ID选择器\n```css\n#polite {\n  font-family: cursive;\n}\n\n#rude {\n  font-family: monospace;\n  text-transform: uppercase;\n}\n```\n#### 通用选择器\n```css\n* {\n  padding: 5px;\n  border: 1px solid black;\n  background: rgba(255,0,0,0.25)\n}\n/* 给所有的元素相同的规则 */\n```\n---\n# 属性选择器\n>属性选择器是一种特殊类型的选择器，它根据元素的 属性 和属性值来匹配元素。它们的通用语法由方括号 ([]) 组成，其中包含属性名称，后跟可选条件以匹配属性的值。 属性选择器可以根据其匹配属性值的方式分为两类： 存在和值属性选择器和子串值属性选择器。\n#### 存在和值（Presence and value）属性选择器\n这些属性选择器尝试匹配精确的属性值：\n- ```[attr]```：该选择器选择包含 attr 属性的所有元素，不论 attr 的值为何。\n- ```[attr=val]```：该选择器仅选择 attr 属性被赋值为 val 的所有元素。\n- ```[attr~=val]```：该选择器仅选择具有 attr 属性的元素，而且要求 val 值是 attr 值包含的被空格分隔的取值列表里中的一个。\n```css\n/* 所有具有\"data-vegetable\"属性的元素将被应用绿色的文本颜色 */\n[data-vegetable] {\n  color: green\n}\n\n/* 所有具有\"data-vegetable\"属性且属性值刚好为\"liquid\"的元素将被应用金色的背景颜色 */\n[data-vegetable=\"liquid\"] {\n  background-color: goldenrod;\n}\n\n/* 所有具有\"data-vegetable\"属性且属性值包含\"spicy\"的元素，\n即使元素的属性中还包含其他属性值，都会被应用红色的文本颜色 */\n[data-vegetable~=\"spicy\"] {\n  color: red;\n}\n```\n#### 子串值（Substring value）属性选择器节\n这种情况的属性选择器也被称为“伪正则选择器”，因为它们提供类似 regular expression 的灵活匹配方式（但请注意，这些选择器并不是真正的正则表达式）：\n\n- ```[attr|=val]``` : 选择attr属性的值是 val 或值以 val- 开头的元素（注意，这里的 “-” 不是一个错误，这是用来处理语言编码的）。\n- ```[attr^=val]``` : 选择attr属性的值以 val 开头（包括 val）的元素。\n- ```[attr$=val]``` : 选择attr属性的值以 val 结尾（包括 val）的元素。\n- ```[attr*=val]``` : 选择attr属性的值中包含子字符串 val 的元素（一个子字符串就是一个字符串的一部分而已，例如，”cat“ 是 字符串 ”caterpillar“ 的子字符串）。\n```css\n/* 语言选择的经典用法 */\n[lang|=\"fr\"] {\n  font-weight: bold;\n}\n\n/* \n    具有\"data-vegetable\"属性含有值\"not spicy\"的所有元素,都变回绿色\n*/\n[data-vegetable*=\"not spicy\"] {\n  color: green;\n}\n\n/* \n   具有\"data-quantity\"属性其值以\"kg\"结尾的所有元素*/\n[data-quantity$=\"kg\"] {\n  font-weight: bold;\n}\n\n/* \n   具有属性\"data-quantity\"其值以\"optional\"开头的所有元素 \n*/\n[data-quantity^=\"optional\"] {\n  opacity: 0.5;\n}\n```\n# 伪类或伪元素\n#### 伪类\n>一个 CSS  伪类（pseudo-class） 是一个以冒号(:)作为前缀，被添加到一个选择器末尾的关键字，当你希望样式在特定状态下才被呈现到指定的元素时，你可以往元素的选择器后面加上对应的伪类（pseudo-class）。你可能希望某个元素在处于某种状态下呈现另一种样式，例如当鼠标悬停在元素上面时，或者当一个复选框被禁用或被勾选时，又或者当一个元素是它在 DOM 树中父元素的第一个子元素时。\n```css\n/* 这些样式将在任何情况下应用于我们\n的链接 */\n\na {\n  color: blue;\n  font-weight: bold;\n}\n\n/* 我们想让被访问过的链接和未被访问\n的链接看起来一样 */\n\na:visited {\n  color: blue;\n}\n\n/* 当光标悬停于链接，键盘激活或锁定\n链接时，我们让链接呈现高亮 */\n\na:hover,\na:active,\na:focus {\n  color: darkred;\n  text-decoration: none;\n}\n```\n#### 伪元素\n>伪元素（Pseudo-element）跟伪类很像，但它们又有不同的地方。它们都是关键字，但这次伪元素前缀是两个冒号 (::) ， 同样是添加到选择器后面去选择某个元素的某个部分。\n```html\n<ul>\n  <li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/CSS\">CSS</a> defined in the MDN glossary.</li>\n  <li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/HTML\">HTML</a> defined in the MDN glossary.</li>\n</ul>\n```\n```css\n/* 所有含有\"href\"属性并且值以\"http\"开始的元素，\n将会在其内容后增加一个箭头（去表明它是外部链接）\n*/\n\n[href^=http]::after {\n  content: \'⤴\';\n}\n```\n[本人github上的例子](https://github.com/lianglihao/javascript_stu/blob/master/css/C.html)\n ### 应用同一规则的选择器组节\n你已经遇见过这种做法的许多例子，但还是让我们来把它进一步阐释清楚。通过相互间用逗号分隔的多个选择器所形成的组，可以一次性将同一规则同时应用到多组选定元素。例如：\n```css\np, li {\n  font-size: 1.6em;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: helvetica, \'sans serif\';\n}\n```\n[更多选择器](http://www.w3school.com.cn/cssref/css_selectors.asp)', '2018-12-05 18:57:50', 'css', 148, 2, 'Wed Dec 05 2018 10:57:50 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('伪类，条纹状效果--:nth-of-type() 与:nth-child的区别', '```html\n<div>\n  <div>这段不参与计数。</div>\n  <p>这是第一段。</p>\n  <p>这是第二段。</p>\n  <div>这段不参与计数。</div>\n  <p>这是第三段。</p>\n  <p>这是第四段。</p>\n</div>\n```\n```css\n/* 奇数段 */\np:nth-of-type(2n+1) {\n  color: red;\n}\n\n/* 偶数段 */\np:nth-of-type(2n) {\n  color: blue;\n}\n\n/* 第一段 */\np:nth-of-type(1) {\n  font-weight: bold;\n}\n```\n:nth-child选取其父元素下面的子元素\n:nth-of-type选取其父元素下的集合，再根据值[参考](https://baijiahao.baidu.com/s?id=1608197710434898999&wfr=spider&for=pc)', '2018-12-05 19:21:07', 'css', 150, 2, 'Wed Dec 05 2018 11:21:07 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('伪元素， ::first-line 和 ::first-letter ', '### ::first-line\n##### 匹配段落第一行\n### ::first-letter\n##### 匹配段落第一个字符\n>为了兼容ie8应该使用==:first==\n```css\np::first-line {\n  font-weight: bold;\n}\n\np::first-letter {\n  font-size: 3em;\n  border: 1px solid black;\n  background: red;\n  display: block;\n  float: left;\n  padding: 2px;\n  margin-right: 4px;\n}\n```', '2018-12-05 19:27:48', 'css', 151, 2, 'Wed Dec 05 2018 11:27:48 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('不透明度--RGBA或者Opacity', '### 例子\n```html\n<p>This paragraph is using RGBA for transparency</p>\n<p>This paragraph is using opacity for transparency</p>\n```\n```css\n/* Red with RGBA \n只有背景透明\n*/\np:nth-child(1) {\n  background-color: rgba(255,0,0,0.5);\n}\n\n/* Red with opacity \n背景和文字均透明\n*/\np:nth-child(2) {\n  background-color: rgb(255,0,0);\n  opacity: 0.5;\n}\n```\n>注意区别——第一个盒子使用RGBA颜色，只有一个半透明的背景。而一切在第二个盒子里的都是透明的，包括文本。您要仔细思考使用两者的时机——例如，当您想创建一个覆盖图片的标题，图片能透过标题显示，且标题的文本显示不受影响，此时应该使用RGBA修改标题背景色的透明度；另一方面，当您想要创建一个动画效果，让整个UI元素从完全隐藏到可见，此时应该使用不透明度（Opacity）。', '2018-12-06 17:51:01', 'css', 152, 2, 'Thu Dec 06 2018 09:51:02 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('层叠和继承', '# 层叠\n#### CSS 是 Cascading Style Sheets 的缩写，这暗示层叠（cascade）的概念是很重要的。在最基本的层面上，它表明CSS规则的顺序很重要，但它比那更复杂。什么选择器在层叠中胜出取决于三个因素（这些都是按重量级顺序排列的——前面的的一种会否决后一种）：\n\n- 重要性（Importance）\n- 专用性（Specificity）\n- 源代码次序（Source order）\n> IDs/class 选择器优先于element选择器\n比起class而言id专用性更高\n==!important== 最优先\n\n[MDN](https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Introduction_to_CSS/Cascade_and_inheritance)', '2018-12-06 18:07:03', 'css', 153, 2, 'Thu Dec 06 2018 10:07:04 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('Rap_God ZJd 街头爆炸表演 20181208', '[zzd首次街头演出](http://www.hjslihaoaijiaqi.club/static/firstPage/zzd.mp4)\n<iframe width=\"560\" height=\"315\" src=\"http://www.hjslihaoaijiaqi.club/static/firstPage/zzd.mp4\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>', '2018-12-08 20:18:28', 'javascript', 154, 2, 'Sat Dec 08 2018 12:18:28 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('溢流--overflow', '#### 当你使用绝对的值设置了一个框的大小（如，固定像素的宽/高），允许的大小可能不适合放置内容，这种情况下内容会从盒子溢流。我们使用overflow属性来控制这种情况的发生。它有一些可能的值，但是最常用的是：\n\n- ##### auto: 当内容过多，溢流的内容被隐藏，然后出现滚动条来让我们滚动查看所有的内容。\n- ##### hidden: 当内容过多，溢流的内容被隐藏。\n- ##### visible: 当内容过多，溢流的内容被显示在盒子的外边（这个是默认的行为）', '2018-12-10 13:50:35', 'css', 155, 2, 'Mon Dec 10 2018 05:50:36 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('背景裁剪--Background clip', '```css\n.default     { background-clip: border-box;  }\n/* border-box 默认填充整个div，无视padding、border*/\n.padding-box { background-clip: padding-box; }\n/* padding-box 默认填充整个border内，无视padding*/\n.content-box { background-clip: content-box; }\n/* 遵循规则，只填充真实内容框*/\n```\n\n补充[outline](https://developer.mozilla.org/zh-CN/docs/Web/CSS/outline)\n基本不使用，除非非常必要', '2018-12-10 13:55:47', 'css', 156, 2, 'Mon Dec 10 2018 05:55:48 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('css框类型', '#### 之前我们说的所有对于框的应用都表示的是块级元素的，然而，CSS还有一些表现不同的其他框类型。我们可以通过display属性来设定元素的框类型。display属性有很多的属性值。在本篇文章，我们将关注三个最常见的类型：block, inline, and inline-block。\n\n- ##### 块框（ block box）是定义为堆放在其他框上的框（例如：其内容会独占一行），而且可以设置它的宽高，之前所有对于框模型的应用适用于块框 （ block box）\n- ##### 行内框（ inline box）与块框是相反的，它随着文档的文字流动（例如：它将会和周围的文字和其他行内元素出现在同一行，而且它的内容会像一段中的文字一样随着文字部分的流动而打乱），对行内盒设置宽高无效，设置padding, margin 和 border都会更新周围文字的位置，但是对于周围的的块框（ block box）不会有影响。\n- ##### 行内块状框（inline-block box） 像是上述两种的集合：它不会重新另起一行但会像行内框（ inline box）一样随着周围文字而流动，而且他能够设置宽高，并且像块框一样保持了其块特性的完整性，它不会在段落行中断开。（在下面的示例中，行内块状框会放在第二行文本上，因为第一行没有足够的空间，并且不会突破两行。然而，如果没有足够的空间，行内框会在多条线上断裂，而它会失去一个框的形状。）\n# 尝试\n```html\n<p>\n   Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n   <span class=\"inline\">Mauris tempus turpis id ante mollis dignissim.</span>\n   Nam sed dolor non tortor lacinia lobortis id dapibus nunc.\n</p>\n\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  <span class=\"block\">Mauris tempus turpis id ante mollis dignissim.</span>\n  Nam sed dolor non tortor lacinia lobortis id dapibus nunc.\n</p>\n\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  <span class=\"inline-block\">Mauris tempus turpis id ante mollis dignissim.</span>\n  Nam sed dolor non tortor lacinia lobortis id dapibus nunc.\n</p>\n```\n```css\np {\n  padding : 1em;\n  border  : 1px solid black;\n}\n\nspan {\n  padding : 0.5em;\n  border  : 1px solid green;\n\n  /* That makes the box visible, regardless of its type */\n  background-color: yellow;\n}\n\n.inline       { display: inline;       }\n.block        { display: block;        }\n.inline-block { display: inline-block; }\n```', '2018-12-10 14:08:01', 'css', 157, 2, 'Mon Dec 10 2018 06:08:01 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('边框显示为圆弧--border-radius', '- ##### 四个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。\n- ##### 三个值: 第一个值为左上角, 第二个值为右上角和左下角，第三个值为右下角\n- ##### 两个值: 第一个值为左上角与右下角，第二个值为右上角与左下角\n- ##### 一个值： 四个圆角值相同\n# 例子\n#### 无边框的圆形\n```css\n.demo7 {\n     width: 80px;\n     height: 80px;\n     background: #3ad7d7;\n     /*border: 2px solid #ff0000;*/\n     border-radius: 40px;\n }\n```\n>宽高相等border-radius的值为宽高一半就行', '2018-12-10 14:26:06', 'css', 158, 2, 'Mon Dec 10 2018 06:26:06 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('字体种类--font-family', '# 字体栈\n#### 由于你无法保证你想在你的网页上使用的字体的可用性 (甚至一个网络字体可能由于某些原因而出错), 你可以提供一个字体栈 (font stack)，这样的话，浏览器就有多种字体可以选择了。只需包含一个font-family属性，其值由几个用逗号分离的字体名称组成。比如\n```css\np {\n  font-family: \"Trebuchet MS\", Verdana, sans-serif;\n}\n```\n#### 在这种情况下，浏览器从列表的第一个开始，然后查看在当前机器中，这个字体是否可用。如果可用，就把这个字体应用到选中的元素中。如果不可用，它就移到列表中的下一个字体，然后再检查。在字体栈的最后提供一个合适的通用的字体名称是个不错的办法，这样的话，即使列出的字体都无法使用，浏览器至少可以提供一个还算合适的选择。为了强调这一点，如果没有其他选项可用，那么段落将被赋予浏览器的默认衬线字体 - 通常是Time New Roman - 这对于 sans-serif 字体是不利的！\n>注意: 有一些字体名称不止一个单词，比如Trebuchet MS ，那么就需要用引号包裹。\n', '2018-12-10 15:24:58', 'css', 159, 2, 'Mon Dec 10 2018 07:25:02 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('字体大小--font-size', '- ##### px (像素): 将像素的值赋予给你的文本。这是一个绝对单位， 它导致了在任何情况下，页面上的文本所计算出来的像素值都是一样的。\n- ##### ems: 1em 等于我们设计的当前元素的父元素上设置的字体大小 (更加具体的话，比如包含在父元素中的大写字母 M 的宽度) 如果你有大量设置了不同字体大小的嵌套元素，这可能会变得棘手, 但它是可行的，如下图所示。为什么要使用这个麻烦的单位呢? 当你习惯这样做时，那么就会变得很自然，你可以使用em调整任何东西的大小，不只是文本。你可以有一个单位全部都使用 em 的网站，这样维护起来会很简单。\n- ##### rems: 这个单位的效果和 ems 差不多，除了 1rem 等于 HTML 中的根元素的字体大小， (```i.e. <html>```) ，而不是父元素。这可以让你更容易计算字体大小，但是遗憾的是， rems 不支持 Internet Explorer 8 和以下的版本。如果你的项目需要支持较老的浏览器，你可以坚持使用ems 或 px, 或者是 polyfill 就像 REM-unit-polyfill. （这个单位在“CSS的值和单位”一节也有讲解）\n>元素的 font-size 属性是从该元素的父元素继承的。所以这一切都是从整个文档的根元素—```<html>```开始，浏览器的 font-size 标准设置的值为 16px。\n#### 所以，有个建议，直接将html默认字体大小设置为10px;这将非常方便我们的计算和精准度\n```css\nhtml {\n  font-size: 10px;\n}\n\nh1 {\n  font-size: 2.6rem;\n}\n\np {\n  font-size: 1.4rem;\n  color: red;\n  font-family: Helvetica, Arial, sans-serif;\n}\n```\n自己写的对比的例子\n```html\n<!DOCTYPE html>\n<html>\n<head>\n	<title>font-size</title>\n	<style type=\"text/css\">\n		html{\n			font-size: 10px;\n		}\n		p{\n			font-size: 1em;\n		}\n		span{\n			font-size: 2em\n		}\n	</style>\n</head>\n<body>\n<p>大家好<span>我是</span>梁李昊</p>\n<p style=\"font-size: 10px;\">大家好<span style=\"font-size: 2em\">我是</span>梁李昊</p>\n<p style=\"font-size: 1rem;\">大家好<span style=\"font-size: 2rem\">我是</span>梁李昊</p>\n</body>\n</html>\n```\n', '2018-12-10 15:38:11', 'css', 160, 2, 'Mon Dec 10 2018 07:38:11 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('字体样式，字体粗细，文本转换和文本装饰', '# CSS 提供了 4 种常用的属性来改变文本的样子：\n\n- ### font-style: 用来打开和关闭文本 italic (斜体)。 可能的值如下 (你很少会用到这个属性，除非你因为一些理由想将斜体文字关闭斜体状态)：\n1. normal: 将文本设置为普通字体 (将存在的斜体关闭)\n1. italic: 如果当前字体的斜体版本可用，那么文本设置为斜体版本；如果不可用，那么会利用 oblique 状态来模拟 italics。\n1. oblique: 将文本设置为斜体字体的模拟版本，也就是将普通文本倾斜的样式应用到文本中。\n- ### font-weight: 设置文字的粗体大小。这里有很多值可选，防止你有好几个可用的字体。 (比如 -light, -normal, -bold, -extrabold, -black, 等等), 不过事实上你很少会用到 normal 和 bold以外的值：\n1. normal, bold: 普通或者加粗的字体粗细\n1. lighter, bolder: 将当前元素的粗体设置为比其父元素粗体更细或更粗一步。100–900: 数值粗体值，如果需要，可提供比上述关键字更精细的粒度控制。\n- ### text-transform: 允许你设置要转换的字体。值包括：\n1. none: 防止任何转型。\n1. uppercase: 将所有文本转为大写。\n1. lowercase: 将所有文本转为小写。\n1. capitalize: 转换所有单词让其首字母大写。\n1. full-width: 将所有字形转换成固定宽度的正方形，类似于等宽字体，允许对齐。拉丁字符以及亚洲语言字形（如中文，日文，韩文）\n- ### text-decoration: 设置/取消字体上的文本装饰 (你将主要使用此方法在设置链接时取消设置链接上的默认下划线。) 可用值为：\n1. none: 取消已经存在的任何文本装饰。\n1. underline: 文本下划线.\n1. overline: 文本上划线\n1. line-through: 穿过文本的线 strikethrough over the text.\n你应该注意到 text-decoration 可以一次接受多个值，如果你想要同时添加多个装饰值， 比如 text-decoration: underline overline.。同时注意 text-decoration 是一个缩写形式，它由 text-decoration-line, text-decoration-style 和 text-decoration-color 构成。\n## 例子\n```html\n<!DOCTYPE html>\n<html>\n<head>\n	<title>字体样式，字体粗细，文本转换和文本装饰</title>\n	<style type=\"text/css\">\n		html {\n  font-size: 10px;\n}\n\nh1 {\n  font-size: 2.6rem;\n  text-transform: capitalize;\n}\n\nh1 + p {\n  font-weight: bold;\n}\n\np {\n  font-size: 1.4rem;\n  color: red;\n  font-family: Helvetica, Arial, sans-serif;\n}\n	</style>\n</head>\n<body>\n<h1>Tommy the cat</h1>\n\n<p>I remember as if it were a meal ago...</p>\n\n<p>Said Tommy the Cat as he reeled back to clear whatever foreign matter\n may have nestled its way into his mighty throat. Many a fat alley rat \nhad met its demise while staring point blank down the cavernous barrel of\n this awesome prowling machine. Truly a wonder of nature this urban \npredator — Tommy the cat had many a story to tell. But it was a rare \noccasion such as this that he did.</p>\n</body>\n</html>\n```', '2018-12-10 15:56:03', 'css', 162, 2, 'Mon Dec 10 2018 07:56:03 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('文字阴影--text-shadow', '```text-shadow: 4px 4px 5px red;```\n## 4 个属性如下:\n\n1. ##### 阴影与原始文本的水平偏移，可以使用大多数的 CSS 单位 length and size units, 但是 px 是比较合适的。这个值必须指定。\n1. ##### 阴影与原始文本的垂直偏移;效果基本上就像水平偏移，除了它向上/向下移动阴影，而不是左/右。这个值必须指定。\n1. ##### 模糊半径 - 更高的值意味着阴影分散得更广泛。如果不包含此值，则默认为0，这意味着没有模糊。可以使用大多数的 CSS 单位 length and size units.\n1. ##### 阴影的基础颜色，可以使用大多数的 CSS 颜色单位 CSS color unit. 如果没有指定，默认为 black.\n### 可以通过包含以逗号分隔的多个阴影值，将多个阴影应用于同一文本，例如：\n```css\ntext-shadow: -1px -1px 1px #aaa,\n             0px 4px 1px rgba(0,0,0,0.5),\n             4px 4px 5px rgba(0,0,0,0.7),\n             0px 0px 7px rgba(0,0,0,0.4);\n```', '2018-12-10 16:00:23', 'css', 163, 2, 'Mon Dec 10 2018 08:00:24 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('文本布局', '# 文本布局-\\-```text-align```\n#### text-align 属性用来控制文本如何和它所在的内容盒子对齐。可用值如下，并且在与常规文字处理器应用程序中的工作方式几乎相同：\n\n- ##### left: 左对齐文本。\n- ##### right: 右对齐文本。\n- ##### center: 居中文字\n- ##### justify: 使文本展开，改变单词之间的差距，使所有文本行的宽度相同。你需要仔细使用，它可以看起来很可怕。特别是当应用于其中有很多长单词的段落时。如果你要使用这个，你也应该考虑一起使用别的东西，比如 hyphens，打破一些更长的词语。\n# 行高-\\-```line-height```\n#### line-height 属性设置文本每行之间的高，可以接受大多数单位 length and size units，不过也可以设置一个无单位的值，作为乘数，通常这种是比较好的做法。无单位的值乘以 font-size 来获得 line-height。当行与行之间拉开空间，正文文本通常看起来更好更容易阅读。推荐的行高大约是 1.5–2 (双倍间距。) 所以要把我们的文本行高设置为字体高度的1.5倍，基本可以使用这个:\n```line-height: 1.5;```\n# 字母和单词间距\n```letter-spacing``` 和 ```word-spacing``` 属性允许你设置你的文本中的字母与字母之间的间距、或是单词与单词之间的间距。你不会经常使用它们，但是可能可以通过它们，来获得一个特定的外观，或者让较为密集的文字更加可读。它们可以接受大多数单位 length and size units.\n```css\np::first-line {\n  letter-spacing: 2px;\n</* 字母间距 */>\n  word-spacing: 4px;\n</* 单词间距 */>\n}\n```', '2018-12-10 16:13:53', 'css', 164, 2, 'Mon Dec 10 2018 08:13:53 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('Font简写', '#### 许多字体的属性也可以通过 font 的简写方式来设置 . 这些是按照以下顺序来写的：  ```font-style```, ```font-variant```, ```font-weight```, ```font-stretch```, ```font-size```, ```line-height```, and ```font-family```.\n\n#### 如果你想要使用 font 的简写形式，在所有这些属性中，只有 ```font-size``` 和 ```font-family``` 是一定要指定的。\n\n>```font-size``` 和 ```line-height``` 属性之间必须放一个正斜杠。\n\n#### 一个完整的例子如下所示：\n```css\nfont: italic normal bold normal 3em/1.5 Helvetica, Arial, sans-serif;\n```', '2018-12-10 16:15:28', 'css', 165, 2, 'Mon Dec 10 2018 08:15:29 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('html中的特殊符号', '<p>html中的特殊符号</p><p></p><table style=\"width:700px;\" border=\"1\" cellpadding=\"0\"><tbody><tr><td><p align=\"center\"><strong>符号</strong></p></td><td><p align=\"center\"><strong>说明</strong></p></td><td><p align=\"center\"><strong>编码</strong></p></td><td rowspan=\"25\"><p align=\"center\"><strong> </strong></p></td><td><p align=\"center\"><strong>符号</strong></p></td><td><p align=\"center\"><strong>说明</strong></p></td><td><p align=\"center\"><strong>编码</strong></p></td><td rowspan=\"25\"><p align=\"center\"><strong> </strong></p></td><td><p align=\"center\"><strong>符号</strong></p></td><td><p align=\"center\"><strong>说明</strong></p></td><td><p align=\"center\"><strong>编码</strong></p></td></tr><tr><td><p align=\"left\">\"</p></td><td><p align=\"left\">双引号</p></td><td><p align=\"left\">&amp;quot;</p></td><td><p align=\"left\">×</p></td><td><p align=\"left\">乘号</p></td><td><p align=\"left\">&amp;times;</p></td><td><p align=\"left\">←</p></td><td><p align=\"left\">向左箭头</p></td><td><p align=\"left\">&amp;larr;</p></td></tr><tr><td><p align=\"left\">&amp;</p></td><td><p align=\"left\">AND符号</p></td><td><p align=\"left\">&amp;amp;</p></td><td><p align=\"left\">÷</p></td><td><p align=\"left\">除号</p></td><td><p align=\"left\">&amp;divide;</p></td><td><p align=\"left\">↑</p></td><td><p align=\"left\">向上箭头</p></td><td><p align=\"left\">&amp;uarr;</p></td></tr><tr><td><p align=\"left\">&lt; </p></td><td><p align=\"left\">小于符号</p></td><td><p align=\"left\">&amp;lt;</p></td><td><p align=\"left\">±</p></td><td><p align=\"left\">正负符号</p></td><td><p align=\"left\">&amp;plusmn;</p></td><td><p align=\"left\">→</p></td><td><p align=\"left\">向右箭头</p></td><td><p align=\"left\">&amp;rarr;</p></td></tr><tr><td><p align=\"left\">&gt; </p></td><td><p align=\"left\">大于符号</p></td><td><p align=\"left\">&amp;gt;</p></td><td><p align=\"left\">?</p></td><td><p align=\"left\">function符号</p></td><td><p align=\"left\">&amp;fnof;</p></td><td><p align=\"left\">↓</p></td><td><p align=\"left\">向下箭头</p></td><td><p align=\"left\">&amp;darr;</p></td></tr><tr><td><p align=\"left\"> </p></td><td><p align=\"left\">空格</p></td><td><p align=\"left\">&amp;nbsp;</p></td><td><p align=\"left\">√</p></td><td><p align=\"left\">根号</p></td><td><p align=\"left\">&amp;radic;</p></td><td><p align=\"left\">?</p></td><td><p align=\"left\">双向箭头</p></td><td><p align=\"left\">&amp;harr;</p></td></tr><tr><td><p align=\"left\">?</p></td><td><p align=\"left\">倒问号</p></td><td><p align=\"left\">&amp;iquest;</p></td><td><p align=\"left\">∞</p></td><td><p align=\"left\">无限大符号</p></td><td><p align=\"left\">&amp;infin;</p></td><td><p align=\"left\">?</p></td><td><p align=\"left\">双线向左箭头</p></td><td><p align=\"left\">&amp;lArr;</p></td></tr><tr><td><p align=\"left\">?</p></td><td><p align=\"left\">双左箭头</p></td><td><p align=\"left\">&amp;laquo;</p></td><td><p align=\"left\">∠</p></td><td><p align=\"left\">角度符号</p></td><td><p align=\"left\">&amp;ang;</p></td><td><p align=\"left\">?</p></td><td><p align=\"left\">双线向上箭头</p></td><td><p align=\"left\">&amp;uArr;</p></td></tr><tr><td><p align=\"left\">?</p></td><td><p align=\"left\">双右箭头</p></td><td><p align=\"left\">&amp;raquo;</p></td><td><p align=\"left\">∫</p></td><td><p align=\"left\">微积分符号</p></td><td><p align=\"left\">&amp;int;</p></td><td><p align=\"left\">⇒</p></td><td><p align=\"left\">双线向右箭头</p></td><td><p align=\"left\">&amp;rArr;</p></td></tr><tr><td><p align=\"left\">‘</p></td><td><p align=\"left\">左单引号</p></td><td><p align=\"left\">&amp;lsquo;</p></td><td><p align=\"left\">°</p></td><td><p align=\"left\">度数符号</p></td><td><p align=\"left\">&amp;deg;</p></td><td><p align=\"left\">?</p></td><td><p align=\"left\">双线向下箭头</p></td><td><p align=\"left\">&amp;dArr;</p></td></tr><tr><td><p align=\"left\">’</p></td><td><p align=\"left\">右单引号</p></td><td><p align=\"left\">&amp;rsquo;</p></td><td><p align=\"left\">≠</p></td><td><p align=\"left\">不等于符号</p></td><td><p align=\"left\">&amp;ne;</p></td><td><p align=\"left\">?</p></td><td><p align=\"left\">双线双向箭头</p></td><td><p align=\"left\">&amp;hArr;</p></td></tr><tr><td><p align=\"left\">“</p></td><td><p align=\"left\">左双引号</p></td><td><p align=\"left\">&amp;ldquo;</p></td><td><p align=\"left\">≡</p></td><td><p align=\"left\">相等符号</p></td><td><p align=\"left\">&amp;equiv;</p></td><td><p align=\"left\">?</p></td><td><p align=\"left\">黑桃符号</p></td><td><p align=\"left\">&amp;spades;</p></td></tr><tr><td><p align=\"left\">”</p></td><td><p align=\"left\">右双引号</p></td><td><p align=\"left\">&amp;rdquo;</p></td><td><p align=\"left\">≤</p></td><td><p align=\"left\">小于等于符号</p></td><td><p align=\"left\">&amp;le;</p></td><td><p align=\"left\">?</p></td><td><p align=\"left\">梅花符号</p></td><td><p align=\"left\">&amp;clubs;</p></td></tr><tr><td><p align=\"left\">?</p></td><td><p align=\"left\">段落符号</p></td><td><p align=\"left\">&amp;para;</p></td><td><p align=\"left\">≥</p></td><td><p align=\"left\">大于等于符号</p></td><td><p align=\"left\">&amp;ge;</p></td><td><p align=\"left\">?</p></td><td><p align=\"left\">红心符号</p></td><td><p align=\"left\">&amp;hearts;</p></td></tr><tr><td><p align=\"left\">§</p></td><td><p align=\"left\">章节符号</p></td><td><p align=\"left\">&amp;sect;</p></td><td><p align=\"left\">⊥</p></td><td><p align=\"left\">垂直符号</p></td><td><p align=\"left\">&amp;perp;</p></td><td><p align=\"left\">?</p></td><td><p align=\"left\">方块符号</p></td><td><p align=\"left\">&amp;diams;</p></td></tr><tr><td><p align=\"left\">?</p></td><td><p align=\"left\">版权所有符号</p></td><td><p align=\"left\">&amp;copy;</p></td><td><p align=\"left\">?</p></td><td><p align=\"left\">二分之一符号</p></td><td><p align=\"left\">&amp;frac12;</p></td><td><p align=\"left\">α</p></td><td><p align=\"left\">Alpha符号</p></td><td><p align=\"left\">&amp;alpha;</p></td></tr><tr><td><p align=\"left\">?</p></td><td><p align=\"left\">注册商标符号</p></td><td><p align=\"left\">&amp;reg;</p></td><td><p align=\"left\">?</p></td><td><p align=\"left\">四分之一符号</p></td><td><p align=\"left\">&amp;frac14;</p></td><td><p align=\"left\">β</p></td><td><p align=\"left\">Bata符号</p></td><td><p align=\"left\">&amp;beta;</p></td></tr><tr><td><p align=\"left\">?</p></td><td><p align=\"left\">商标符号</p></td><td><p align=\"left\">&amp;trade;</p></td><td><p align=\"left\">?</p></td><td><p align=\"left\">四分之三符号</p></td><td><p align=\"left\">&amp;frac34;</p></td><td><p align=\"left\">γ</p></td><td><p align=\"left\">Gamma符号</p></td><td><p align=\"left\">&amp;gamma;</p></td></tr><tr><td><p align=\"left\">€</p></td><td><p align=\"left\">欧元符号</p></td><td><p align=\"left\">&amp;euro;</p></td><td><p align=\"left\">‰</p></td><td><p align=\"left\">百分符号</p></td><td><p align=\"left\">&amp;permil;</p></td><td><p align=\"left\">Δ</p></td><td><p align=\"left\">Delta符号</p></td><td><p align=\"left\">&amp;Delta;</p></td></tr><tr><td><p align=\"left\">￠</p></td><td><p align=\"left\">美分符号</p></td><td><p align=\"left\">&amp;cent;</p></td><td><p align=\"left\">∴</p></td><td><p align=\"left\">所以符号</p></td><td><p align=\"left\">&amp;there4;</p></td><td><p align=\"left\">θ</p></td><td><p align=\"left\">Theta符号</p></td><td><p align=\"left\">&amp;theta;</p></td></tr><tr><td><p align=\"left\">￡</p></td><td><p align=\"left\">英镑符号</p></td><td><p align=\"left\">&amp;pound;</p></td><td><p align=\"left\">π</p></td><td><p align=\"left\">圆周率符号</p></td><td><p align=\"left\">&amp;pi;</p></td><td><p align=\"left\">λ</p></td><td><p align=\"left\">Lambda符号</p></td><td><p align=\"left\">&amp;lambda;</p></td></tr><tr><td><p align=\"left\">￥</p></td><td><p align=\"left\">日圆符号</p></td><td><p align=\"left\">&amp;yen;</p></td><td><p align=\"left\">1</p></td><td><p align=\"left\">批注1符号</p></td><td><p align=\"left\">&amp;sup1;</p></td><td><p align=\"left\">Σ</p></td><td><p align=\"left\">Sigma符号</p></td><td><p align=\"left\">&amp;Sigma;</p></td></tr><tr><td><p align=\"left\">…</p></td><td><p align=\"left\">...</p></td><td><p align=\"left\">&amp;hellip;</p></td><td><p align=\"left\">2</p></td><td><p align=\"left\">批注2符号、平方</p></td><td><p align=\"left\">&amp;sup2;</p></td><td><p align=\"left\">τ</p></td><td><p align=\"left\">Tau符号</p></td><td><p align=\"left\">&amp;tau;</p></td></tr><tr><td><p align=\"left\">⊕</p></td><td><p align=\"left\"> </p></td><td><p align=\"left\">&amp;oplus;</p></td><td><p align=\"left\">3</p></td><td><p align=\"left\">批注3符号、立方</p></td><td><p align=\"left\">&amp;sup3;</p></td><td><p align=\"left\">ω</p></td><td><p align=\"left\">Omega符号</p></td><td><p align=\"left\">&amp;omega;</p></td></tr><tr><td><p align=\"left\">?</p></td><td><p align=\"left\">倒三角型符号</p></td><td><p align=\"left\">&amp;nabla;</p></td><td><p align=\"left\">?</p></td><td><p align=\"left\">ENTER符号</p></td><td><p align=\"left\">&amp;crarr;</p></td><td><p align=\"left\">Ω</p></td><td><p align=\"left\">Omega符号、奥姆符号</p></td><td><p align=\"left\">&amp;Omega;</p></td></tr></tbody></table>           ', '2018-12-10 16:33:51', 'html', 168, 2, 'Mon Dec 10 2018 08:33:51 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('样式列表<ul>.<ol>.<dl>', '- **list-style-type([更多](https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-type)) ：设置用于列表的项目符号的类型，例如无序列表的方形或圆形项目符号，或有序列表的数字，字母或罗马数字。**\n- **list-style-position ：设置在每个项目开始之前，项目符号是出现在列表项内，还是出现在其外。**\n>outside\n标记盒在主块盒的外面。\ninside\n标记盒是主要块盒中的第一个行内盒，处于元素的内容流之后。\n- **list-style-image ：允许您为项目符号使用自定义图片，而不是简单的方形或圆形。**==尽量不使用，尽量使用background属性，因为该属性对设置位置等等因素存在限制，建议如下==\n```css\nul {\n  padding-left: 2rem;\n  list-style-type: none;\n}\n\nul li {\n  padding-left: 2rem;\n  background-image: url(star.svg);\n  background-position: 0 0;\n</*这定义了所选元素背景中的图像将出现在哪里 - 在我们的示例中设置 0 0，这意味着项目符号将出现在每个列表项的最左上侧。*/>\n  background-size: 1.6rem 1.6rem;\n  background-repeat: no-repeat;\n}\n```\n>适用于\\<ul>,\\<ol>\n```css\nul {\n  list-style: square url(example.png) inside;\n}\n```\n**属性值可以任意顺序排列，你可以设置一个，两个或者三个值（该属性的默认值为 disc, none, outside），如果指定了 type 和 image，如果由于某种原因导致图像无法加载，则 type 将用作回退。**\n---\n# 管理列表计数\nstart 属性允许从1 以外的数字开始计数\n```<ol start=\"4\">```\nreversed 属性将启动列表倒计数\n```<ol start=\"4\" reversed>```\nvalue 属性允许设置列表项指定数值\n```<li value=\"4\">```\n>即使使用非数字的 list-style-type, 仍需要使用与数值同等意义的值作为 value 的属性。\n', '2018-12-11 16:00:31', 'css', 169, 2, 'Tue Dec 11 2018 08:00:31 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('query,params传值', 'query要用path来引入，params要用name来引入，接收参数都是类似的，分别是this.$route.query.name和this.$route.params.name。', '2018-12-11 17:11:07', 'vue', 170, 2, 'Tue Dec 11 2018 09:11:07 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('图片显示是否盖住文本--z-index', '# 定义和用法\nz-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。\n\n==注释：元素可拥有负的 z-index 属性值。==\n\n==注释：Z-index 仅能在定位元素上奏效（例如 position:absolute;）！==\n\n说明\n该属性设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远。\n```html\n<html>\n<head>\n<style type=\"text/css\">\nimg\n{\nposition:absolute;\nleft:0px;\ntop:0px;\nz-index:-1;\n/*在文本的后面出现\n如果z-index的值为非负数则在覆盖文本\n*/\n}\n</style>\n</head>\n\n<body>\n<h1>This is a heading</h1>\n<img src=\"/i/eg_smile.gif\" />\n<p>由于图像的 z-index 是 -1，因此它在文本的后面出现。</p>\n</body>\n</html>\n```', '2018-12-11 21:38:44', 'css', 171, 2, 'Tue Dec 11 2018 13:38:44 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('initial关键字，设置默认值', '定义和用法\ninitial 关键字用于设置 CSS 属性为它的默认值。\n\ninitial 关键字可用于任何 HTML 元素上的任何 CSS 属性。', '2018-12-11 21:45:12', 'css', 172, 2, 'Tue Dec 11 2018 13:45:12 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('links--链接', '# 链接状态\n### 第一件需要理解的事情是链接状态的概念，链接存在时处于不同的状态，每一个状态都可以用对应的 伪类 来应用样式:\n\n- **Link (没有访问过的)**: 这是链接的默认状态，当它没有处在其他状态的时候，它可以使用```:link``` 伪类来应用样式。\n- **Visited**: 这个链接已经被访问过了(存在于浏览器的历史纪录), 它可以使用 ```:visited``` 伪类来应用样式。\n- **Hover**: 当用户的鼠标光标刚好停留在这个链接，它可以使用 ```:hover``` 伪类来应用样式。\n- **Focus**: 一个链接当它被选中的时候 (比如通过键盘的 Tab  移动到这个链接的时候，或者使用编程的方法来选中这个链接 HTMLElement.focus()) 它可以使用 ```:focus``` 伪类来应用样式。\n- **Active**: 一个链接当它被激活的时候 (比如被点击的时候)，它可以使用 ```:active``` 伪类来应用样式。\n==*注意：设置的时候需要遵守如上顺序==\n```css\na[href*=\"http\"] {\n  background: url(\'https://mdn.mozillademos.org/files/12982/external-link-52.png\') no-repeat 100% 0;\n  background-size: 16px 16px;\n  padding-right: 19px;\n}\n</*给带有href属性并且带有“http”的a标签添加图片\n指定位置是 100% 使其出现在内容的右边，然后距离上方是 0 px。*/>\n```\n# 一个简单的例子\n```html\n<!DOCTYPE html>\n<html>\n<head>\n	<title>links</title>\n	<style type=\"text/css\">\n		body,html {\n  margin: 0;\n  font-family: sans-serif;\n}\n\nul {\n  padding: 0;\n  width: 100%;\n}\n\nli {\n  display: inline;\n}\n\na {\n  outline: none;\n  text-decoration: none;\n  display: inline-block;\n  width: 19.5%;\n  margin-right: 0.625%;\n  text-align: center;\n  line-height: 3;\n  color: black;\n}\n\nli:last-child a {\n  margin-right: 0;\n}\n\na:link, a:visited, a:focus {\n  background: yellow;\n}\n\na:hover {     \n  background: orange;\n}\n\na:active {\n  background: red;\n  color: white;\n}\n	</style>\n</head>\n<body>\n<ul>\n  <li><a href=\"#\">Home</a></li><li><a href=\"#\">Pizza</a></li><li><a href=\"#\">Music</a></li><li><a href=\"#\">Wombats</a></li><li><a href=\"#\">Finland</a></li>\n</ul>\n</body>\n</html>\n```', '2018-12-12 15:39:19', 'css', 173, 2, 'Wed Dec 12 2018 07:39:19 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('cursor属性，设置不同的光标', '```html\n<html>\n\n<body>\n<p>请把鼠标移动到单词上，可以看到鼠标指针发生变化：</p>\n<span style=\"cursor:auto\">\nAuto</span><br />\n<span style=\"cursor:crosshair\">\nCrosshair</span><br />\n<span style=\"cursor:default\">\nDefault</span><br />\n<span style=\"cursor:pointer\">\nPointer</span><br />\n<span style=\"cursor:move\">\nMove</span><br />\n<span style=\"cursor:e-resize\">\ne-resize</span><br />\n<span style=\"cursor:ne-resize\">\nne-resize</span><br />\n<span style=\"cursor:nw-resize\">\nnw-resize</span><br />\n<span style=\"cursor:n-resize\">\nn-resize</span><br />\n<span style=\"cursor:se-resize\">\nse-resize</span><br />\n<span style=\"cursor:sw-resize\">\nsw-resize</span><br />\n<span style=\"cursor:s-resize\">\ns-resize</span><br />\n<span style=\"cursor:w-resize\">\nw-resize</span><br />\n<span style=\"cursor:text\">\ntext</span><br />\n<span style=\"cursor:wait\">\nwait</span><br />\n<span style=\"cursor:help\">\nhelp</span>\n</body>\n\n</html>\n```\n<html>\n\n<body>\n<p>请把鼠标移动到单词上，可以看到鼠标指针发生变化：</p>\n<span style=\"cursor:auto\">\nAuto</span><br />\n<span style=\"cursor:crosshair\">\nCrosshair</span><br />\n<span style=\"cursor:default\">\nDefault</span><br />\n<span style=\"cursor:pointer\">\nPointer</span><br />\n<span style=\"cursor:move\">\nMove</span><br />\n<span style=\"cursor:e-resize\">\ne-resize</span><br />\n<span style=\"cursor:ne-resize\">\nne-resize</span><br />\n<span style=\"cursor:nw-resize\">\nnw-resize</span><br />\n<span style=\"cursor:n-resize\">\nn-resize</span><br />\n<span style=\"cursor:se-resize\">\nse-resize</span><br />\n<span style=\"cursor:sw-resize\">\nsw-resize</span><br />\n<span style=\"cursor:s-resize\">\ns-resize</span><br />\n<span style=\"cursor:w-resize\">\nw-resize</span><br />\n<span style=\"cursor:text\">\ntext</span><br />\n<span style=\"cursor:wait\">\nwait</span><br />\n<span style=\"cursor:help\">\nhelp</span>\n</body>\n\n</html>', '2018-12-12 16:22:49', 'css', 174, 2, 'Wed Dec 12 2018 08:22:49 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('position--定位属性', '### position：static | relative | absolute | fixed | center | page | sticky\n### 默认值：static，center、page、sticky是CSS3中新增加的值。\n#### (1)、static \n##### 可以认为静态的，默认元素都是静态的定位，对象遵循常规流。此时4个定位偏移属性不会被应用，也就是使用left，right，bottom，top将不会生效。\n#### (2)、relative \n##### 相对定位，对象遵循常规流，并且参照自身在常规流中的位置通过top，right，bottom，left这4个定位偏移属性进行偏移时不会影响常规流中的任何元素。\n#### (3)、absolute \n##### a、绝对定位，对象脱离常规流，此时偏移属性参照的是离自身最近的定位祖先元素，如果没有定位的祖先元素，则一直回溯到body元素。盒子的偏移位置不影响常规流中的任何元素，其margin不与其他任何margin折叠。\n##### b、元素定位参考的是离自身最近的定位祖先元素，要满足两个条件，第一个是自己的祖先元素，可以是父元素也可以是父元素的父元素，一直找，如果没有则选择body为对照对象。第二个条件是要求祖先元素必须定位，通俗说就是position的属性值为非static都行。\n#### (4)、fixed \n##### 固定定位，与absolute一致，但偏移定位是以窗口为参考。当出现滚动条时，对象不会随着滚动。\n#### (5)、center \n##### 与absolute一致，但偏移定位是以定位祖先元素的中心点为参考。盒子在其包含容器垂直水平居中。（CSS3）\n#### (6)、page \n##### 与absolute一致。元素在分页媒体或者区域块内，元素的包含块始终是初始包含块，否则取决于每个absolute模式。（CSS3）\n#### (7)、sticky \n##### 对象在常态时遵循常规流。它就像是relative和fixed的合体，当在屏幕中时按常规流排版，当卷动到屏幕外时则表现如fixed。该属性的表现是现实中你见到的吸附效果。（CSS3）', '2018-12-12 16:31:07', 'css', 175, 2, 'Wed Dec 12 2018 08:31:07 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('overflow属性--设置是否溢出等', '- visible	默认值。内容不会被修剪，会呈现在元素框之外。\n- hidden	内容会被修剪，并且其余内容是不可见的。\n- scroll	内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。\n- auto	如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。\n- inherit	规定应该从父元素继承 overflow 属性的值。', '2018-12-12 16:32:05', 'css', 176, 2, 'Wed Dec 12 2018 08:32:05 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('@media，目前于我而言适用于响应式界面', '```css\n如果文档宽度小于 300 像素则修改背景颜色(background-color):\n\n@media screen and (max-width: 300px) {\n    body {\n        background-color:lightblue;\n    }\n}\n\n@media only screen and (max-width: 300px) {\n    body {\n        background-color:lightblue;\n    }\n}\n\n@media not screen and (max-width: 300px) {\n    body {\n        background-color:lightblue;\n    }\n}\n```\n[Css @media 查询](http://www.runoob.com/cssref/css3-pr-mediaquery.html)\n==screen==: 	用于电脑屏幕，平板电脑，智能手机等。\n==only==:指定某种特定的媒体类型，可以用来排除不支持媒体查询的浏览器：\n==not==：排除某种制定的媒体类型', '2018-12-12 16:55:43', 'css', 177, 2, 'Wed Dec 12 2018 08:55:44 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('box-sizing属性（弹性盒子布局）', 'border-box规定两个并排的带边框的框：\n```css\ndiv\n{\nbox-sizing:border-box;\n-moz-box-sizing:border-box; /* Firefox */\n-webkit-box-sizing:border-box; /* Safari */\nwidth:50%;\nfloat:left;\n}\n```\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<style> \ndiv.container\n{\nwidth:30em;\nborder:1em solid;\n}\ndiv.box\n{\nbox-sizing:border-box;\nwidth:50%;\nborder:1em solid green;\nfloat:left;\n}\n</style>\n</head>\n<body>\n\n<div class=\"container\">\n<div class=\"box\">这个 div 占据左半部分。</div>\n<div class=\"box\">这个 div 占据右半部分。</div>\n</div>\n\n</body>\n</html>\n```\n- content-box	\n这是由 CSS2.1 规定的宽度高度行为。\n宽度和高度分别应用到元素的内容框。\n在宽度和高度之外绘制元素的内边距和边框。\n\n- border-box	\n为元素设定的宽度和高度决定了元素的边框盒。\n就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。\n通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。', '2018-12-12 17:25:59', 'css', 178, 2, 'Wed Dec 12 2018 09:25:59 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('transform属性，旋转div', '旋转 div 元素：\n```css\ndiv\n{\ntransform:rotate(7deg);\n-ms-transform:rotate(7deg); 	/* IE 9 */\n-moz-transform:rotate(7deg); 	/* Firefox */\n-webkit-transform:rotate(7deg); /* Safari 和 Chrome */\n-o-transform:rotate(7deg); 	/* Opera */\n}\n```\n[详细](http://www.w3school.com.cn/cssref/pr_transform.asp)\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<style> \ndiv\n{\nmargin:30px;\nwidth:200px;\nheight:100px;\nbackground-color:yellow;\n/* Rotate div */\ntransform:rotate(9deg);\n-ms-transform:rotate(9deg); /* Internet Explorer */\n-moz-transform:rotate(9deg); /* Firefox */\n-webkit-transform:rotate(9deg); /* Safari 和 Chrome */\n-o-transform:rotate(9deg); /* Opera */\n}\n</style>\n</head>\n<body>\n\n<div>Hello World</div>\n\n</body>\n</html>\n```', '2018-12-12 17:35:22', 'css', 179, 2, 'Wed Dec 12 2018 09:35:22 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('Flexible Box Model（弹性盒子布局）', 'display:-webkit-box的作用非常神奇。不过这个属性一定要在父级元素那里定义display:-webkit-box;他可以让子级呈现一排。类似与float：left和diaplay：inline-bloak。我们在父级定义了这个属性。第一列应该给个宽度。然后它会分配不同的比例（三列布局，一列定宽，其余两列安1:2的比例自适应）。\n-\n[详细](https://www.cnblogs.com/cczw/archive/2012/05/15/2501341.html)\n[flex布局](https://blog.csdn.net/u011784135/article/details/50630425)', '2018-12-12 17:48:26', 'css', 180, 2, 'Wed Dec 12 2018 09:48:26 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('box-align/box-pack属性，自适应布局（弹性盒子布局）', '```css\ndiv\n{\nwidth:350px;\nheight:100px;\nborder:1px solid black;\n\n/* Internet Explorer 10 */\ndisplay:-ms-flexbox;\n-ms-flex-pack:center;\n-ms-flex-align:center;\n\n/* Firefox */\ndisplay:-moz-box;\n-moz-box-pack:center;\n-moz-box-align:center;\n\n/* Safari, Chrome, and Opera */\ndisplay:-webkit-box;\n-webkit-box-pack:center;\n-webkit-box-align:center;\n\n/* W3C */\ndisplay:box;\nbox-pack:center;\nbox-align:center;\n}\n```\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<style> \ndiv\n{\nwidth:350px;\nheight:100px;\nborder:1px solid black;\n  \n/* Firefox */\ndisplay:-moz-box;\n-moz-box-pack:center;\n-moz-box-align:center;\n\n/* Safari, Chrome, and Opera */\ndisplay:-webkit-box;\n-webkit-box-pack:center;\n-webkit-box-align:center;\n\n/* W3C */\ndisplay:box;\nbox-pack:center;\nbox-align:center;\n}\n</style>\n</head>\n<body>\n\n<div>\n<p>我是居中对齐的。</p>\n</div>\n\n<p><b>注释：</b>IE 不支持 box-pack 和 box-align 属性。</p>\n\n</body>\n</html>\n\n```\n- start	\n对于正常方向的框，首个子元素的左边缘被放在左侧（最后的子元素后是所有剩余的空间）\n\n对于相反方向的框，最后子元素的右边缘被放在右侧（首个子元素前是所有剩余的空间）\n\n\n- end	\n对于正常方向的框，最后子元素的右边缘被放在右侧（首个子元素前是所有剩余的空间）。\n\n对于相反方向的框，首个子元素的左边缘被放在左侧（最后子元素后是所有剩余的空间）。	测试\n- center	均等地分割多余空间，其中一半空间被置于首个子元素前，另一半被置于最后一个子元素后	\n- justify	在每个子元素之间分割多余的空间（首个子元素前和最后一个子元素后没有多余的空间）。[测试](http://www.w3school.com.cn/tiy/c.asp?f=css_box-pack&p=4)\n\n\nbox-align\nstart	\n对于正常方向的框，每个子元素的上边缘沿着框的顶边放置。\n\n对于反方向的框，每个子元素的下边缘沿着框的底边放置。\n\n测试\nend	\n对于正常方向的框，每个子元素的下边缘沿着框的底边放置。\n\n对于反方向的框，每个子元素的上边缘沿着框的顶边放置。\n\n测试\ncenter	均等地分割多余的空间，一半位于子元素之上，另一半位于子元素之下。	测试\nbaseline	如果 box-orient 是inline-axis或horizontal，所有子元素均与其基线对齐。	测试\nstretch	拉伸子元素以填充包含块', '2018-12-12 17:54:52', 'css', 181, 2, 'Wed Dec 12 2018 09:54:52 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('justify-content/align-content属性，控制盒子横向/纵向的排布，自适应（弹性盒子布局）', '[justify-content](http://www.runoob.com/try/playit.php?f=playcss_justify-content&preval=flex-start)\n[align-content](http://www.runoob.com/try/playit.php?f=playcss_align-content&preval=initial)', '2018-12-12 18:15:26', 'css', 183, 2, 'Wed Dec 12 2018 10:15:26 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('align-items （弹性盒子布局）', 'stretch	\n默认值。元素被拉伸以适应容器。\n\n如果指定侧轴大小的属性值为\'auto\'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照\'min/max-width/height\'属性的限制。\n\n\ncenter	\n元素位于容器的中心。\n\n弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。\n\n\nflex-start	\n元素位于容器的开头。\n\n弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。\n\n\nflex-end	\n元素位于容器的结尾。\n\n弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。\n\n\nbaseline	\n元素位于容器的基线上。\n\n如弹性盒子元素的行内轴与侧轴为同一条，则该值与\'flex-start\'等效。其它情况下，该值将参与基线对齐。\n\n\ninitial	设置该属性为它的默认值。请参阅 initial。	\ninherit	从父元素继承该属性。请参阅 inherit。\n[测试](http://www.runoob.com/try/playit.php?f=playcss_align-items&preval=center)', '2018-12-12 18:28:36', 'css', 184, 2, 'Wed Dec 12 2018 10:28:38 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('vertical-align 属性设置元素的垂直对齐方式', '<html>\n\n<head>\n<style type=\"text/css\">\nimg.top {vertical-align:text-top}\nimg.bottom {vertical-align:text-bottom}\n</style>\n</head>\n\n<body>\n\n<p>\n这是一幅<img class=\"top\" border=\"0\" src=\"http://www.hjslihaoaijiaqi.club/static/firstPage/laopomeimeidatouxiang.jpg\" />位于段落中的图像。\n</p> \n\n<p>\n这是一幅<img class=\"bottom\" border=\"0\" src=\"http://www.hjslihaoaijiaqi.club/static/firstPage/laopomeimeidatouxiang.jpg\" />位于段落中的图像。\n</p>\n\n</body>\n\n</html>\n\n```html\n<html>\n\n<head>\n<style type=\"text/css\">\nimg.top {vertical-align:text-top}\nimg.bottom {vertical-align:text-bottom}\n</style>\n</head>\n\n<body>\n\n<p>\n这是一幅<img class=\"top\" border=\"0\" src=\"http://www.hjslihaoaijiaqi.club/static/firstPage/laopomeimeidatouxiang.jpg\" />位于段落中的图像。\n</p> \n\n<p>\n这是一幅<img class=\"bottom\" border=\"0\" src=\"http://www.hjslihaoaijiaqi.club/static/firstPage/laopomeimeidatouxiang.jpg\" />位于段落中的图像。\n</p>\n\n</body>\n\n</html>\n```\n\n<table class=\"dataintable\">\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n\n<tr>\n<td>baseline</td>\n<td>默认。元素放置在父元素的基线上。</td>\n</tr>\n\n<tr>\n<td>sub</td>\n<td>垂直对齐文本的下标。</td>\n</tr>\n\n<tr>\n<td>super</td>\n<td>垂直对齐文本的上标</td>\n</tr>\n\n<tr>\n<td>top</td>\n<td>把元素的顶端与行中最高元素的顶端对齐</td>\n</tr>\n\n<tr>\n<td>text-top</td>\n<td>把元素的顶端与父元素字体的顶端对齐</td>\n</tr>\n\n<tr>\n<td>middle</td>\n<td>把此元素放置在父元素的中部。</td>\n</tr>\n\n<tr>\n<td>bottom</td>\n<td>把元素的顶端与行中最低的元素的顶端对齐。</td>\n</tr>\n\n<tr>\n<td>text-bottom</td>\n<td>把元素的底端与父元素字体的底端对齐。</td>\n</tr>\n\n<tr>\n<td>length</td>\n<td>&nbsp;</td>\n</tr>\n\n<tr>\n<td>%</td>\n<td>使用 &quot;line-height&quot; 属性的百分比值来排列此元素。允许使用负值。</td>\n</tr>\n\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 vertical-align 属性的值。</td>\n</tr>\n</table>\n', '2018-12-13 12:00:13', 'css', 185, 2, 'Thu Dec 13 2018 04:00:13 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('flex布局', '[flex 阮一峰 语法篇](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?%5E%25$)\n\n[flex 阮一峰 实例篇](http://www.ruanyifeng.com/blog/2015/07/flex-examples.html)', '2018-12-13 17:03:31', 'css', 186, 2, 'Thu Dec 13 2018 09:03:31 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('微信小程序--image标签', '[image](https://blog.csdn.net/qq_2842405070/article/details/69382503)', '2019-01-14 15:56:58', 'vue', 187, 2, 'Mon Jan 13 2019 07:56:58 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('微信小程序--wx.request中改变page.data内的值', '```javascript\nXXXFunction: function () {\n\n    var that = this\n\n    wx.request({\n\n        url: \'https://xxx\', //仅为示例，并非真实的接口地址\n\n        data: {\n\n            xxx: xxx\n\n        },\n\n        header: {\n\n            \'content-type\': \'application/json\'\n\n        },\n\n\n        success: function (res) {\n\n            that.setData({\n\n                                xxx:res.data.xxx\n\n                            })\n\n        },\n\n\n        fail: function (res) {\n\n        \n\n        },\n\n    })      \n\n}\n```\n### 在request之前先用个变量把this存起来，在success里就用这个变量来代量this使用，见加粗字体，原因是：在request里的this上下文改变了，this不再指向当前page', '2019-01-14 23:13:09', 'vue', 188, 2, 'Mon Jan 14 2019 15:13:09 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('好奇夫妇台州府一日游 2019/02/02', '[台州府一日游](http://www.hjslihaoaijiaqi.club:7777/static/firstPage/haoqidaily.mp4)\n<iframe width=\"560\" height=\"315\" src=\"http://www.hjslihaoaijiaqi.club:7777/static/firstPage/haoqidaily.mp4\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>', '2019-02-03 23:08:45', 'javascript', 189, 2, 'Sun Feb 03 2019 15:09:01 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('JavaScript性能简单自测--console.time()', '```javascript\nconsole.info(\"程序开始执行：\");\n\nvar counter = 10;\nconsole.log(\"计数: %d\", counter);\n\nconsole.time(\"获取数据\");\n//\n// 执行一些代码\n// \nconsole.timeEnd(\'获取数据\');\n\nconsole.info(\"程序执行完毕。\")\n```\nconsole.time() 以及 console.timeEnd() 内的标示文字需要相同，可简单测试代码运行时间', '2019-02-12 22:52:59', 'javascript', 190, 2, 'Tue Feb 12 2019 14:52:59 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('要开始node了哦', '目前跟视频学习，不懂之处查阅文档', '2019-02-15 09:27:48', 'javascript', 191, 2, 'Fri Feb 15 2019 01:27:48 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('vue3--process.全局变量', 'process对象是一个全局变量\n在根目录下创建```.env```文件\n在文件内定义全局变量\n==相关提示：```.env```下的环境变量，若没有```.env.production```文件，在build打包上线的时候会使用```.env```下的环境变量，开发过程中，可以创建```.env.development```,那么在开发环境中，将会默认使用该文件下的环境变量==\n```vue\nVUE_APP_XXX=XXX\n```\n注意：前缀为规定的```VUE_APP_```\n-----\n在文件内调用的时候，\n```JavaScript\ndata(){\n	return{\n	  url: process.env.VUE_APP_XXX\n    }\n}\n```\n------\n\n', '2019-02-25 14:06:23', 'vue', 193, 2, 'Mon Feb 25 2019 06:06:23 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('vue3--不依赖脚手架，单独运行.vue文件', '全局安装\n```npm install -g @vue/cli-service-global```\n安装好后命令行运行\n```vue serve xxx.vue```即可', '2019-02-25 14:24:19', 'vue', 194, 2, 'Mon Feb 25 2019 06:24:20 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('vue3--全局配置--vue.config.js', '```javascript\nconst package = require(\"./package.json\")\n\nmodule.exports = {\n    publicPath: \'/\', // 根路径\n    outputDir: \'dist\', // 构建输出目录\n    assetsDir: \'assets\', // 静态资源目录(js,css,img,fonts)\n    lintOnSave: false, // 是否开启eslint保存检测，有效值：true || false || error\n    devServer: {\n        open: true, // 当项目运行时，是否自动打开浏览器\n        host: \'localhost\',\n        port: 8081, //端口号\n        https: false,\n        hotOnly: false,\n        proxy: {\n            // 配置跨域\n            \'api\': {\n                target: \'http//localhost:5000/api/\',\n                ws: true,\n                changeOrigin: true,\n                pathRewrite: {\n                    \'^/api\': \'\'\n                }\n            }\n        },\n        before: (app) =>{ //提供在服务器内部的所有其他中间件之前执行自定义中间件的能力\n            app.get(\"/api/users\", (req,res) => {\n                res.json(package)\n            })\n        }\n    }\n}\n```', '2019-02-25 15:23:39', 'vue', 195, 2, 'Mon Feb 25 2019 07:23:39 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('vue组件运用到页面的实例', '##### 子组件input_group\n```javascript\n<template>\n    <div class=\"input_group\">\n        <label :for=\"name\">{{label}}</label>\n        <input \n          :type=\"type\"\n          :value=\"value\"\n          :placeholder=\"placeholder\"\n          :name=\'name\'\n          @input=\"$emit(\'input\', $event.target.value)\"\n	 />\n          <!-- $emit(\'input\', $event.target.value)获取输入框中输入的内容 -->\n    </div>\n</template>\n<script>\nexport default {\n  name: \"input_group\",\n  props: {\n    type: {\n      type: String,\n      default: \"text\"\n    },\n    value: String,\n    placeholder: String,\n    name: String,\n    label: String\n  }\n};\n</script>\n```\n##### 子组件yBUtton\n```javascript\n<template>\n    <div class=\"input_group\">\n        <button\n            class=\"y-button\"\n            :class=\"{\'is-disabled\':disabled}\"\n            :type=\"type\"\n            :disable=\"disabled\"\n            @click=\"$emit(\'click\')\"\n        >\n        <slot></slot>\n        </button>\n    </div>\n</template>\n<script>\nexport default {\n  name: \"ybutton\",\n  props: {\n    type: String,\n    disabled: {\n        type: Boolean,\n        default: false\n    }\n  }\n};\n</script>\n```\n##### 父组件应用\n```javascript\n<template>\n    <div class=\"login\">\n        <div class=\"title\">用户登录</div>\n        <div class=\"content\">\n            <!-- 表单 -->\n            <form>\n                <InputGroup\n                    label= \"账号\"\n                    placeholder= \"请填写邮箱\"\n                    v-model= \"user.email\"\n                    />\n                <InputGroup\n                    label= \"密码\"\n                    placeholder= \"请填写密码\"\n                    v-model= \"user.password\"\n                    type= \"password\"\n                    />\n            </form>\n            <div class=\"btn_warp\">\n                <YButton :disabled=\"isDisabled\" @click=\"loginClick\">登录</YButton>\n            </div>\n        </div>\n        <div class=\"footer_warp\">\n            <button class=\"register\" @click=\"$router.push(\'/register\')\">|注册账号|</button>\n        </div>\n    </div>\n</template>\n\n<script>\nimport InputGroup from \'../components/inputGroup\'\nimport YButton from \'../components/YButton\'\nexport default {\n    name: \"login\",\n    data(){\n        return{\n            user: {\n                email: \'\',\n                password: \'\'\n            }\n        }\n    },\n    components: {\n        InputGroup,\n        YButton\n        // 注册组件\n    },\n}\n</script>\n```', '2019-02-25 16:06:13', 'vue', 196, 2, 'Mon Feb 25 2019 08:06:13 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('安装各类软件', '##### sudo apt-get update \n更新apt-get至最新\n\n', '2019-03-22 20:39:05', 'ubuntu', 197, 2, 'Fri Mar 22 2019 12:39:05 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('平时用到的各种操作合集', '#### 导出数据库\n``` \nmysqldump -uroot -p blogweb > blogweb.sql\n```\n> ```root```默认mysql名\n```blogweb```需要导出的数据库\n```blogweb.sql```导出的.sql文件名', '2019-03-22 21:20:03', 'mysql', 198, 2, 'Fri Mar 22 2019 13:20:04 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('外边距折叠', '### 块级元素的上外边距和下外边距有时会合并（或折叠）为一个外边距，其大小取其中的最大者，这种行为称为外边距折叠（margin collapsing），有时也翻译为外边距合并。\n- 外边距折叠： 相邻的两个或多个外边距 (margin) 在垂直方向会合并成一个外边距（margin）\n- 相邻： 没有被非空内容、padding、border 或 clear 分隔开的margin特性. 非空内容就是说这元素之间要么是兄弟关系或者父子关系\n- 垂直方向外边距合并计算: \na、参加折叠的margin都是正值：取其中 margin 较大的值为最终 margin 值。\nb、参与折叠的 margin 都是负值：取的是其中绝对值较大的，然后，从 0 位置，负向位移。\nc、参与折叠的 margin 中有正值，有负值：先取出负 margin 中绝对值中最大的，然后，和正 margin 值中最大的 margin 相加。', '2019-03-23 09:31:13', 'css', 199, 2, 'Sat Mar 23 2019 01:31:13 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('内联与块级标签区别', '## 内联\n内联标签不独占一行，如```<input>```.```<span>```.```<a>```等，设置宽高无效，垂直方向margin、padding无效。\n## 块级\n块级标签独占一行，如```<p>```.```<div>```等\n> display可以改变是否占行，其实就是设置是否为块元素或行内元素\nblock块级元素，inline行内元素', '2019-03-23 09:42:27', 'html', 200, 2, 'Sat Mar 23 2019 01:42:28 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('隐藏元素', '### 比较常规的，不破坏页面布局\n#### a、使用CSS的display:none，不会占有原来的位置\n#### b、使用CSS的visibility:hidden，会占有原来的位置\n#### c、使用HTML5中的新增属性hidden=\"hidden\"，不会占有原来的位置', '2019-03-23 09:44:49', 'css', 201, 2, 'Sat Mar 23 2019 01:44:49 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('重制浏览器默认样式，需要重制的原因', '#### 每种浏览器都有一套默认的样式表，即user agent stylesheet，网页在没有指定的样式时，按浏览器内置的样式表来渲染。这是合理的，像word中也有一些预留样式，可以让我们的排版更美观整齐。不同浏览器甚至同一浏览器不同版本的默认样式是不同的。但这样会有很多兼容问题。\n\n##### a、最简单的办法：（不推荐使用）*{margin: 0;padding: 0;}。\n\n##### b、使用CSSReset可以将所有浏览器默认样式设置成一样。\n\n##### c、normalize：也许有些cssreset过于简单粗暴，有点伤及无辜，normalize是另一个选择。bootstrap已经引用该css来重置浏览器默认样式，比普通的cssreset要精细一些，保留浏览器有用的默认样式，支持包括手机浏览器在内的超多浏览器，同时对HTML5元素、排版、列表、嵌入的内容、表单和表格都进行了一般化。\n[normalize官网](http://necolas.github.io/normalize.css/)\n[normalize.css](https://necolas.github.io/normalize.css/8.0.1/normalize.css)', '2019-03-23 09:54:24', 'css', 202, 2, 'Sat Mar 23 2019 01:54:24 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('css权重', '#### 行内样式>内联样式>外联样式\n#### !import(hack) > 行内 > ID > CLASS > 标签 | 伪类 | 属性选择器 > 伪元素 > 继承 > *\n\n```\n权重\nstyle 1000 行内样式\nid 100\nclass 10\nelement 1 标签\n```', '2019-03-23 15:38:51', 'css', 203, 2, 'Sat Mar 23 2019 07:38:52 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('vue动态往list列表中添加数据，滚动条永远置于底部的问题', '### 遇见的问题\n##### 一开始我的想法是，当添加数据的时候，先往列表中push数据，然后```document.getElementById(\'messages\').scrollTop = document.getElementById(\'messages\').scrollHeight;```，但是vue数据变化之后DOM并不是就在下一步进行渲染，所以若是打印此时list最后一个子元素，必定是当下的倒数第二个。\n### 解决如下\n##### 添加```watch```监听数据变化\n```javascript\nwatch:{\n   list(){\n       ...\n   }\n}\n```\n##### 然后调用```$nextTick()```方法\n```javascript\nwatch: {\n    list() {\n        this.$nextTick(() => {\n          document.getElementById(\'messages\').scrollTop = document.getElementById(\'messages\').scrollHeight;\n        })\n        console.log(\'数据变化\')\n    }\n  }\n```', '2019-03-24 00:19:15', 'vue', 204, 2, 'Sat Mar 24 2019 16:19:15 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('操作DOM', '**由于HTML文档被浏览器解析后就是一棵DOM树，要改变HTML的结构，就需要通过JavaScript来操作DOM。**\n\n### 始终记住DOM是一个树形结构。操作一个DOM节点实际上就是这么几个操作：\n\n- 更新：更新该DOM节点的内容，相当于更新了该DOM节点表示的HTML的内容；\n\n- 遍历：遍历该DOM节点下的子节点，以便进行进一步操作；\n\n- 添加：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点；\n\n- 删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点。\n\n##### 在操作一个DOM节点前，我们需要通过各种方式先拿到这个DOM节点。最常用的方法是```document.getElementById()```和```document.getElementsByTagName()```，以及CSS选择器```document.getElementsByClassName()```。\n\n##### 由于ID在HTML文档中是唯一的，所以```document.getElementById()```可以直接定位唯一的一个DOM节点。```document.getElementsByTagName()```和```document.getElementsByClassName()```总是返回一组DOM节点。要精确地选择DOM，可以先定位父节点，再从父节点开始选择，以缩小范围。\n### 例如：\n```javascript\n// 返回ID为\'test\'的节点：\nvar test = document.getElementById(\'test\');\n\n// 先定位ID为\'test-table\'的节点，再返回其内部所有tr节点：\nvar trs = document.getElementById(\'test-table\').getElementsByTagName(\'tr\');\n\n// 先定位ID为\'test-div\'的节点，再返回其内部所有class包含red的节点：\nvar reds = document.getElementById(\'test-div\').getElementsByClassName(\'red\');\n\n// 获取节点test下的所有直属子节点:\nvar cs = test.children;\n\n// 获取节点test下第一个、最后一个子节点：\nvar first = test.firstElementChild;\nvar last = test.lastElementChild;\n```\n**第二种方法是使用```querySelector()```和```querySelectorAll()```，需要了解selector语法，然后使用条件来获取节点，更加方便：**\n```javascript\n// 通过querySelector获取ID为q1的节点：\nvar q1 = document.querySelector(\'#q1\');\n\n// 通过querySelectorAll获取q1节点内的符合条件的所有节点：\nvar ps = q1.querySelectorAll(\'div.highlighted > p\');\n```\n### 例子：\n```html\n<!DOCTYPE html>\n<html>\n<head>\n	<title></title>\n</head>\n<body>\n<p class=\"aaa\">Paragraph</p>\n<p class=\"aaa\">Paragraph</p>\n<p class=\"aaa\">Paragraph</p>\n<p class=\"aaa\">Paragraph</p>\n<p class=\"aaa\">Paragraph</p>\n<p class=\"aaa\">Paragraph</p>\n<p class=\"aaa\">Paragraph</p>\n<script type=\"text/javascript\">\n    var lis = document.querySelectorAll(\".aaa\")\n    console.log(lis)\n    for(var i of lis){\n        i.style.backgroundColor = \'red\'\n    }\n    // lis.style.backgroundColor = \'red\';\n</script>\n</body>\n</html>\n```\n>注意：低版本的IE<8不支持==querySelector==和==querySelectorAll==。IE8仅有限支持。\n>严格地讲，我们这里的DOM节点是指==Element==，但是DOM节点实际上是Node，在HTML中，Node包括==Element、Comment、CDATA_SECTION==等很多种，以及根节点Document类型，但是，绝大多数时候我们只关心Element，也就是实际控制页面结构的Node，其他类型的Node忽略即可。根节点Document已经自动绑定为全局变量document。', '2019-03-24 15:15:48', 'javascript', 205, 2, 'Sun Mar 24 2019 07:15:48 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('更新DOM', '### 通过innerHTML更新\n```javascript\n// 获取<p id=\"p-id\">...</p>\nvar p = document.getElementById(\'p-id\');\n// 设置文本为abc:\np.innerHTML = \'ABC\'; // <p id=\"p-id\">ABC</p>\n// 设置HTML:\np.innerHTML = \'ABC <span style=\"color:red\">RED</span> XYZ\';\n// <p>...</p>的内部结构已修改\n```\n> innerText和textContent也可以改变文本，但是无法设置html标签，IE<9不支持textContent，更新样式的时候，需要用驼峰命名。\n### 修改样式\n```javascript\n// 获取<p id=\"p-id\">...</p>\nvar p = document.getElementById(\'p-id\');\n// 设置CSS:\np.style.color = \'#ff0000\';\np.style.fontSize = \'20px\';\np.style.paddingTop = \'2em\';\n```\n> style属性对应所有的css，但是需要用驼峰命名。\n', '2019-03-26 09:41:54', 'javascript', 206, 2, 'Tue Mar 26 2019 01:41:54 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('插入DOM', '##### 如果这个DOM节点是空的，例如，<div></div>，那么，直接使用innerHTML = \'<span>child</span>\'就可以修改DOM节点的内容，相当于“插入”了新的DOM节点。\n\n##### 如果这个DOM节点不是空的，那就不能这么做，因为innerHTML会直接替换掉原来的所有子节点。\n### appendChild，把一个子节点添加到父节点的最后一个子节点\n```html\n<!-- HTML结构 -->\n<p id=\"js\">JavaScript</p>\n<div id=\"list\">\n    <p id=\"java\">Java</p>\n    <p id=\"python\">Python</p>\n    <p id=\"scheme\">Scheme</p>\n</div>\n\n<script>\nvar\n    js = document.getElementById(\'js\'),\n    list = document.getElementById(\'list\');\nlist.appendChild(js);\n</script>\n\n<!-- 结果如下 -->\n<!-- HTML结构 -->\n<div id=\"list\">\n    <p id=\"java\">Java</p>\n    <p id=\"python\">Python</p>\n    <p id=\"scheme\">Scheme</p>\n    <p id=\"js\">JavaScript</p>\n</div>\n```\n> 因为我们插入的js节点已经存在于当前的文档树，因此这个节点首先会从原先的位置删除，再插入到新的位置。\n```javascript\nvar\n    list = document.getElementById(\'list\'),\n    haskell = document.createElement(\'p\');\nhaskell.id = \'haskell\';\nhaskell.innerText = \'Haskell\';\nlist.appendChild(haskell);\n```\n#### 改变全局，可以尝试,观察变化\n```javascript\nvar d = document.createElement(\'style\');\nd.setAttribute(\'type\', \'text/css\');\nd.innerHTML = \'p { color: red }\';\ndocument.getElementsByTagName(\'head\')[0].appendChild(d);\n```\n### insertBefore\n使用```parentElement.insertBefore(newElement, referenceElement);```，子节点会插入到```referenceElement```之前。\n```html\n<!-- HTML结构 -->\n<div id=\"list\">\n    <p id=\"java\">Java</p>\n    <p id=\"python\">Python</p>\n    <p id=\"scheme\">Scheme</p>\n</div>\n\n<!-- js -->\nvar\n    list = document.getElementById(\'list\'),\n    ref = document.getElementById(\'python\'),\n    haskell = document.createElement(\'p\');\nhaskell.id = \'haskell\';\nhaskell.innerText = \'Haskell\';\nlist.insertBefore(haskell, ref);\n\n<!-- HTML结构结果 -->\n<div id=\"list\">\n    <p id=\"java\">Java</p>\n    <p id=\"haskell\">Haskell</p>\n    <p id=\"python\">Python</p>\n    <p id=\"scheme\">Scheme</p>\n</div>\n```', '2019-03-30 12:23:31', 'javascript', 207, 2, 'Sat Mar 30 2019 04:23:32 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('删除DOM', '### 要删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的removeChild把自己删掉\n```javascript\n// 拿到待删除节点:\nvar self = document.getElementById(\'to-be-removed\');\n// 拿到父节点:\nvar parent = self.parentElement;\n// 删除:\nvar removed = parent.removeChild(self);\nremoved === self; // true\n```\n>删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置。\n### children属性是一个只读属性，并且它在子节点变化时会实时更新\n```html\n<div id=\"parent\">\n    <p>First</p>\n    <p>Second</p>\n</div>\n当我们用如下代码删除子节点时：\n<script>\nvar parent = document.getElementById(\'parent\');\nparent.removeChild(parent.children[0]);\nparent.removeChild(parent.children[1]); // <-- 浏览器报错\n</script>\n```\n>注意：浏览器报错：```parent.children[1]```不是一个有效的节点。原因就在于，当```<p>First</p>```节点被删除后，```parent.children```的节点数量已经从2变为了1，索引[1]已经不存在了。\n因此，删除多个节点时，要注意children属性时刻都在变化。\n### 小例子，<!-- HTML结构 -->\n<ul id=\"test-list\">\n    <li>JavaScript</li>\n    <li>Swift</li>\n    <li>HTML</li>\n    <li>ANSI C</li>\n    <li>CSS</li>\n    <li>DirectX</li>\n</ul>\n\n##### 把与Web开发技术不相关的节点删掉：\n```javascript\nvar parent = document.getElementById(\'test-list\');\nvar children = [].slice.call(parent.children); //Array.prototype.slice.call()\nchildren.forEach((element) => {\n    for (var s of [\'Swift\', \'ANSI C\', \'DirectX\']) {\n        if (element.innerText == s) {\n            parent.removeChild(element);\n        }\n    }\n});\n```', '2019-03-30 15:34:58', 'javascript', 208, 2, 'Sat Mar 30 2019 07:34:58 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('判断变量是数组Array还是Object', '```javascript\nvar arr = new Array();\n\nvar obj = new Object();\n\ntypeof arr\n\"object\"\ntypeof obj\n\"object\"\n// 无法判断\n\narr instanceof Array\ntrue\narr instanceof Object\ntrue\nobj instanceof Array\nfalse\nobj instanceof Object\ntrue\n// instanceof用于判断引用类型属于哪个构造函数的方法\n// 不建议，判断不出Array，只能判断出是否是Object\n\nisNaN(arr.length)\nfalse\nisNaN(obj.length)\ntrue\n// 可以判断\n\nArray.isArray(arr)\ntrue\nArray.isArray(obj)\nfalse\n// 可以判断\n\narr.toString()\n\"\"\nobj.toString()\n\"[object Object]\"\n// 可以判断\n\nObject.prototype.toString.call(arr)\n\"[object Array]\"\nObject.prototype.toString.call(obj)\n\"[object Object]\"\n// 可以判断\n```\n\n### 欢迎补充，==807478609@qq.com==', '2019-03-30 20:15:38', 'javascript', 209, 2, 'Sat Mar 30 2019 12:15:38 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('对象，原型继承', '#### JavaScript对每个创建的对象都会设置一个原型，指向它的原型对象。\n#### 当我们用```obj.xxx```访问一个对象的属性时，JavaScript引擎先在当前对象上查找该属性，如果没有找到，就到其原型对象上找，如果还没有找到，就一直上溯到```Object.prototype```对象，最后，如果还没有找到，就只能返回undefined。\n```javascript\nvar Student = function(name,age){\n	this.name = name;\n	this.age = age\n}\n// 不成文规定，构造函数首字母大写\n\nStudent.prototype.sayHi = function(){\n	console.log(this.name);\n}\n\nvar Teacher = function(name,age,job){\n	Student.call(this,name,age);\n	this.job = job;\n}\n\nvar tea = new Teacher(\'llh\',25,\'math\');\ntea.sayHi()\n// tea.sayHi is not a function,还没有继承,自身也没有这个方法\n// 它会先去tea.__proto__里面寻找该方法,没有\n\n// 继承\n// 先创建一个中间函数，为空函数\nvar F = function(){}\n\n// 将函数F的原型指向Student的原型\nF.prototype = Student.prototype\n\n// 把Teacher的原型指向一个新的F对象，F对象的原型正好指向Student.prototype:\nTeacher.prototype = new F()\n\n// 将Teacher的构造函数指回自己\nTeacher.prototype.constructor = Teacher\n\ntea.sayHi()\n// llh\n// 现在tea.__proto__里面找该方法，发现没有，继续往上找tea.__proto__.__proto__，里面有，那就调用该方法。若自己本身就该方法，则不会再往上找。\n\ntea.__proto__ == Teacher.prototype\ntrue\ntea.__proto__.__proto__ == Student.prototype\ntrue\ntea instanceof Student\ntrue\ntea instanceof Teacher\ntrue\n```\n### 可以封装一个函数，用来实现继承\n```javascript\nfunction inherits(child,parent){\n     var F = function(){}\n     F.prototype = parent.prototype\n     child.prototype = new F()\n     child.prototype.constructor = child\n}\n```\n\n### ES6，class继承\n```javascript\nclass Student{\n     constructor(name,age){\n          this.name = name\n          this.age = age\n     }\n     sayHi(){\n          console.log(this.name)\n     }\n}\n\nclass Teacher extends Student{\n     constructor(name,age,job){\n          super(name,age)\n	  this.job = job\n     }\n}\n```\n#### 上述提到的创建中间函数F()进行继承，那么还有另外一种更简便的方法，如下：\n```javascript\nfunction Person (name, age) {\n            this.name = name;\n            this.age = age;\n        }\nPerson.prototype.say = function(){\n    console.log(\'hello, my name is \' + this.name);\n};\nfunction Man(name, age) {\n    Person.apply(this, arguments);\n}\nMan.prototype = Object.create(Person.prototype);//a.\nMan.prototype.constructor = Man;//b.\n```\n这里用到了```Object.creat(obj)```方法，该方法会对传入的obj对象进行浅拷贝，类似于：\n```javascript\nfunction create(obj){\n    function T(){};\n    T.prototype = obj;\n    return new T();\n}\n// 其实道理一样\n```', '2019-03-31 14:09:51', 'javascript', 210, 2, 'Sun Mar 31 2019 06:09:52 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('AJAX', '### 创建XMLHttpRequest对象\n> 所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。\n##### 兼容性\n```javascript\nvar xmlhttp;\nif (window.XMLHttpRequest)\n{\n    //  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码\n    xmlhttp=new XMLHttpRequest();\n}\nelse\n{\n    // IE6, IE5 浏览器执行代码\n    xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n}\n```\n### 向服务器发送请求\n```javascript\nfunction success(text) {\n    var textarea = document.getElementById(\'test-response-text\');\n    textarea.value = text;\n}\n\nfunction fail(code) {\n    var textarea = document.getElementById(\'test-response-text\');\n    textarea.value = \'Error code: \' + code;\n}\n\nvar request = new XMLHttpRequest(); // 新建XMLHttpRequest对象\n\nrequest.onreadystatechange = function () { // 状态发生变化时，函数被回调\n// onreadystatechange存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。\n    if (request.readyState === 4) { // 成功完成\n// readyState 存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。\n	0: 请求未初始化\n	1: 服务器连接已建立\n	2: 请求已接收\n	3: 请求处理中\n	4: 请求已完成，且响应已就绪	\n        // 判断响应结果:\n        if (request.status === 200) {\n	    200: \"OK\"\n	    404: 未找到页面\n            // 成功，通过responseText拿到响应的文本:\n            return success(request.responseText);\n        } else {\n            // 失败，根据响应码判断失败原因:\n            return fail(request.status);\n        }\n    } else {\n        // HTTP请求还在继续...\n    }\n}\n\n// 发送请求:\nrequest.open(\'GET\', \'/api/categories\');\nrequest.send();\n\nalert(\'请求已发送，请等待响应...\');\n```\n#### 当 readyState 等于 4 且状态为 200 时，表示响应已就绪：\n```javascript\nxmlhttp.onreadystatechange=function()\n{\n    if (xmlhttp.readyState==4 && xmlhttp.status==200)\n    {\n        document.getElementById(\"myDiv\").innerHTML=xmlhttp.responseText;\n    }\n}\n```\n\n## 拓展\n```javascript\n// 封装ajax函数，采用promise\n<script type=\"text/javascript\">\n      function ajax(method, url, data) {\n        var request = new XMLHttpRequest();\n        return new Promise(function (resolve, reject) {\n            request.onreadystatechange = function () {\n                if (request.readyState === 4) {\n                    if (request.status === 200) {\n                        resolve(request.responseText);\n                    } else {\n                        reject(request.status+\'不存在这个地址\');\n                    }\n                }\n            };\n            request.open(method, url);\n            request.send(data);\n        });\n    }\n        var log = document.getElementById(\'test-promise-ajax-result\');\n        var p = ajax(\'GET\', \'https://raw.githubusercontent.com/mdn/learning-area/master/javascript/apis/fetching-data/verse10.txt\');\n        p.then(function (text) { // 如果AJAX成功，获得响应内容\n            log.innerText = text;\n        }).catch(function (a) { // 如果AJAX失败，获得响应代码\n            log.innerText = \'ERROR: \' + a;\n            console.log(\'ERROR: \' + a)\n        });\n    </script>\n```\n## fetch api\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n\n    <title>Ajax starting point</title>\n\n    <style>\n      html, pre {\n        font-family: sans-serif;\n      }\n      body {\n        width: 500px;\n        margin: 0 auto;\n        background-color: #ccc;\n      }\n      pre {\n        line-height: 1.5;\n        letter-spacing: 0.05rem;\n        padding: 1rem;\n        background-color: white;\n      }\n      label {\n        width: 200px;\n        margin-right: 33px;\n      }\n      select {\n        width: 350px;\n        padding: 5px;\n      }\n    </style>\n    <!--[if lt IE 9]>\n      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js\"></script>\n    <![endif]-->\n  </head>\n\n  <body>\n    <h1>Ajax starting point</h1>\n\n    <form>\n      <label for=\"verse-choose\">Choose a verse</label>\n      <select id=\"verse-choose\" name=\"verse-choose\">\n        <option>Verse 1</option>\n        <option>Verse 2</option>\n        <option>Verse 3</option>\n        <option>Verse 4</option>\n      </select>\n    </form>\n\n    <h2>The Conqueror Worm, <em>Edgar Allen Poe, 1843</em></h2>\n\n    <pre>\n\n    </pre>\n\n    <script>\n      var verseChoose = document.querySelector(\'select\');\n      var poemDisplay = document.querySelector(\'pre\');\n\n      verseChoose.onchange = function(){\n        var verse = verseChoose.value;\n        updateDisplay(verse);\n      }\n\n      function updateDisplay(verse){\n        verse = verse.replace(\" \",\"\");\n        verse = verse.toLowerCase();\n\n        var url = \'https://raw.githubusercontent.com/mdn/learning-area/master/javascript/apis/fetching-data/\'+ verse + \'.txt\'\n        // fetch(url).then(function(response){\n        //   response.text().then(function(text){\n        //     poemDisplay.textContent = text;\n        //   })\n        // })\n\n        fetch(url).then(function(response){\n          return response.text();\n        }).then(function(text){\n          poemDisplay.textContent = text;\n        })\n      }\n      updateDisplay(\'Verse 1\');\n      verseChoose.value = \'Verse 1\';\n    </script>\n  </body>\n</html>\n```\n### 解决浏览器缓存问题\n1、在ajax发送请求前加上 ```anyAjaxObj.setRequestHeader(\"If-Modified-Since\",\"0\")```。\n\n2、在ajax发送请求前加上 ```anyAjaxObj.setRequestHeader(\"Cache-Control\",\"no-cache\")```。\n\n3、在URL后面加上一个随机数： ```\"fresh=\" + Math.random();```。\n\n4、在URL后面加上时间戳：```\"nowtime=\" + new Date().getTime();```。\n\n[封装原生ajax](https://blog.csdn.net/u010782846/article/details/82191356)\n[面试题](https://www.jianshu.com/p/1e147aba6c31)', '2019-04-01 10:27:01', 'javascript', 211, 2, 'Mon Apr 01 2019 02:27:01 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('vue.js 接收url参数', '### 1) 路由配置传参方式\n在配置路由时 例如 \"/firewall/authorize/:uid/:uname/:token\"\n页面url为 http://XXX.com/firewall/authorize/23/zhangman/232454\n\njs 接收方式 this.$route.params.uid,\n### 2) ?传参方式\n例 http://XXX.com/firewall/authorize?uid=12&uname=zhangman&token=23243\njs 接收方式 this.$route.query.uid', '2019-04-09 10:19:03', 'vue', 212, 2, 'Tue Apr 09 2019 02:19:04 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('vue-router跳转页面后置顶问题', '### main.js\n```javascript\nconst router = new VueRouter({\n    routes: r,\n    //在此处加入\n    scrollBehavior(to,from,savedPosition){\n      if(savedPosition){\n        return savedPosition;\n      }else{\n        return {x:0,y:0}\n      }\n    },\n})\n```', '2019-04-10 13:30:15', 'vue', 213, 2, 'Wed Apr 10 2019 05:30:15 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('闭包', '##### 当内部函数在定义它的作用域的外部被引用时,就创建了该内部函数的闭包 ,如果内部函数引用了位于外部函数的变量,当外部函数调用完毕后,这些变量在内存不会被释放,因为闭包需要它们.', '2019-04-10 13:53:22', 'javascript', 214, 2, 'Wed Apr 10 2019 05:53:22 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('css order属性（设置弹性盒子子元素的排序顺序）', '```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>菜鸟教程(runoob.com)</title>\n<style>\n#main {\n    width: 400px;\n    height: 150px;\n    border: 1px solid #c3c3c3;\n    display: -webkit-flex; /* Safari */\n    display: flex;\n}\n\n#main div {\n    width: 70px;\n    height: 70px;\n}\n\n/* Safari 6.1+ */\ndiv#myRedDIV   {-webkit-order: 2;}\ndiv#myBlueDIV  {-webkit-order: 4;}\ndiv#myGreenDIV {-webkit-order: 3;}\ndiv#myPinkDIV  {-webkit-order: 1;}\n\n/* Standard syntax */\ndiv#myRedDIV   {order: 2;}\ndiv#myBlueDIV  {order: 4;}\ndiv#myGreenDIV {order: 3;}\ndiv#myPinkDIV  {order: 1;}\n</style>\n</head>\n<body>\n\n<div id=\"main\">\n  <div style=\"background-color:coral;\" id=\"myRedDIV\"></div>\n  <div style=\"background-color:lightblue;\" id=\"myBlueDIV\"></div>\n  <div style=\"background-color:lightgreen;\" id=\"myGreenDIV\"></div>\n  <div style=\"background-color:pink;\" id=\"myPinkDIV\"></div>\n</div>\n\n<p><b>注意:</b> Internet Explorer 10 及更早版本浏览器不支持 order 属性。</p>\n<p><b>注意:</b> Safari 6.1 及更新版本通过 -webkit-order 属性支持该属性。</p>\n\n</body>\n</html>\n```', '2019-04-15 16:04:23', 'css', 215, 2, 'Mon Apr 15 2019 08:04:23 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES (':not CSS选择器', '```css\n.fancy {\n  text-shadow: 2px 2px 3px gold;\n}\n\n/* 类名不是 `.fancy` 的 <p> 元素 */\np:not(.fancy) {\n  color: green;\n}\n\n/* 非 <p> 元素 */ \nbody :not(p) {\n  text-decoration: underline;\n}\n\n/* 非 <div> 或 <span> 的元素 */\nbody :not(div):not(span) {\n  font-weight: bold;\n}\n\n/* 类名不是 `.crazy` or `.fancy` 的元素 */\n/* 注意，此语法尚未被较好地支持。 */\nbody :not(.crazy, .fancy) {\n  font-family: sans-serif;\n}\n```', '2019-04-16 11:45:04', 'css', 216, 2, 'Tue Apr 16 2019 03:45:04 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('使得<a>标签能够百分百充满屏幕或者盒子宽度（其余同理）', '```css\na {\n	display: block;\n	width: 100%;\n}\n```', '2019-04-16 15:05:14', 'css', 217, 2, 'Tue Apr 16 2019 07:05:14 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('JS DOM操作获取div距离浏览器上下左右的距离', 'rectObject = object.getBoundingClientRect();\n\n```\nDOMRect\nbottom: 2064\nheight: 2000\nleft: 0\nright: 1440\ntop: 64\nwidth: 1440\nx: 0\ny: 64\n__proto__: DOMRectbottom: 2064height: 2000left: (...)right: (...)top: (...)width: (...)x: (...)y: (...)constructor: ƒ DOMRect()Symbol(Symbol.toStringTag): \"DOMRect\"get height: ƒ height()set height: ƒ height()get width: ƒ width()set width: ƒ width()get x: ƒ x()set x: ƒ x()get y: ƒ y()set y: ƒ y()__proto__: DOMRectReadOnly\n```', '2019-04-16 22:12:21', 'javascript', 221, 2, 'Tue Apr 16 2019 14:12:22 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('vue 实现动态吸顶效果', '### HTML\n```html\n  <div class=\"box\">\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <div class=\"box_fixed\" id=\"boxFixed\" :class=\"{\'is_fixed\' : isFixed}\">\n      吸顶\n    </div>\n    <h3>快下来</h3>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n    <h4>吸顶测试</h4>\n  </div>\n```\n### JavaScript\n```javascript\n export default {\n    data(){\n      return {\n        isFixed: false,\n        offsetTop:0\n      }\n    },\n    mounted(){\n      window.addEventListener(\'scroll\',this.initHeight);\n      this.$nextTick( () => {\n        this.offsetTop = document.querySelector(\'#boxFixed\').offsetTop;\n      })\n    },\n    methods:{\n      initHeight () {\n        var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop\n        this.isFixed = scrollTop > this.offsetTop ? true : false;\n      },\n    },\n    destroyed () {\n      window.removeEventListener(\'scroll\', this.handleScroll)\n    },\n  }\n```\n### CSS\n```css\n.is_fixed{\n    position: fixed;\n    top: 0;\n  }\n\n```', '2019-04-17 10:01:54', 'vue', 222, 2, 'Wed Apr 17 2019 02:01:54 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('JSON对象和JSON字符串之间的转化', '### JSON字符串转JSON对象\n- #### 使用JSON.parse(str)\n```javascript\nvar jsonStr = \'{\"name\":\"zhangsan\",\"age\":23,\"email\":\"chentging@aliyun.com\"}\';\nvar json = JSON.parse(jsonStr);\nconsole.log(json);//输出:Object {name: \"zhangsan\", age: 23, email: \"chentging@aliyun.com\"}\n```\n- #### 使用eval()\n```javascript\nvar jsonStr = \'{\"name\":\"zhangsan\",\"age\":23,\"email\":\"chentging@aliyun.com\"}\';\nvar json = eval (\"(\" + jsonStr + \")\");\nconsole.log(json);//输出:Object {name: \"zhangsan\", age: 23, email: \"chentging@aliyun.com\"}\n```\n### JSON对象转JSON字符串\n- #### 使用JSON.stringify()\n```javascript\nvar json = {name: \"zhangsan\", age: 23, email: \"chentging@aliyun.com\"};\nvar jsonStr = JSON.stringify(json);\nconsole.log(jsonStr);//输出:\"{\"name\":\"zhangsan\",\"age\":23,\"email\":\"chentging@aliyun.com\"}\"\n```\n> 数据在前后端之间传递，需要把json对象转换为json字符串', '2019-04-26 20:09:31', 'javascript', 223, 2, 'Fri Apr 26 2019 12:09:31 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('ul 下 li 标签使用事件委托后的 动态赋予class 交互体验良好', '```html\n<ul class=\"classificationContent\" @click=\"showli\">\n    <li v-for=\"(item,index) in this.classification\" :key=\"index\"><router-link :to=\"{path:\'/\'}\"><img width=\"23\" height=\"23\" src=\"../assets/home/classification.svg\">{{item}}</router-link><span style=\"float:right\" :class=\"liactiveClass == index ? \'liactive\' : \'\' \">123</span></li>\n</ul>\n```\n### VUE data\n```javascript\ndata() { \n        return {\n            classification: [],\n            classificationbackups: [],\n            kindOfadd: \'\',\n            kind: \'\',\n            activekind: \'\',\n            liactiveClass: -1,\n        }\n    },\n```\n### 根据之前的模糊查询，监听搜索框数据变化 VUE watch\n```\nwatch: {\n        kind: function() {\n            // 监听搜索框输入的变化，调用classificationSearch()方法进行模糊查询分类\n            this.classificationSearch();\n        },\n```\n#### 每次点击了```li```标签后，将点击获取的分类赋给activekind，搜索框监听变化的函数如下\n```javascript\nclassificationSearch() {\n            // 实现模糊查询分类\n            if(this.kind == \'\') {\n                this.liactiveClass = this.classificationbackups.indexOf(this.activekind);\n                this.classification = this.classificationbackups;\n            }else {\n                var _search = this.kind.toLowerCase();\n                var newclassification = [];\n                this.classificationbackups.filter( item => {\n                    if(item.toLowerCase().indexOf(_search) !== -1) {\n                        newclassification.push(item);\n                    }\n                })\n                this.classification = newclassification;\n                this.liactiveClass = this.classification.indexOf(this.activekind);\n            }\n        }\n```\n[事件委托详情点击](http://www.hjslihaoaijiaqi.club:7777/detailed/76)', '2019-04-26 20:10:12', 'vue', 224, 2, 'Fri Apr 26 2019 12:10:12 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('HTML方面性能优化简介', '①资源文件js css 图片合并压缩\n②减少页面dom操作，操作多的话可以考虑使用虚拟dom\n③减少http请求\n④使用cdn加速\ncdn的作用：cdn可以处理整个网站 70%-95%的访问量，从而解决网站的并发量，简单的说就是通过在不同地点缓存内容，然后通过负载平衡等技术将用户请求定向到最近的缓存服务器上获取内容，提高用户访问网站的响应速度。\n⑤减少cookie大小\n', '2019-04-26 20:10:42', 'html', 225, 2, 'Fri Apr 26 2019 12:10:42 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('data-* 全局属性', '```html\n<!DOCTYPE html>\n<html>\n<head>\n<script>\nfunction showDetails(animal) {\n    var animalType = animal.getAttribute(\"data-animal-type\");\n    alert(animal.innerHTML + \"是一种\" + animalType + \"。\");\n}\n</script>\n</head>\n<body>\n\n<h1>物种</h1>\n\n<p>点击某个物种来查看其类别：</p>\n\n<ul>\n  <li onclick=\"showDetails(this)\" id=\"owl\" data-animal-type=\"鸟类\">喜鹊</li>\n  <li onclick=\"showDetails(this)\" id=\"salmon\" data-animal-type=\"鱼类\">金枪鱼</li>  \n  <li onclick=\"showDetails(this)\" id=\"tarantula\" data-animal-type=\"蜘蛛\">蝇虎</li>  \n</ul>\n\n</body>\n</html>\n```', '2019-04-26 20:11:00', 'html', 226, 2, 'Fri Apr 26 2019 12:11:00 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
INSERT INTO `content` VALUES ('p标签首行缩进', 'p{\ntext-indent:2em;\n}', '2019-04-26 20:11:26', 'css', 227, 2, 'Fri Apr 26 2019 12:11:26 GMT', '梁李昊', 'http://localhost:5000/headimg/梁李昊.png', 0, '');
COMMIT;

-- ----------------------------
-- Table structure for kinds
-- ----------------------------
DROP TABLE IF EXISTS `kinds`;
CREATE TABLE `kinds` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `kind` varchar(255) COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of kinds
-- ----------------------------
BEGIN;
INSERT INTO `kinds` VALUES (1, 'css');
INSERT INTO `kinds` VALUES (2, 'html');
INSERT INTO `kinds` VALUES (3, 'vue');
INSERT INTO `kinds` VALUES (4, 'javascript');
INSERT INTO `kinds` VALUES (5, 'ubuntu');
INSERT INTO `kinds` VALUES (6, 'mysql');
INSERT INTO `kinds` VALUES (7, 'macOS');
INSERT INTO `kinds` VALUES (8, 'Private_love');
COMMIT;

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `username` varchar(255) COLLATE utf8_bin NOT NULL,
  `AccountNumber` varchar(255) COLLATE utf8_bin NOT NULL,
  `password` varchar(255) COLLATE utf8_bin NOT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `sudo` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `Head_portrait` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT 'http://139.199.206.151:7777/static/headImg/default.jpg',
  `classification` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '默认',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of users
-- ----------------------------
BEGIN;
INSERT INTO `users` VALUES ('梁李昊', 'lianglihao', 'LLHjq123456', 2, '123456', 'http://localhost:5000/headimg/梁李昊.png', 'vue**/javascript**/mysql**/ubuntu**/react**/css3**/html5');
INSERT INTO `users` VALUES ('眼里有星河', 'lihaoaijiaqi', 'lihaochaoaijiaqi', 3, '110899', 'http://www.hjslihaoaijiaqi.club:7777/static/headImg/default.jpg', '默认');
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
